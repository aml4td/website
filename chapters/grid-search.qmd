---
knitr:
  opts_chunk:
    cache.path: "../_cache/grid/"
---

# Optimization via Grid Search {#sec-grid}

```{r}
#| label: grid-setup
#| include: false
source("../R/_common.R")

# ------------------------------------------------------------------------------

library(tidymodels)
library(finetune)
library(sfd)
library(doParallel)

# ------------------------------------------------------------------------------

load("../RData/ames_train.RData")
load("../RData/ames_folds.RData")
load("../RData/grid_benchmarks.RData")

# ------------------------------------------------------------------------------
# Set options

cl <- makePSOCKcluster(parallel::detectCores(logical = TRUE))
registerDoParallel(cl)
tidymodels_prefer()
theme_set(theme_transparent())
set_options()

```

Grid search is a method to optimize tuning parameters for models and/or their preprocessors. It creates a pre-defined set of candidate values and computes performance from each. From there, the numerically best candidate could be chosen, or the relationship between the tuning parameters and model performance can be inspected to see if additional optimization might benefit the model. 

Suppose there is a single tuning parameter, as in the learning rate example of @sec-grid-and-sequential, each candidate takes a scalar value (quantitative or qualitative). In other cases, there are multiple tuning parameters, such as the K-nearest neighbors example shown below. In this case, a candidate is multi-dimensional. 

The previous chapter demonstrated that using external data to evaluate the model is crucial (be it resampling or a validation set). Grid search has no free lunch: we cannot simply fit the model and evaluate it by predicting the same data. 

@alg-grid-search illustrates the process. For a model with $m$ tuning parameters, we let $\Theta$ represent the collection of $s$ candidate values. For each specific value ($\theta_j$), we resample the model to produce some measure of efficacy (e.g., $R^2$, accuracy, etc.)^[This process was illustrated in [Algorithm 9.1](tmp_resampling.html#alg-resampling).]. From there, the best value is chosen, or additional work is carried out to find a suitable candidate. 

:::: {.columns}

::: {.column width="20%"}

:::

::: {.column width="60%"}

```pseudocode
#| label: alg-grid-search
#| html-indent-size: "1.2em"
#| html-comment-delimiter: "//"
#| html-line-number: true
#| html-line-number-punc: ":"
#| html-no-end: false

\begin{algorithm}
\caption{Grid search for tuning parameter optimization that loops over the resampling algorithm shown in TODO.}
\begin{algorithmic}
\State $D$: training set
\State $B$: number of resamples
\State $f()$: modeling function
\State $\Theta$: Parameter set ($s \times m$) with candidates $\theta_j$
\For{$j=1$ \To $m$}
  \State Generate $\bar{Q}_{j} =$ \Call{Resample}{$D, B, f(\cdot; \theta_j)$} corresponding to candidate $\theta_j$.
\EndFor
\State Determine $\hat{\theta}_{opt}$ that optimizes $\bar{Q}_{j}$.
\end{algorithmic}
\end{algorithm}
```

:::

::: {.column width="20%"}

:::

::::


```{r}
#| label: knn-grids
#| include: false

knn_prm <- parameters(neighbors(c(1, 50)), dist_power())

knn_reg <-
  grid_regular(knn_prm, levels = c(5, 3)) %>%
  mutate(grid = "Regular")

sfd_size <- nrow(knn_reg)

vals <- map(knn_prm$object, ~ rep_len(value_seq(.x, sfd_size), length.out = sfd_size))

set.seed(nrow(knn_reg) * 10)
knn_random <-
  grid_random(knn_prm, size = sfd_size) %>%
  mutate(grid = "Random")

knn_sfd <- 
  get_design(2, sfd_size, type = "max_min_l1") %>% 
  update_values(vals) %>% 
  setNames(names(knn_random)) %>%
  mutate(grid = "Space-Filling")
 
knn_grids <- 
  bind_rows(knn_reg, knn_random, knn_sfd) %>%
  mutate(
    grid = factor(grid, levels = c("Regular", "Random", "Space-Filling"))
  )
```

To demonstrate, this chapter will initially focus on grids for a K-nearest neighbors (KNN) model with two tuning parameters^[These are described in more detail in @sec-cls-knn]: 

- The number of neighbors (from 1 to 50 neighbors). 
- The Minkowski distance order (values ranging from 1.0 to 2.0). 

We'll illustrate different strategies using this model setup with varying configurations of these three tuning parameters. 

There are two main classes of grids: regular and irregular. We can view generating a collection of candidate models as a statistical design of experiments (DOE) problem [@BHH]. There is a long history of DOE, and we'll invoke relevant methods for each grid type. @santner2018design and @gramacy2020surrogates have excellent overviews of the DOE methods discussed in this chapter. 

The following two sections describe different methods for creating the candidate set $\Theta$. Subsequent sections describe strategies for making grid search efficient using tools such as parallel processing and model racing. 


## Regular grids {#sec-regular-grid}

A regular grid starts with a sequence or set of values for each tuning parameter and then creates all combinations. In statistics, this is referred to as a factorial design. The number of values per tuning parameter does not have to be the same. To illustrate a regular grid, we'll use four values of the number of neighbors, all three weight functions, and two values of the distance order. This grid of `r nrow(knn_reg)` candidates is shown in @fig-knn-grids. Each weight function occurs at the same values as the other two parameter values. The grid covers the entire space with significant gaps in between.  

```{r}
#| label: fig-knn-grids
#| echo: false
#| out-width: 75%
#| fig-width: 7
#| fig-height: 3
#| fig-cap: Three types of grids (in columns) are illustrated with tuning parameters from a K-nearest neighbor model. Each grid contains 16 candidates. The space-filling design was created using the MaxiMin method described in @sec-irregular-grid. 

knn_grids %>%
  ggplot(aes(neighbors, dist_power)) +
  geom_point(cex = 2, alpha = 2 / 3) +
  labs(x = neighbors()$label, y = dist_power()$label) +
  facet_wrap(~ grid) +
  coord_fixed(ratio = 50) 
```


```{r}
#| label: knn-grid-res
#| include: false
#| cache: true

f <- expr(-1 - 4 * A - 2 * B - 0.2 * A^2 + 1 * B^2)

x_seq <- seq(-4, 4, length.out = 100)
grid <-
  crossing(A = seq(-3, 3, length.out = 100), B = x_seq) %>%
  mutate(
    lp = rlang::eval_tidy(f, data = .)
  )

set.seed(943)
sim_tr <- sim_logistic(200, f)

set.seed(6268)
sim_folds_rep <- vfold_cv(sim_tr, repeats = 5)

# ------------------------------------------------------------------------------

knn_spec <- 
  nearest_neighbor(neighbors = tune(), dist_power = tune(), 
                   weight_func = "rectangular") %>% 
  set_mode("classification")

format_best_knn <- function(x, ...) {
  bst <- select_best(x, ...)
  paste0(
      bst$neighbors, " neighbors and and a Minkowski distance order of ",
      sprintf("%1.1f", bst$dist_power)
      )
}

# ------------------------------------------------------------------------------

knn_reg_res <- 
  knn_spec %>% 
  tune_grid(
    class ~ A + B,
    resamples = sim_folds_rep,
    metrics = metric_set(brier_class),
    grid = knn_reg %>% select(-grid)
  )

knn_reg_best <- format_best_knn(knn_reg_res, metric = "brier_class")

knn_rnd_res <- 
  knn_spec %>% 
  tune_grid(
    class ~ A + B,
    resamples = sim_folds_rep,
    metrics = metric_set(brier_class),
    grid = knn_random %>% select(-grid)
  )
knn_rnd_best <- format_best_knn(knn_rnd_res, metric = "brier_class")

knn_sfd_res <- 
  knn_spec %>% 
  tune_grid(
    class ~ A + B,
    resamples = sim_folds_rep,
    metrics = metric_set(brier_class),
    grid = knn_sfd %>% select(-grid)
  )   
knn_sfd_best <- format_best_knn(knn_sfd_res, metric = "brier_class")

knn_irr_grid_res <- 
  collect_metrics(knn_rnd_res) %>% 
  mutate(grid = "Random") %>% 
  bind_rows(
    collect_metrics(knn_sfd_res) %>% 
      mutate(grid = "Space-Filling")
  ) %>% 
  rename(
    `# Nearest Neighbors` = neighbors,
    `Minkowski Distance Order` = dist_power) %>% 
  pivot_longer(
    c(`# Nearest Neighbors`, `Minkowski Distance Order`),
    names_to = "parameter",
    values_to = "value"
  ) 
```

@fig-knn-regular-grid-tuning plots the results when tuning the simulated training set in @sec-complexity-overfitting with five repeats of 10-fold cross-validation. Brier scores were used to measure how well the model succeeded at predicting the data. The plot shows that using a small number of nearest neighbors is terrible (due to overfitting), the Minkowski distance parameter matters little for these data, and the inverse distance function performs better than rectangular. Even though this is not a diverse set of candidate values, we can probably pick out a reasonable candidate with a small Brier score, such as `r knn_reg_best`. 

The nice thing about regular grids is that you can learn much from the tuning results.
It is possible for tuning parameters to interact with one another (in the same manner as predictors in @sec-interactions). This can usually be seen when visualizing the results of a regular grid. In our KNN example, the three profiles have roughly the same relationship with the performance metric. This indicates that the impact of these parameters is additive. Understanding how a model's tuning parameters affect performance can help improve model optimization. 

```{r}
#| label: fig-knn-regular-grid-tuning
#| echo: false
#| out-width: 50%
#| fig-width: 4
#| fig-height: 3.5
#| fig-cap: "The tuning results for the regular grid shown in @fig-knn-grids."

autoplot(knn_reg_res)  +
  labs(y = "Brier Score") +
  theme(legend.position = "top")
```

The primary downside to regular grids is that, as the number of tuning parameters increases, the number of points required to fill the space becomes extremely large (due to the curve of dimensionality). However, for some models and pre-processing methods, regular grids can be very efficient despite the number of tuning parameters (see the following section that describes the "submodel trick").  

## Irregular grids {#sec-irregular-grid}

Irregular grids are not factorial in nature. A simple example is a _random grid_ where points are randomly placed using a uniform distribution. A design of size `r sfd_size` is shown in @fig-knn-grids. There are some gaps and clustering of the points, but the space is covered well. The tuning results are shown in the top panel of @fig-knn-irregular-grid-tuning. Because it is an irregular design, we can't use the same visualization as in @fig-knn-regular-grid-tuning. Instead, a "marginal" plot is shown, where each numeric tuning parameter is plotted against performance in a separate panel. Here, it is clear that using few neighbors is terrible and that the Minkowski distance parameter has little effect on the results. It is more challenging to see that there is a slight but reliable difference in the weighting function. The numerically best candidate was not too dissimilar from the regular grid: `r knn_rnd_best`.

```{r}
#| label: fig-knn-irregular-grid-tuning
#| echo: false
#| out-width: 80%
#| fig-width: 7
#| fig-height: 3.75
#| fig-cap: "The tuning results for the irregular grids shown in @fig-knn-grids."

knn_irr_grid_res %>% 
  ggplot(aes(value, mean)) + 
  geom_point(cex = 2, alpha = 2 / 3) +
  facet_grid(grid ~ parameter, scales = "free_x") +
  labs(y = "Brier Score", x = NULL)
```

For this example, the patterns for the number of neighbors do not change across values of the Minkowski distance parameter (i.e., there is no interaction). If this were not the case, the relationship between these parameters and performance would be much more difficult to understand. Examples of this will be seen in later chapters, such as in TODO and TODO.

Another type of irregular grid is a _space-filling design_ [@joseph2016space], where the goal is to make sure that the tuning parameter space is covered and that there is minimal redundancy in the candidate values. There are a variety of methods for achieving this goal. 

The Latin hypercube design (LHD) is the most popular method for constructing space-filling designs [@Viana2016; @husslage2011space]. These designs have a simple definition. If our hyperparameter space is rectangular and partitioned into smaller (hyper)cubes, a LHD is a set of distinct points. For our application, and most others, this definition is inadequate^[Other applications may want the points to have properties such as orthogonality, symmetry, etc.]. We desire candidates that fill the space and are not close to one another. 

The most basic approach to creating a LHD is using random sampling [@Mckay2000]. If there are $m$ parameters and we request $s$ candidate values, the parameter space is initially divided into $s^m$ hypercubes of equal size. For each tuning parameter, a random value is created for each of the $s$ bins in that dimension. Suppose there are five bins for a parameter that ranges between zero and one. We randomly order the bins and then create a random number in the bin range. If the first design point selects bin two, a random uniform value is created in the range `[0.2 0.4)`. This process continues for each parameter. @fig-lhs-sampled shows three such designs, each generated with different random numbers. 

```{r}
#| label: fig-lhs-sampled
#| echo: false
#| out-width: 80%
#| fig-width: 9
#| fig-height: 3
#| fig-cap: Three replicate Latin hypercube sampling designs of size five for two parameters. Each design uses different random numbers. The grid lines illustrate the 25 hypercubes used to generate the values.  

make_lhc <- function(ind, m, s) {
  des <- DiceDesign::lhsDesign(s, m, seed = sample.int(10^4, 1))$design
  colnames(des) <- paste("Parameter", letters[1:ncol(des)])
  des <- as_tibble(des)
  des$Replicate <- paste("Replicate", ind)
  des
}

set.seed(202)
map_dfr(1:3, ~ make_lhc(.x, 2, 5)) %>% 
  ggplot(aes(`Parameter a`, `Parameter b`)) + 
  geom_point(cex = 2) + 
  coord_equal() +
  scale_y_continuous(breaks = seq(0, 1, by = 1 / 5), limits = 0:1) + 
  scale_x_continuous(breaks = seq(0, 1, by = 1 / 5), limits = 0:1) + 
  theme(panel.grid.minor = element_blank()) + 
  facet_wrap(~ Replicate)
```

While the points do not overlap, each design covers the parameter space poorly. Additional constraints can be used to make the design more consistent with our desires.

```{r}
#| label: design-crit
#| include: false

rnd_maxmin <-
  encode_set(knn_random %>% select(-grid), pset = knn_prm, as_matrix = TRUE) %>% 
  DiceDesign::mindist() %>% 
  round(2)

mm_maxmin <-
  encode_set(knn_sfd %>% select(-grid), pset = knn_prm, as_matrix = TRUE) %>% 
  DiceDesign::mindist() %>% 
  round(2)

reg_maxmin <-
    encode_set(knn_reg %>% select(-grid), pset = knn_prm, as_matrix = TRUE) %>% 
    DiceDesign::mindist() %>% 
    round(2)
```

For example, we could choose points to maximize the minimum pairwise distances between the candidates. These designs are usually referred to as MaxiMin designs [@pronzato2017minimax]. Comparing the two irregular designs in @fig-knn-grids, the random grid has a maximum minimum distance value of `r rnd_maxmin`. In contrast, the corresponding space-filling design's value (`r mm_maxmin`) is `r round(mm_maxmin/rnd_maxmin, 1)`-fold larger^[Using Euclidean distance.]. The latter design was optimized for this criterion, and we can see far less redundancy in the optimized design. 

A similar method, initially proposed by @audze1977new, maximizes a function of the inverse distances between $s$ candidate points: 

$$
criterion = \sum_{i=1}^s \sum_{j=1,\;i\ne j}^s\frac{1}{dist(\theta_i, \theta_j)^2}
$$
@bates2004formulation devised search methods to find optimal designs for this criterion.

Additionally, maximum entropy sampling selects points based on assumptions related to the distributions of the tuning parameters and their covariance matrix [@shewry1987maximum;@joseph2015maximum]. 

While these methods can be constructed generally by sampling random points and using a search method to optimize a specific criterion, there has been scholarship that has pre-optimized designs for some combination of the number of tuning parameters and the requested grid size. 

The lower panel of @fig-knn-irregular-grid-tuning shows the tuning results for the Audze-Eglais design. The results are somewhat cleaner than the random grid results but would lead to the same conclusions. Here, the best candidate was nearly identical to the random grid: `r knn_sfd_best`. 

The advantage of space-filling designs over random designs is that, for smaller designs, the candidates do a better job covering the space and have a low probability of producing redundant points. Also, it is possible to create a space-filling design so that the candidates for each numerical parameter are nearly equally spaced (as was done in @fig-knn-grids). 

So far, the Latin hypercube design math assumes that all of the tuning parameter values are quantitative in nature. That’s not the case in our example. There are only two values of the weighting function. As a simple workaround, these two parameter values are repeated as if they were $s$ distinct values when making the design. This allows them to be used with a Latin hypercube design and any space-filling design that uses this approach is not technically optimal. Practically speaking, this is an effective approach for tuning models.  However, there are _sliced_ LHD that can accomplish the same goal [@qian2012sliced;@ba2015optimal].

- The distance weighting function (qualitative with values "rectangular" and "inverse"). 

We recommend space-filling designs since they are more efficient than regular designs. Regular designs have a lot of benefits when using an unfamiliar modeling methodology since you will learn a lot more about the nuances of how the tuning parameters affect one another. 

## Efficient Computations for Grid Search {#sec-efficient-grid}

The computational cost of grid search can become large, depending on the resampling strategy and the number of candidates under consideration. In our example, a total of `r format(nrow(sim_folds_rep) * sfd_size, big.mark = ",")` KNN models are evaluated before determining which candidates are most favorable to our data. 

Fortunately, none of these `r format(nrow(sim_folds_rep) * sfd_size, big.mark = ",")` models depend on one another and can be computed separately. Since almost all modern computers have multiple CPUs and GPUs, we can break the computations into different "chunks" of work and execute them simultaneously on other processors (or separate computers entirely). The parallel processing of models can significantly reduce the time it takes to tune using grid search.

when does this become more effective? 

```{r}
#| label: knn-speeds
#| include: false
knn_speedup <- round(max(knn_times$time)/min(knn_times$time), 1)
```

Despite the meager computation costs of tuning the KNN model, there was still a `r knn_speedup`-fold speedup (`r round(max(knn_times$time), 1)`s versus `r round(min(knn_times$time), 1)`s) when using `r max(knn_times$cores)` parallel workers. 
There are some nuances related to parallel processing. It is an excellent idea to parallelize the "longest loop" (literally or figuratively). 

* Parallel individual model fits or resampling. 
* data preprocessing conditional computations
* keep data on one core or shotgun approach See @tmwr [Section 13.5.2](https://www.tmwr.org/grid-search#parallel-processing)

TODO move all timing computations to a separate file for batch processing

Also, some models can exploit the "submodel trick,” where a single training model can predict many tuning parameter candidates. For example, the glmnet model (@sec-penalized-logistic-regression) can compute the model coefficients for _all_ penalty values. If we tune the penalty value, a single model fit can evaluate numerous candidate values (assuming all other tuning parameters are the same). For a regular grid, this can effectively drop a dimension of the computations. Some different models and pre-processors can have this quality, including boosted trees (@sec-boosting-cls), partial least squares (@sec-colinear-projections), principal component feature extraction (@sec-linear-feature-extraction), and others. 

Unfortunately, irregular designs cannot exploit the submodel trick mentioned in the previous section. 

## Grid Search via Racing {#sec-racing}

Summed up in @alg-race.

:::: {.columns}

::: {.column width="10%"}

:::

::: {.column width="80%"}
```pseudocode
#| label: alg-race
#| html-indent-size: "1.2em"
#| html-comment-delimiter: "//"
#| html-line-number: true
#| html-line-number-punc: ":"
#| html-no-end: false

\begin{algorithm}
\caption{Racing tuning parameter optimization}
\begin{algorithmic}
\State $D$: training set
\State $B$: number of resamples
\State Define initial number of resamples $1 \lt B_{min} \lt B$ 
\State $f()$: modeling function
\State $\Theta$: Parameter set ($s \times m$) with candidates $\theta_j$
\For{$j=1$ \To $m$}
  \State Generate $\bar{Q}_{j} =$ \Call{Resample}{$D, B_{min}, f(\cdot; \theta_j)$} corresponding to candidate $\theta_j$.
\EndFor
\State Eliminate candidates so that only $s_i$ remain. 
  \For{$k = B_{min} + 1$ \To $B$} 
    \State Generate $\bar{Q}_j^k =$ \Call{Resample}{$D, k, f(\cdot; \theta_j)$} corresponding to candidate $\theta_j$ as of resample $k$.
    \State Eliminate candidates so that only $s_k$ remain. 
  \Endfor
\State Determine $\hat{\theta}_{opt}$ that optimizes $\bar{Q}_j^k$.   
\end{algorithmic}
\end{algorithm}
```
:::

::: {.column width="10%"}

:::

::::



## Optimization Bias and Nested Resampling {#sec-nested-resampling}


## Chapter References {.unnumbered}


```{r}
#| label: teardown-cluster
#| include: false

stopCluster(cl)
```

