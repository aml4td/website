---
knitr:
  opts_chunk:
    cache.path: "../_cache/iterative/"
---

# Iterative Search {#sec-iterative-search}

```{r}
#| label: iterative-setup
#| include: false
source("../R/_common.R")

# ------------------------------------------------------------------------------

library(kableExtra)
library(tidymodels)
library(finetune)
library(patchwork)
library(future)
library(bestNormalize)
library(kableExtra)
library(GA)

# ------------------------------------------------------------------------------
# Set Options

plan("multisession")
tidymodels_prefer()
theme_set(theme_transparent())
set_options()

num_workers <- parallel::detectCores()
```

Grid search is a static procedure; we predetermine which candidates will be evaluated before beginning. How can we adaptively optimize tuning parameters in a sequential manner? Perhaps more importantly, _when_ is this a good approach? 

Previously, we’ve seen that a plateau of good performance in the parameter space is possible. This is often the case but will not always be true. If the region of optimal performance is small, we must create a large space-filling design to find it. When there are many tuning parameters, the computational expense can be unreasonable. An even worse situation is one where the previously described speed-up techniques (such as the submodel trick from @sec-submodels) are not applicable. Racing can be very efficient, but if the training set is very large, it may be that using a validation set is more appropriate than multiple resamples; in this case, racing cannot be used. Finally, there are practical considerations when the data set is very large. Most parallel processing techniques require the data to be in memory for each parallel worker, restricting their utility. 

Generally, we are not often constrained by these issues _for models used for tabular data_. However, there are a few models that might be better optimized sequentially. The first two that come to mind are large neural networks^[Sections [-@sec-cls-svm] and [-@sec-reg-svm]]. and support vector machines^[Sections [-@sec-cls-nnet] and [-@sec-reg-nnet]] (SVMs) [@scholkopf2001;@cristianini2004]. For the former, as the number of layers increases, so does the number of tuning parameters. Neural networks also have many important tuning parameters associated with the model’s training, such as the learning rate, regularization parameters, etc. These models also require more preprocessing than others; they are suspectable to the effects of uninformative predictors, missing data, and collinearity. Depending on the data set, there can be many pre-model tuning parameters. 

Support vector machines are models with fewer tuning parameters than neural networks but with similar preprocessing requirements. Unfortunately, the tuning parameter space can have large areas of poor performance with "islands" where the model works well. The location of these will change from data set to data set. We’ll see an example of this shortly where two model parameters are tuned.

These two models, in particular, are more likely to benefit from an optimization method that chooses candidates as the process evolves. 

In theory, any iterative optimization procedures can be used. In general, gradient methods, such as steepest descent or Newton’s method, are the most commonly used technique for nonlinear optimization. These tools are suboptimal when it comes to parameter tuning but play important parts in other areas of machine learning and, for this reason, they will be discussed later. 

Derivative-free techniques can be helpful for model tuning. Traditional examples are genetic algorithms, simulated annealing, particle swarm optimization, etc. We’ll consider the first two of these in Sections [-@sec-sim-anneal] and [-@sec-genetic-algo]. Currently, the most well-known iterative tool for tuning models is Bayesian optimization. This will be examined in @sec-bayes-opt. However, before this, @sec-bayes will flesh out what it means for a model to be Bayesian. 

To get started, let's revisit a data set. 

## Example: Predicting Barley Amounts using Support Vector Machines {#sec-barley-svm}

```{r}
#| label: data-import
#| include: false
source("../R/setup_chemometrics.R")
```

We’ll return to the data previously seen in @sec-barley where we want to predict the percentage of barley oil in a mixture. Recall that the predictors are extremely correlated with one another. In @sec-embeddings, we considered embedding methods like PCA to preprocess the data and these models were able to achieve RMSE values of about 6% (shown in @fig-barley-linear-bakeoff). 

In this chapter, we’ll model these data in two different scenarios. First, we’ll use them as a "toy problem" where only two tuning parameters are optimized for a support vector machine model. This is a little unrealistic, but it allows us to visualize how iterative search methods work in a 2D space. Second, in @sec-bayes-opt-nnet, we’ll get serious and optimize a larger group of parameters for neural networks simultaneously with additional parameters for a specialized preprocessing technique. 

Let's start with the toy example that uses an SVM regression model. This highly flexible nonlinear model can represent the predictor data in higher dimensions using a _kernel transformation_ [@hofmann2008]. This type of function combines numeric predictor vectors from two data points using a dot product. There are many different types of kernel functions, but for a _polynomial_ kernel, it is: 

$$
k(\boldsymbol{x}_1, \boldsymbol{x}_2) = (a\boldsymbol{x}_1'\boldsymbol{x}_2 + b)^q
$$ {#eq-kernel-poly}

where $a$ is called the scaling factor, $b$ is a constant offset value, and $q$ is the polynomial degree. The dot product of predictor vectors ($\boldsymbol{x}_i$) measures both angle and distance between points. Note that for the kernel function to work in an appropriate way, the two vectors must have elements with consistent units (i.e., they have been standardized). 

The kernel function operates much like a polynomial basis expansion; it projects a data point into a much larger, nonlinear space. The idea is that a more complex representation of the predictors might enable the model to make better predictions. 

For our toy example, we'll take the `r ncol(barley_train) - 1` predictors, project them to a reduced space of 10 principal components, and standardize those features to have the same mean and standard deviation. A quartic polynomial with zero offset is applied, and the scale parameter, $a$, will be tuned. This parameter helps define how much influence the dot product has in the polynomial expansion. 

The most commonly adjusted parameter in SVMs is the cost value, which is independent of the chosen kernel function. This parameter determines how strongly the model is penalized for incorrect predictions on the training set. A higher cost value pushes the SVM to create a more complex model. As shown earlier in @fig-two-class-overfit, small cost values result in the SVM making less effort to classify samples correctly, leading to underfitting. In contrast, extremely high cost values cause the model to overfit to the training set.

Just as in @sec-embeddings, the RMSE will be computed from a validation set and these statistics will be used to guide our efforts. 

Let's define a wide  space for our two tuning parameters: cost will vary from 2<sup>-10</sup> to 2<sup>10</sup> and the scale factor^[Why do these two parameters use different bases? It’s mostly a convention. Both parameters have valid values that can range across many orders of magnitude. The change in cost tends to occur more slowly than the scaling factor, so a smaller base of 2 is often used.] is allowed to range from 10<sup>-10</sup> to 10<sup>-0.1</sup>. 

@fig-svm-grid visualizes the RMSE across these ranges^[These are not simulated data, so this surface is an approximation of the true RMSE via the validation set using a very large regular grid. The RMSE results are estimates and would change if we used different random numbers for data splitting.] where darker colors indicate smaller RMSE values. The lower left diagonal area is a virtual "dead zone" with very large RMSE results that don't appear to change much. There is also a diagonal wedge of good performance (symbolized by the darker colors). The figure shows the location of the smallest RMSE value and a diagonal ridge of parameter combinations with nearly equal results. Any points on this line would produce good models (at least for this toy example). Note that there is a small locale of excessively large RMSE values in the upper right.  Therefore, increasing both tuning parameters to their upper limits is a bad idea.  

```{r}
#| label: svm-spec
#| include: false
rec <-
  recipe(barley ~ ., data = barley_train) %>%
  step_orderNorm(all_predictors()) %>% 
  step_pca(all_predictors(), num_comp = tune()) %>%
  step_normalize(all_predictors())

svm_spec <-
  svm_poly(cost = tune(), degree = tune(), scale_factor = tune(), margin = tune()) %>%
  set_mode("regression")

svm_wflow <- workflow(rec, svm_spec)

svm_param <-
  svm_wflow %>%
  extract_parameter_set_dials() %>%
  update(
    num_comp = num_comp(c(1, 200)),
    cost = cost(c(-10, 10)),
    degree = degree_int(c(1, 8)),
    scale_factor = scale_factor(c(-10, -1/10))
  )

reg_mtr <- metric_set(rmse)
```

```{r}
#| label: fig-svm-grid
#| echo: false
#| fig-width: 5
#| fig-height: 5
#| out-width: 50%
#| fig-cap: "A visualization of model performance when only the SVM cost and scaling factor parameters are optimized. It shows the combination with the smallest RMSE and a ridge of candidate values with nearly equivalent performance."
#| fix-alt: "Heatmap showing optimization results for SVM parameters. A dark red diagonal ridge indicates optimal performance zones where cost and scaling factors are inversely related. The brightest point marks the lowest RMSE value at high scaling factor and low cost."

load("../RData/two_param_iter_large.RData")
x_rng <- 10^extendrange(c(-10, -1/10))
y_rng <- 2^extendrange(c(-10, 10))

log10_labs <- trans_format("log10", math_format(10^.x, function(x) format(x, digits = 3)))
log2_labs <- trans_format("log2", math_format(2^.x, function(x) format(x, digits = 3)))

num_cuts <- 50
rd_or <- colorRampPalette(rev(RColorBrewer::brewer.pal(9, "OrRd")))(num_cuts)

regular_mtr %>%
  mutate(RMSE = cut(mean, breaks = seq(5, 31, length = num_cuts))) %>% 
  ggplot(aes(scale_factor, cost)) +
  geom_tile(aes(fill = RMSE)) +
  geom_point(data = regular_mtr %>% slice_min(mean), col = "grey", cex = 3) + 
  geom_line(
    data = regular_mtr %>% slice_min(mean, n = 18),
    stat = "smooth",
    col = "grey",
    method = lm,
    se = FALSE,
    formula = y ~ x,
    alpha = 1,
    linewidth = 1
  ) +
  scale_x_log10(limits = x_rng,
                labels = log10_labs,
                expand = expansion(add = c(-1 / 5, -1 / 5))) +
  scale_y_continuous(limits = y_rng, trans = "log2", labels = log2_labs,
                     expand = expansion(add = c(-1/2, -1/2))) +
  scale_fill_manual(values = rd_or) +  
  labs(x = "Scaling Factor", y = "Cost") +
  coord_fixed(ratio = 1/2) +
  theme_bw() +
  theme(legend.position = "none")
```

In the next section, we explore gradient descent optimization and explain why it may not be suitable for model tuning. Following that, we delve into two traditional global search methods—simulated annealing and genetic algorithms—and their application in parameter space exploration. We then shift our focus to Bayesian optimization, concluding with an in-depth analysis of the barley prediction problem.

## Sidebar: Gradient-Based Optimization {#sec-gradient-opt}

To formalize the concept of optimization, we need an objective function that defines what we are trying to optimize.  This function, often called a loss function (specifically to be minimized), is denoted by $\psi()$.  The parameters that modify $\psi()$ are represented by $\boldsymbol{\theta}$, a $p \times 1$ vector of real numbers.  For simplicity, we will assume that $\psi()$ is smooth and generally differentiable.  Additionally, without loss of generality, we will assume that _smaller_ values of $\psi()$ are better.

We’ll denote the first derivative ($\psi'(\boldsymbol{\theta})$), for simplicity, as $g(\boldsymbol{\theta})$ ($p\times 1$). The matrix of second deriviatives, called the Hessian matrix, is symbolized as $H(\boldsymbol{\theta})$ ($p\times  p$). 

We start with an initial guess, $\boldsymbol{\theta}_0$, and compute the gradient at this point, yielding a $p$-dimensional directional vector. To get to our next parameter value, simple gradient descent uses the update:

$$
\boldsymbol{\theta}_{i+1} = \boldsymbol{\theta}_i - \alpha\:g(\boldsymbol{\theta}_i)
$$ {#eq-gd-step}

The value $\alpha$ defines how far to move in the chosen direction. It can either be a fixed constant^[We’ve seen $\alpha$ before when it was called the learning rate (and will revisit it later in this chapter).] or adjusted using a secondary method called a line search. In a line search, $\alpha$ is incrementally increased until the objective function worsens.

We proceed to iterate this process until some measure of convergence is achieved. For example, the optimization could be halted if the objective function does not improve more than a very small value. @lu2022gradient and @zhang2019gradient are excellent introductions to gradient-based optimization that is focused on training models.

As a simple demonstration, @fig-grad-descent shows $\psi(\theta) = \theta\: cos(\theta/2)$ for values of $\theta$ between $\pm 10.0$. We want to minimize this function. There is a _global_ minimum at about $\theta \approx `r round(optimize(function(x) x * cos(.5 * x) , c(-6, 10))$minimum, 2)`$ while there are _local_ minima at $\theta = -10.0$ and $\theta \approx `r round(optimize(function(x) x * cos(.5 * x) , c(-6, 0))$minimum, 2)`$. These are false solutions where some search procedures might become trapped. 

:::: {.columns}

::: {.column width="5%"}
:::

::: {.column width="90%"}

::: {#fig-grad-descent}

::: {.figure-content}

```{shinylive-r}
#| label: fig-grad-descent
#| viewerHeight: 600
#| viewerWidth: "100%"
#| standalone: true
library(shiny)
library(bslib)
library(ggplot2)
library(dplyr)

source("https://raw.githubusercontent.com/aml4td/website/main/R/shiny-setup.R")
source("https://raw.githubusercontent.com/aml4td/website/main/R/shiny-gd.R")

app
```

:::

An example of simple gradient descent for the function $\psi(\theta) = \theta\: cos(\theta/2)$.

:::

:::

::: {.column width="5%"}
:::

:::: 

The figure enables the choice of $\theta_0$, the value of $\alpha$, and how many iterations to used. Consider a few configurations:

- Starting at $\theta = 3$, a learning rate of $\alpha = 2.0$ is inappropriate. The search initially moves towards the global minimum but then reverses course and jumps past the best value, then becomes trapped around one of the local optima. 

- If we keep $\theta = 3$ and decrease learning rate to $\alpha = 1.0$, we quickly find the best result. 

- However, if we tried decreasing the learning rate too low, say $\alpha = 0.01$, the optimization moves too slowly. 

The learning rate plays a crucial role in the optimization process. Additionally, the starting value is significant; values below 2.0 consistently fail to reach the optimum.

This gradient descent algorithm outlined above is extremely basic. There are far more complex versions, the most well-known of which is the Newton-Raphson method (a.k.a. Newton’s Method) that incorporates the second derivative matrix $H(\boldsymbol{\theta})$ in the updating formula^[However, computing the Hessian matrix increases the computational cost by about 3-fold.]. 

We often know _when_ gradient-based optimization will work well. If we know the equation for the objective function, we can determine its properties, such as whether it is a convex function, and theory can tell us if a global optimum can be found via the use of gradients. For example, squared error loss $\psi(\boldsymbol{\theta}) = (y-\hat{y})^2$, is convex when  the relationship for the predicted value $\hat{y}$ is a well-behaved function of $\boldsymbol{\theta}$ (such as in linear regression). 

However, there are additional considerations when it comes to optimizations for predictive models. First, since data are not deterministic, the loss function is not only a random variable but can be excessively noisy. This noise can have a detrimental effect on how well the optimization proceeds. 

Second, our objective function is often a performance metric, such as RMSE. However, not all metrics are mathematically well-behaved—they may lack smoothness or convexity. In the case of deep neural networks, even when the objective function is simple (e.g., squared error loss), the model equations can create a non-convex optimization landscape. As a result, the optimized parameters may correspond to a local optimum rather than a global one.

This issue arises because traditional gradient-based methods are inherently _greedy_. They optimize by moving in the direction that appears most favorable based on the current estimates of $\boldsymbol{\theta}$. While this approach is generally effective, it can lead to the optimization process becoming trapped in a local optimum, particularly with complex or non-standard objective functions.

There are additional complications when the tuning parameters, $\boldsymbol{\theta}$, are not real numbers. For instance, the number of spline terms is an integer, but the update equation might produce a fractional value for this number. Other parameters are qualitative, such as the choice of activation function in a neural network, which cannot be represented as continuous numerical values.

During model tuning, we know to avoid repredicting the training set (due to overfitting). Procedures such as resampling make the evaluation of $\psi()$ computationally expensive since multiple models should be trained. Unless we use symbolic gradient equations, the numerical process of approximating the gradient vector $g(\boldsymbol{\theta})$ can require a large number of function evaluations. 

Later, we’ll discuss *stochastic gradient descent* (SGD) [@udl2023, Chapter 6]. This method is commonly used to train complex networks with large amounts of training data. SGD approximates the gradient by using only a small subset of the data at a time. Although this introduces some variation in the direction of descent, it can be beneficial as it helps the algorithm escape from local minima. Additionally, when dealing with large datasets, computer memory may not be able to store all the data at once. In such cases, SGD is often the only viable option because it doesn't require the entire dataset to be loaded into memory and can also be much faster.

Until then, the next three chapters will describe different stochastic optimization, gradient-free  methods that are well-suited for parameter tuning since they can sidestep some of the issues described above. 

## Simulated Annealing  {#sec-sim-anneal}

```{r}
#| label: sa-example-calcs
#| echo: false
load(url("https://raw.githubusercontent.com/aml4td/website/main/RData/two_param_iter_sa.RData"))

sa_history <- 
  sa_history %>% 
  mutate(
    log_cost = signif(log2(cost), digits = 3),
    log_scale = signif(log10(scale_factor), digits = 3),
    RMSE = sprintf("%3.2f", mean)
  )

best_iters <- sa_history$.iter[sa_history$results == "new best"]
restart_iters <- sa_history$.iter[sa_history$results == "restart from best"]
  
best_initial <- 
  sa_history %>% 
  filter(.iter == 0) %>% 
  slice_min(mean)

best_overall <- 
  sa_history %>% 
  slice_min(mean)

iter_1 <- 
  sa_history %>% 
  filter(.iter == 1) 

sa_0 <- cli::format_inline("({best_initial$log_cost}, {best_initial$log_scale})")
sa_1 <- cli::format_inline("({iter_1$log_cost}, {iter_1$log_scale})")
```

Non-greedy search methods are not constrained to always proceed in the absolute best direction (as defined by the gradient). One such method is _simulated annealing_ (SA)[@spall2005introduction;@kirkpatrick1983optimization]. It is a controlled random search that moves in random directions but with some amount of control over the path. It can also incorporate restarts if the algorithm moves into clearly poor regions.

Given an initial solution, simulated annealing (SA) creates a random perturbation of the current candidate solution, typically within a small local neighborhood. The objective function is then evaluated for the new candidate and compared to the previous solution. If the new candidate results in an improvement, the process moves forward by using it to make the next step. If the new candidate is worse, there are two options: 

 - We can accept the current solution as "suboptimal" and use it as the basis for the next perturbation, or
 - we can discard the current solution and treat it as if it never occurred. The next candidate point will then be a perturbation of the last "acceptable" solution.

For our SVM example, suppose we start with a candidate where $x_0 = \left[log_2 (cost), log_{10} (scale)\right[$ was $x_0 = [-10, -0.1]$ and had an associated RMSE value of 6.10%. For the next candidate, a perturbation of this values is created, say $x_1 = [-7.11, -0.225]$. Suppose that the corresponding RMSE was measured at 5.97%. Since $x_1$ has a better performance metric it is automatically accepted and is used to create the next parameter. 

However, suppose that the RMSE value for $x_1$ was 7.00%, meaning that the new candidate did worse than the initial one.  In this case, simulated annealing generates a probability threshold for accepting the worse solution.  Typically, the probability depends on two quantities:

Simulated annealing generates a probability threshold for accepting the worse solution. Typically, the probability depends on two quantities: 

* The difference between the current and previous objective function values. If the new candidate is nearly as good as the current solution, the probability of acceptance will be higher compared to a candidate that is significantly worse.
* The probability of acceptance should decrease over time as the search progresses. This is often achieved using an exponentially decaying function, known as the "cooling schedule."

An often used equation for the probability, assuming that smaller values are better, is 

$$
Pr[accept] = \exp\Bigl[-i\bigl(\hat{Q}(\boldsymbol{\theta}_{i}) - \hat{Q}(\boldsymbol{\theta}_{i-1})\bigr)\Bigr]
$$

where $i$ is the iteration number. To compare 6.1% versus 7.0%, the acceptance probability is `r signif(exp(-(7-6.10)), 3)`. To make the determination, a random uniform number $\mathcal{U}$ is generated and, if $\mathcal{U} \le Pr[accept]$,  we accept $\boldsymbol{\theta}_{i}$ and it is used to make $\boldsymbol{\theta}_{i+1}$. Note that the probability "cools" over time; if this difference were to occur at a later iteration, say $i = 5$, the probability would drop to `r signif(exp(-5*(7-6.10)), 3)`.

One small matter is related to the scale of the objective function. The difference in the exponent is very sensitive to scale. If, for example, instead of percentages we were to use the proportions 0.61 and 0.70, the probability of acceptance would change from `r round(exp(-(7-6.10)) * 100, 1)`% to `r round(exp(-(.7-.610)) * 100, 1)`%. One way to mitigate this issue is to use a normalized difference by dividing the raw difference by the previous objective function (i.e., (0.70-0.61) / 0.70). This is the approach used in the SA analyses here.

This process continues until either a pre-defined number of iterations is reached or there is no improvement after a certain number of iterations. The best result found during the optimization process is used as the final value, as there is no formal concept of "convergence" for this method. Additionally, as mentioned earlier, a restart rule can prevent simulated annealing from getting stuck in suboptimal regions if no better results have been found within a certain timeframe. When the process is restarted, it can either continue from the best candidate found in previous iterations or start from a random point in the parameter space.

How should the candidates be perturbed from iteration to iteration? When the tuning parameters are all numeric, we can create a random distance and angle from the current values. A similar process can be used for integers by "flooring" them to the nearest whole number. For qualitative tuning parameters, a random subset of parameters is chosen to change to a different value chosen at random. The amount of change should be large enough to search the parameters space and potentially get out of a local optimum.

It is important to perform computations on the parameters in their transformed space to ensure that the full range of possible values is treated equally. For example, when working with the SVM cost parameter, we use its log (base 2) scale. When perturbing the parameter values, we make sure to adjust them in the log space rather than the original scale. This approach applies to all other search methods discussed in this chapter.

To illustrate, a very small initial space-filling design with three candidates was generated and evaluated. The results are in @tbl-svm-initial. To start the SA search^[These values will be also used as the initial substrate for Bayesian optimization.], we will start with the candidate with the smallest RMSE and proceed for 50 iterations without a rule for early stopping. A restart to the last known best results was enforced after eight suboptimal iterations. 

:::: {.columns}

::: {.column width="25%"}
:::

::: {.column width="50%"}

::: {#tbl-svm-initial}

```{r}
#| label: tbl-svm-initial
#| echo: false
sa_history %>% 
  filter(.iter == 0) %>% 
  arrange(mean) %>% 
  select(RMSE, log_cost, log_scale) %>% 
  kable(
    digits = 1,
    col.names  = c("RMSE (%)", "Cost (log-2)", "Scale (log-10)")
  ) %>% 
  kable_styling(bootstrap_options = "responsive", full_width = FALSE)

load(url("https://raw.githubusercontent.com/aml4td/website/main/RData/two_param_iter_initial.RData"))
```

The initial set of candidates used for iterative search with the toy example from @fig-svm-grid. One candidate does poorly while the other two have relatively similar results. 

:::

:::

::: {.column width="25%"}
:::

:::: 
 
@fig-sa-example contains an animation of the results of the SA search. In the figure, the initial points are represented by open circles, and a grey diagonal line shows the ridge of values that corresponds to the best RMSE results. 

:::: {.columns}

::: {.column width="15%"}
:::

::: {.column width="70%"}

::: {#fig-sa-example}

::: {.figure-content}

```{shinylive-r}
#| label: fig-sa-example
#| viewerHeight: 600
#| viewerWidth: "100%"
#| standalone: true
#| fig-alt: A two-dimensional parameter space with axes for the scale parameter and the SVM cost is shown. Three initial points are shown. The SA algorithm progresses from a point with low cost and a large value of the scale factor to meander to the ridge of optimal performance, starting several times along the way. 
library(shiny)
library(bslib)
library(ggplot2)
library(dplyr)
library(purrr)
library(scales)

source("https://raw.githubusercontent.com/aml4td/website/main/R/shiny-setup.R")
source("https://raw.githubusercontent.com/aml4td/website/main/R/shiny-sa.R")

app
```

:::

An example of how simulated annealing can investigate the tuning parameter space. The open circles represent a small initial grid. The thick diagonal grey light is a ridge where the model has the smallest RMSE. The asterisk denotes the current best candidate.

:::

:::

::: {.column width="15%"}
:::

:::: 

During the search, there were `r cli::format_inline("{length(best_iters)} iteration{?s}")` where a new global best result was discovered (iterations `r cli::format_inline("{best_iters}")`). There were also `r cli::format_inline("{length(restart_iters)} restart{?s}")`  at iterations `r cli::format_inline("{restart_iters}")`. In the end, the best results occurred with a cost value of 2<sup>`r best_overall$log_cost`</sup> and a scale factor of 10<sup>`r round(best_overall$log_scale, 2)`</sup>. The corresponding validation set RMSE was `r round(best_overall$mean, 2)`%. With this random seed, the search gets near the ridge of best performance shown in @fig-svm-grid but only lingers there for short times. It does spend a fair amount of time meandering in regions of poor performance. 

Simulated annealing has several attractive qualities. First, the process of generating new candidates works with any type of parameter, whether real, integer, or qualitative. This is not true for the other two iterative methods we’ll discuss. Additionally, the perturbation process is very fast, meaning there is minimal computational overhead to compute the next objective function value. Since we are effectively generating new candidate sets, we can also apply constraints to individual parameters or groups of parameters. For example, if a tuning parameter is restricted to odd integers, this would not pose a significant problem for simulated annealing.

There are a few downsides to this method. Compared to the other search methods, SA makes small incremental changes. If we start far away from the optimum, many iterations might be required to reach it.  One way to mitigate this issue is to do a small space-filling design and start from the best point (as we did). In fact, applying SA search after a grid search (perhaps using racing) can be a good way to verify that the grid search was effective. 

Another disadvantage is that a single candidate is processed at a time. If the training set size is not excessive, we could parallel process the multiple candidates simultaneously. We could make a batch of perturbations and pick the best value to keep or apply the probabilistic process of accepting a poor value. 

This optimization took `r prettyunits::pretty_sec((initial_time[3] + sa_time[3]) / nrow(sa_history))` per candidate to execute for these data. 

## Genetic Algorithms  {#sec-genetic-algo}

Genetic algorithms (GAs) [@Mitchell1996AnIT; @eiben2015introduction] are an optimization method that mimics the process of evolution through natural selection. While GAs are not ideally suited for parameter tuning in our case—since a standard GA search typically requires hundreds to millions of objective function evaluations—we will limit the search to a smaller scale for practical reasons. Nevertheless, genetic algorithms can often find solutions near the optimal value fairly quickly. Additionally, as previously mentioned, there is usually a region of acceptable candidates. Finally, GAs are highly unlikely to become trapped in a locally optimal solution.

Instead of search iterations, genetic algorithms are counted in _generations_. A generation is a group of candidate values that are evaluated at the same time (as a batch)^[Think of the candidates within a generation as a population of people.]. Once their corresponding performance metrics are computed, a small set of the best candidates is selected and is used to create the next generation via _reproduction_. Reproduction would entail combining a pair of "parent" candidates by swapping information^[Analogous to chromosomes.], and then random mutations can be applied. Once the next generation is created, the process continues for some pre-defined time limit or maximum number of generations. 

How, exactly, does this work? The first step is to pick a numerical representation for each candidate. Let’s consider methods for our main types of data. 

#### Real-Valued Parameters {.unnumbered}

For real numbers, there are two encoding methods: one option is to keep them as-is (i.e., floating point values) and another converts the values to a binary encoding.

When keeping the values as real numbers, we can make two children from a pair of well-performing candidates via a linear combination. For candidate vectors $\boldsymbol{\theta}_j$, we can use:

$$
\begin{align}
\boldsymbol{\theta}^{\:kid}_1 &= \alpha \boldsymbol{\theta}^{\:par}_1 + (1 - \alpha) \boldsymbol{\theta}^{\:par}_2 \notag \\
\boldsymbol{\theta}^{\:kid}_2 &= (1-\alpha) \boldsymbol{\theta}^{\:par}_1 + \alpha \boldsymbol{\theta}^{\:par}_2 \notag \\
\end{align}
$$

where $\alpha$ is a random standard uniform number. Notice that the two children's candidate values will always be in-between the values of their parents. 

For mutation, a candidate’s values are either locally perturbed or simulated with rate $\pi_m$. For example, we might mutate the log cost value by simulating a random number across the range that defines its search space. 

Binary encodings for real numbers were suggested in the early days of genetic algorithms. In this case, each candidate value is encoded as a set of binary integers. For example, consider a log<sub>2</sub> cost value of -2.34. To convert this to binary, we multiply it by 100 (assuming a limit of two decimal places) to convert it to an integer. If we use 8 binary digits (a.k.a. "bits") to represent 234, we get ``r GA::decimal2binary(234) %>% paste(collapse = "")``. If the candidates could have both positive and negative numbers, we can add an extra bit at the start that is 1 when the value is positive, yielding:  ``r GA::decimal2binary(234) %>% c(0, .) %>% paste(collapse = "")``. 

The method of _cross-over_ was often used for the reproduction of binary representations. For a single cross-over, a random location between digits was created for each candidate value, and the binary digits were swapped. For example, a representation with five bits might have parents `ABCDE` and `VWXYZ.`  If they were crossed over between the second and third elements, the children would be `ABXYZ` and `VWCDE`. There are reproduction methods that use multiple cross-over points to create a more granular sharing of information. 

There are systematic bias that can occur when crossing binary representations as described by @rana1999distributional and @Soule2009. For example, there are positional biases. For example, if the first bits (`A` and `V`) capture the sign of the value, the sign is more likely to follow the initial bits than the later bits to an offspring. 

For mutating a binary representation, each child’s bit would be flipped at a rate of $\pi_m$. 

After these reproduction and mutation, the values are decoded into real numbers. 

#### Integer Parameters {.unnumbered}

For integers, the same approach can be used as real numbers, but after the usual operations, the decimal values are coerced to integers via rounding. If a binary encoding is used, the same process can be used for integers as real numbers; they are all just bits to the encoding process. 

#### Qualitative Parameters {.unnumbered}

For qualitative tuning parameters, one (inelegant) approach is to encode them into values on the real line or as integers. For example,  for a parameter with values "red,", "blue," and "green", we could map them to bins of `[0, 1/3)`, `[1/3, 2/3)`, and `[2/3, 1]`. From here, we reproduce and mutate them as described above, then convert them back to their non-numeric categories. This is more palatable when there is a natural ordering of the values but is otherwise a workable but unfortunate approach. Mutation is simple though; at rate $\pi_m$, a value is flipped to a random selection of the possible values.

### Assembling Generations {#sec-ga-generations}

Now that we know how to generate new candidates, we can form new generations. The first step is to determine the population size. Typically, the minimum population size within a generation is 25 to 50 candidates. However, this may be infeasible depending on the computational cost of the model and the characteristics of the training set, such as its size. While fewer candidates can be used, the risk is that we may fail to sample any acceptable results. In such cases, combining the best results will only produce more mediocre candidates. Increasing the mutation rate can help mitigate this issue. For the first iteration, random sampling of the parameter space is commonly used. It is highly recommended to use a space-filling design for the initial candidate set to ensure a more comprehensive exploration. 

Finally, there is the choice of which candidates to reproduce at each generation. There are myriad techniques for selecting which candidates are used to make the next generation of candidates. The simplest is to pick two parents by randomly selecting them with probabilities that are proportional to their performance (i.e., the best candidates are chosen most often). There is also the idea of _elitism_ in selection. Depending on the size of the generation, we could retain a few of the best-performing candidates from the previous generation. The performance values of these candidates would not have to be recomputed (saving time), and their information is likely to persist in a few good candidates for the next generation.

### Two Parameter Example {#sec-2D-example}

```{r}
#| label: ga-descr
#| echo: false

load(url("https://raw.githubusercontent.com/aml4td/website/main/RData/two_param_iter_ga.RData"))

ga_history <- ga_history %>% filter(generation <= 5)
  
best_by_gen <- 
  ga_history %>% 
  slice_min(fitness, by = c(generation)) %>% 
  distinct(fitness, generation)

is_same_as_gen_1 <- best_by_gen$fitness == best_by_gen$fitness[1]
same_as_gen_1 <- sum(is_same_as_gen_1) - 1

other_best <- round(unique(best_by_gen$fitness[!is_same_as_gen_1]), 3)
other_best <- paste0(other_best, "%")
```

To illustrate genetic algorithms in two dimensions, a population size of 8 was used for 7 generations. These values are _not_ optimal defaults but were selected to align with the previous SA search and the optimization method discussed in the next section. The two tuning parameters were kept as floating-point values. Parental selection was based on sampling weights proportional to the RMSE values (with smaller values being better). The mutation rate was set at 10%, and elitism was applied by retaining the best candidate from each generation. All computations within a generation were performed in parallel. On average, the optimization took `r prettyunits::pretty_sec(ga_time[3] / nrow(ga_history))` per candidate.  @fig-ga-example illustrates the results of the search.   

:::: {.columns}

::: {.column width="15%"}
:::

::: {.column width="70%"}

::: {#fig-ga-example}

::: {.figure-content}

```{shinylive-r}
#| label: fig-ga-example
#| viewerHeight: 600
#| viewerWidth: "100%"
#| standalone: true
#| fig-alt: A two-dimensional parameter space with axes for the scale parameter and the SVM cost is shown. Eight initial points are shown, one near the ridge of best results. As generations increase, new generations are gathered around the ridge. 
library(shiny)
library(bslib)
library(ggplot2)
library(dplyr)
library(purrr)
library(scales)

source("https://raw.githubusercontent.com/aml4td/website/main/R/shiny-setup.R")
source("https://raw.githubusercontent.com/aml4td/website/main/R/shiny-ga.R")

app
```

:::

Several generations of a genetic algorithm that search tuning parameter space. The thick diagonal grey light is a ridge where the model has the smallest RMSE. The asterisk denotes the current best candidate.

:::

:::

::: {.column width="15%"}
:::

:::: 

A space-filling design was used to ensure that the initial population was diverse. Fortuitously, one design point was very close to the ridge, with an RMSE of `r round(best_by_gen$fitness[1], 2)`%.  After this, there `r cli::format_inline("{?was/were} {length(other_best)} generations with better candidate{?s}")` (with almost identical performance): `r cli::format_inline("{other_best}")`. We can see that, after three generations, the search is concentrated around the ridge of optimal performance. In later generations, some candidates have outliers in one dimension; this is the effect of mutation during reproduction. 

### Summary {#sec-ga-summary}

This small toy example is not ideal for demonstrating genetic algorithms. The example’s low parameter dimensionality and the relatively low computational cost per candidate might give the impression that genetic algorithms are a universal solution to optimization problems. While genetic algorithms are versatile and powerful tools for global optimization, they come with limitations. Like simulated annealing, they have minimal overhead between generations, but in most real-world applications, there are more than just two parameters. This typically means that larger populations and more generations are needed. If the dataset is not excessively large, parallel processing can help manage the increased computational demands.^[If you have access to high-performance computing infrastructure,  the parallel processing can run the individuals in the population in parallel and, within these, any resampling iterations can also be parallelized.]. 

Now we'll take a look at what makes a Bayesian model Bayesian.

## Sidebar: Bayesian Models {#sec-bayes}

We've superficially described an application of Bayesian analysis in @sec-effect-encodings. Before discussing Bayesian optimization, we should give a general description of Bayesian analysis, especially since it will appear again several times after this chapter. 

Many models make probabilistic assumptions about their data or parameters. For example, a linear regression model has the form

$$
y_i = \beta_0 + \beta_1x_1 + \cdots + \beta_px_p + \epsilon_i
$$

Using ordinary least squares estimation, we can make assumptions regarding the model errors ($\epsilon_i$). We can assume that the residuals are independent of one another and follow a Gaussian distribution with zero mean and a constant standard deviation. From there, it follows that the regression parameters ($\beta$ coefficients) also follow Gaussian distributions. 

Based on these assumptions, our objective function is the Gaussian likelihood function, generally denoted as $\ell(z|\theta)$, although we often maximize the log of this value. We fix the outcome and predictor data and try to find values of $\sigma$ and the $\beta$  parameters that maximize the objective function (log $\ell(z|\theta)$). This process is maximum likelihood estimation. 

::: {.important-box}
One important point is that each model parameter is treated as a single value. Our maximum likelihood estimate (MLE) is a point estimate and, based on our assumptions about the residuals, we know the distribution of the MLEs. 
:::

The consequence of this is that we cannot make inferences about the true, unknown model parameters since they are considered to be single points. Instead, our inference focuses on the MLEs. This leads to the circuitous explanation of hypothesis tests and confidence intervals. For example, the explaination of a 90% confidence interval is:

> "We believe that if we were to repeat this experiment a large number of times, the true parameter value would fall between $L$ and $U$ 90% of the time." 

A Bayesian approach takes a different perspective on probability assumptions. It assumes that the unknown parameters are drawn from a prior distribution that represents our beliefs or knowledge about them before observing the data. We denote this prior distribution as $\pi(\theta)$. The term "prior" is crucial because the modeler should define this distribution before seeing the observed data.

For example, consider our model for the time to deliver food in @eq-log-linear. A reasonable prior for the regression parameter associated with distance would have a distribution that assigns zero probability to negative values, since we would never expect (log) delivery times to decrease with distance. If we worked at the restaurant, we could be more specific based on our experience. We might believe that, all other factors being equal, each additional mile from the restaurant doubles the delivery time. Using this assumption, we could define a probability distribution that reflects this belief.

Once we have our prior distributions for our parameters and assumptions regarding our data distributions, we can write down the equations required to estimate our results. Bayes' Rule is a basic probability statement that combines the prior distribution with our likelihood function: 

$$
\pi(\theta|x) = \frac{\pi(\theta) \ell(x|\theta)} {\pi(x)}
$$ {#eq-bayes-rule-distr}

$\pi(\theta|x)$ is the posterior distribution: the probability distribution of our parameters, given the observed data. This is the endpoint for any Bayesian analysis. 

Another important point is that Bayesian estimation has a much more difficult goal than maximum likelihood estimation.  The latter needs to find point estimates of its parameters while Bayesian estimation has to estimate the entire posterior distribution $\pi(\theta|x)$. In a moment, we’ll look at a simple problem with a simple solution. However, in most other cases, the computational requirements for Bayesian estimation are considerably higher. That's the bad news.

The good news is that, once we find the posterior distribution, it is incredibly useful. First, we can make direct statements about parameter values. Unlike confidence intervals, Bayesian methods allow us to say things like 

> "We believe that there is a 90% probability that the true value of the parameter is between $L$ and $U$." 

It also lets us easily make similar statements regarding more complex combinations of parameters (such as ratios, etc).

Finally, we should mention the effect of the prior on the computations. It does pull the likelihood $\ell(x|\theta)$ towards it. For example, suppose that for @eq-log-linear we used a highly restrictive prior for $\beta_1$ that was a uniform distribution between [0.7, 0.9]. In that case, the posterior would be confined to this range^[We’ll see how the prior can affect some calculations later in @sec-naive-bayes. ]. That said, the effect of the prior on the posterior _decreases_ as our training set size _increases_. We saw this in @sec-effect-encodings where two travel agents were contrasted; one with many reservations in the data and another with very few. 

To illustrate, let’s look at a very simple example. 

### A Single Proportion  {#sec-single-proportion}

```{r}
#| label: include-forested
#| include: false
load("../RData/forested_data.RData")

beta_bin_estimate <- function(num_events, total, alpha = 1, beta = 1) {
  (num_events + alpha) / (alpha + beta + total) * 100
}

alpha <- 5
beta <- 3

n_y_small <- 2
n_tr_small <- 3

n_y <- sum(forested_train$class == "Yes")
n_tr <- nrow(forested_train)
p_mle <- mean(forested_train$class == "Yes") * 100

alpha_post <- alpha + n_y
beta_post <- n_tr - n_y + beta
```

For the forestry data discussed earlier in @sec-spatial-resampling, the outcome is categorical, with the values "yes" and "no" representing the question "Is this location forested?" We can use the training dataset to estimate the probability ($\pi$) of the event occurring. The simplest estimate is the sample proportion, which is calculated by dividing the number of occurrences of the event (e.g., "yes" responses) by the total number of data points. This gives the estimate $\hat{\pi}$ = `r round(p_mle, 3)`%). 

To estimate this rate using maximum likelihood estimation, we might assume that the data follow a binomial distribution with theoretical probability $\pi$. From there we can solve equations that find a value of $\pi$ that correspond to the largest likelihood. It turns out that the sample proportion is also the maximum likelihood estimate. 

Instead of treating the unknown parameter as a single value, Bayesian methods propose that the parameter comes from a _distribution_ of possible values. This distribution reflects our prior understanding or belief about the parameter based on what we know of the situation. For this reason, it is called a _prior_ distribution. If we think that locations in Washington state are very likely to be forested, we would choose a distribution that has more area for higher probabilities. 

For a binomial model, an example of a prior is the Beta distribution. The Beta distribution is very flexable and has values range between zero and one. It is indexed by two parameters: $\alpha$ and $\beta$. @fig-beta-dist shows different versions of the Beta distribution for different values.  

To settle on a specific prior, we would posit different questions such as:

- "Are there rate values that we would _never_ believe possible?"
- "What is the most likely value that we would expect and how certain are we of that?" 
- "Do we think that the distribution of possible values is symmetric?"

and so on.

From these answers, we would experiment with different values of $\alpha$ and $\beta$ until we find a combination that encapsulates what we believe. If we think that larger probabilities of forestation are more likely, we might choose a Beta prior that has values of $\alpha$ that are larger than $\beta$, which places more mass on larger values (as seen below). This is an example of an _informative prior_, albeit a weak one. As our prior distribution is more peaked it reflects that, before seeing any data, we have strong beliefs. If we honestly have no idea, we could choose a uniform distribution between zero and one using $\alpha = \beta = 1$.  

```{r}
#| label: fig-beta-dist
#| echo: false
#| out-width: 70%
#| fig-width: 6
#| fig-height: 3
#| fig-cap: Examples of the Beta distribution for different values of $\alpha$ and $\beta$.
#| fix-alt: "Three panel plot showing Beta distributions with varying parameters. Left panel (beta=1): curves showing increasing probability density as alpha increases from 1 to 5, with steeper growth near probability=1. Center panel (beta=3): several curves peaking at different points with means near 0.5. Right panel (beta=5): curves skewed left, with peaks shifting leftward as alpha increases. X-axis shows probability of forestation from 0 to 1, Y-axis shows probability density."

crossing(
  value = seq(0, 1, length.out = 100),
  alpha = c(1, 3, 5),
  beta = c(1, 3, 5)
) %>% 
  mutate(
    density = dbeta(value, alpha, beta),
    alpha = format(alpha)) %>% 
  ggplot(aes(value, density, col = alpha)) + 
  geom_line() +
  facet_wrap(~beta, labeller = label_both) +
  labs(x = "Probability of Forestation") +
  scale_colour_viridis_d(option = "viridis")
```

We'll use values of $\alpha = 5$ and $\beta = 3$. If the training set has $n_{tr}$ points and $n_+$ of them are known to be forested, the ordinary sample proportion estimate is $\hat{p} = n_+ / n_{tr}$. In a Bayesian analysis, the final estimate is a function of both the prior distribution and our observed data. For a Beta prior, the Bayesian estimate is 

$$
\hat{p}_{BB} = \frac{n_+ +\alpha}{n_{tr} + \alpha + \beta}
$$ {#eq-beta-bin-mean}

If, before seeing the data, we had chosen $\alpha = 5$ and $\beta = 1$, we estimate that $\hat{p}_{BB} = `r round(beta_bin_estimate(n_y, n_tr, 5, 1), 3)`$%. This is pretty close to our simple estimate because there is so much data in the training set ($n_{tr}$ = `r format(n_tr, big.mark = ",")`) that the influence of the prior is severely diminished. As a counter-example, suppose we took a very small sample that resulted in $n_y$ = 1 and $n_{tr}$ = 3, the prior would pull the estimate from the MLE of 33.3% to `r round(beta_bin_estimate(1, 3, 5, 3), 1)`%. 

Now suppose that for regulatory purposes, we were required to produce an interval estimate for our parameter. From these data and our prior, we could say that the true probability of forestation has a 90% chance of being between `r round(qbeta(0.05, alpha_post, beta_post)*100, 1)`% and `r round(qbeta(0.95, alpha_post, beta_post)*100, 1)`%. 

We did mention that it can be very difficult to compute the posterior distribution. We deliberately chose the Beta distribution because, if we assume a binomial distribution for our data and a $Beta(\alpha, \beta)$ prior, the posterior is  $Beta(\alpha + n_y, n_{tr} - n_y + \beta)$. More often than not, we will not have a simple analytical solution for the posterior. That said, we’ll see this happen again in @sec-gp.

For a Bayesian model, the predictions also have a posterior _distribution_, reflecting the probability of a wide range of values. As with non-Bayesian models, we often summarize the posterior using the most likely value (perhaps using the mean or mode of the distribution). We can also measure the uncertainty in the prediction using the estimated standard deviation. 

::: {.note-box}
To summarize: 

 - Bayesian models require a prior distribution for all of our model parameters. 
 - The prior and observed data are combined into a posterior distribution.
 - Different statistics can be estimated from the posterior, including individual predictions.  
:::

We’ll encounter even more Bayesian methods in subsequent chapters. In @sec-cls-metrics, we'll describe the process of developing a prior for muticlass problem based on Wordle scores.

Now that we know more about Bayesian statistics, let's see how they can be used to tune models.

## Bayesian Optimization {#sec-bayes-opt}

Bayesian optimization (BO) is a search procedure that uses an overarching statistical model to predict the next set of candidate values based on past performance. It is currently the most used iterative search routine for optimizing models. The technique originated with @movckus1975bayesian and was further developed by @jones1998efficient. It is often tied to a particular Bayesian predictive model: the Gaussian process (GP) regression model [@binois2022survey]. 

Bayesian optimization and Gaussian proceses have been vibrant research areas and our discussions will scratch the surface. More recent surveys, @gramacy2020surrogates and @garnett2023, are comprehensive resources for these methodologies.

However, before diving into the details of Gaussian proceseses, we should discuss how any Bayesian method can be used for optimization. Similar to the racing model from @eq-perf-mod-racing, the Bayesian model's outcome will be our estimated performance statistics (i.e., $\hat{Q}$). The predictors for this model will be the tuning parameter values:

$$
Q_j = f(\boldsymbol{\theta}_j)+ \epsilon_{j}
$$ {#eq-surrogate}

where $j$ is the iteration number, $f(\cdot)$ is a _surrogate model_, and $\epsilon$ is an error term. For the barley data, we’ve used RMSE as our primary metric. Using a Bayesian model for $f(\cdot)$ enables us to predict what we expected the RMSE to be for different candidate points. 

```{r}
#| label: fig-two-candidates-dist
#| include: false

set.seed(28383)
num_points <- 5000
two_cand_data <- 
  tibble(RMSE = c(rnorm(num_points, 5.75, 1/4), rnorm(num_points, 5.5, 3/4)),
         `Candidate:` = rep(paste("#", 1:2), each = num_points))

two_cand_probs <- 
  two_cand_data %>% 
  mutate(group = `Candidate:`) %>% 
  summarize(prob = round(mean(RMSE >= 6) * 100, 0), .by = c(group))
```

Since the product of a Bayesian model is a posterior (predictive) distribution, we can obtain the distribution of the performance metric for a potential new candidate. We often summarize this predictive distribution with the mean and standard deviation. @fig-two-candidates shows two hypothetical candidates and their respective predictive distributions. The first candidate has a slightly better predicted RMSE (on average). The area under the distribution curve to the right of the vertical line reflects the probability of being worse than the current solution which, for this candidate, is `r two_cand_probs$prob[two_cand_probs$group == "# 1"]`%.

```{r}
#| label: fig-two-candidates
#| echo: false
#| out-width: 55%
#| fig-width: 6
#| fig-height: 4
#| fig-cap: An example of a choice between two candidates where performance is gauged by RMSE. One candidate has slightly better predicted mean performance and another where the mean RMSE is predicted to be much lower but with high uncertainty. 
#| fix-alt: Line graph comparing two candidates' performance distributions across RMSE values (ranging from 3 to 9). Candidate 1 shows a wider, flatter curve centered around RMSE of 5.75, while Candidate 2 displays a narrow, tall peak at an RMSE of 5.5. A vertical dashed line marks the 'Current best' position at an RMSE of 6.0.

two_cand_data %>% 
  ggplot(aes(RMSE, col = `Candidate:`)) + 
  geom_line(stat = "density", adjust = 1.5, trim = TRUE, linewidth = 1) +
  geom_vline(mapping = aes(xintercept = 6), lty = 2) +
  theme(legend.position = "top") +
  annotate("text", x = 6.5, y = 1.25, label = "Current\nbest") + 
  labs(y = "Posterior Density")
```

The second candidate has a mean RMSE that is predicted to have about a 2-fold improvement over the first but also has considerably large uncertainty. On average, this is a better choice but there is more area to the right of the vertical line. The probability of the second candidate having worse results than the current best is `r two_cand_probs$prob[two_cand_probs$group == "# 2"]`%. 

Which choice is better? The first is a safer bet and the second offers higher risk with a higher reward. Which candidate to pick is often driven by our point of view. However, we should definitely consider _why_ the variance is so large for the second candidate. 

We’ve previously discussed the variance-bias tradeoff and demonstrated that large uncertainty in the performance metric can often be explained by _model variance_. Recall that models might vary due to predictive instability caused by a model that is far more complex than is required, such as the polynomial example in @sec-variance-bias. 

There is another reason that the noise in our performance statistic can be large. During tuning, we are focused on exploring the overall parameter space and, as such, we can view this process from a spatial sampling point of view. Back in @sec-spatial-splitting, we described _spatial autocorrelation_, where objects are more similar to closer objects than to objects further away. If our Bayesian model reflects spatial variability, the increased uncertainty can be attributed to how each candidate relates spatially to the existing set. If our model's variance in @fig-two-candidates is based on spatial effects, it implies that the first candidate is closer to the current sample of tuning parameter candidates. Conversely, the large uncertainty for the second candidate suggests that it is placed far away from  existing results. 

This example demonstrates different philosophies for a search: _exploitation_ and _extrapolation_. 

- Exploitation expresses that we would rather keep the search near existing data and capitalize on their results to find a solution closer to the things that we know about. 

- Extrapolation is the notion that we should more aggressively explore new spaces to find novel candidates to improve the model. 

Using a Bayesian model in @eq-surrogate is advantageous because it can make mean and variance predictions and these two concepts can be weighted differently for potential new candidates.  Let’s assume that our surrogate Bayesian model does significantly account for spatial effects. The next section describes the overall process of how we use it to optimize the model. 

### How Does Bayesian Optimization Work? {#sec-acquisition}

The search routine starts with a set of $s_0$ initial candidates and corresponding performance statistics ($\hat{Q}_j$). Using these data, the metric is used as the model outcome and the candidate values as predictors. This surrogate model is used to make predictions of the mean and standard deviation of the metric at new candidate values. A new objective function, called an _acquisition function_, combines the mean and standard into a single value [@garnett2023, Chapter 7]. The next candidate that we'll evaluate on the next iteration is the one that optimizes the acquisition function (and then repeat this process). 

One of the most well-known acquisition function is based on the notion of **expected improvement** [@jones1998efficient, Section 4]. If the current best metric value is denoted as $\hat{Q}_{opt}$, the expected impriovement is the positive part of $\delta(\hat{\boldsymbol{\theta}}) = Q_{opt} - \mu(\hat{\boldsymbol{\theta}})$, where $\mu(\hat{\boldsymbol{\theta}})$ is the mean of the posterior prediction (assuming that smaller metrics are better). REFERNCE found that, probabilisticly, the expected improvement is 

$$
EI(\hat{\boldsymbol{\theta}}; Q_{opt}) = \delta(\hat{\boldsymbol{\theta}}) \Phi\left(\frac{\delta(\hat{\boldsymbol{\theta}})}{\sigma(\hat{\boldsymbol{\theta}})}\right) + \sigma(\hat{\boldsymbol{\theta}}) \phi\left(\frac{\delta(\hat{\boldsymbol{\theta}})}{\sigma(\hat{\boldsymbol{\theta}})}\right)
$$ {#eq-exp-improve}

where $\Phi(\cdot)$ is the cumulative standard normal and $\phi(\cdot)$ is the standard normal density.

Expected improvement is a blend of both mean and variance but, at different stages of the optimization, one may dominate. Imagine a parameter space where most of the regions have been sampled to some degree. If our Bayesian model is driven by spatial variation, most of the remaining space has relatively small values for $\sigma$ and one of the terms in @eq-exp-improve will drive the optimization. Conversely, at the initial iterations, the variance will be very large and, unless there is a large mean prediction effect, the spatial variance will dominate (and the focus is more on extrapolation). 

Additionally, the expected improvement can be altered to include a tradeoff factor $\xi$ so that improvement is the positive part of 

$$
\delta(\hat{\boldsymbol{\theta}}) = Q_{opt} - \mu(\hat{\boldsymbol{\theta}}) + \xi
$$

This effectively inflates the value of the current best and resulting value of $\delta(\hat{\boldsymbol{\theta}})$ helps emphasize extrapolation. $\xi$ could be a single constant or a function that changes the tradeoff value as a function of iterations. 

As with simulated annealing, we can keep sampling until a pre-specified limit on iterations or computational time is reached. An early stopping rule can be helpful where we prematurely end the search if a new best result is not found within a specific number of iterations. 

Let's see how this approach works in a single dimension. @fig-bo-example shows how expected improvement can be used to find the global minimum of $\psi(\theta) = \theta\: cos(\theta/2)$. Th light grey line in the lower panel represents the true value of $\psi(\theta)$ across the parameter space. The process starts with $s_0 = 2$ candidate points at -8.0 and 3.0. From these two points, the surrogate model is fit and the dark line in the lower panel shows the predicted objective function values across the space. The magnitude of the line represents the mean of the posterior. Notice that the predicted line fails to capture the true trend, which is not unexpected with two data points. 

If we were to optimize solely on the mean prediction, we would choose our next point to be close to $\theta = 3$ since that has the lowest predicted value. This is a pure exploitation approach. 

The color of the line depicts the predicted variance, which drops to zero near the existing points and explodes in the regions in between our two points. If we were to exclusively focus on the variance of the objective function, we would choose the next point to be away from the two that have been sampled so far, such as the interval $-6 \le \theta \le 1$ or $\theta \ge 4$.

Combining the mean and variance predictions via expected improvement, we can achieve a balance. At the first iteration, two areas around (but not at) $\theta = 3.0$ are predicted to have large expected improvements. The region on the left is sampled and, once $\psi(\theta = 3)$ is evaluated, the next point is closer to the true global optimum. The process continues and alternates between sampling near the best result and filling in regions where there are no nearby candidate values. After 15 iterations, the search is very close to the true global optimum. 

::: {#fig-bayes-opt}

::: {.figure-content}

```{shinylive-r}
#| label: fig-bayes-opt
#| viewerHeight: 600
#| viewerWidth: "100%"
#| standalone: true
#| fig-alt: A single curve is shown with alternating peaks and valleys. The x-axis is the parameter, and the y-axis shows the objective function. Above this is another curve where the y-axis is expected improvement. As the optimization proceeds, the top curve shows several peaks of expected improvement, and the candidate points begin to cluster around the global minimum. 
library(shiny)
library(bslib)
library(ggplot2)
library(patchwork)
library(dplyr)

load(url("https://raw.githubusercontent.com/aml4td/website/main/RData/bayesian_opt_1d.RData"))

light_bg <- "#fcfefe" # from aml4td.scss
grid_theme <- bs_theme(
  bg = light_bg, fg = "#595959"
)

theme_light_bl<- function(...) {
  
  ret <- ggplot2::theme_bw(...)
  
  col_rect <- ggplot2::element_rect(fill = light_bg, colour = light_bg)
  ret$panel.background  <- col_rect
  ret$plot.background   <- col_rect
  ret$legend.background <- col_rect
  ret$legend.key        <- col_rect
  
  ret$legend.position <- "top"
  
  ret
}

ui <- page_fillable(
  theme = bs_theme(bg = "#fcfefe", fg = "#595959"),
  sliderInput(
    "iteration",
    label = "Iterations",
    min = 1L,
    max = 15L,
    step = 1L,
    value = 1L,
    width = "100%"
  ),
  as_fill_carrier(plotOutput("iterations"))
)

server <- function(input, output) {
  
  y_rng <- extendrange(true_curve$y)
  p_base <- 
    ggplot(true_curve, aes(x = x)) +
    geom_line(aes(y = y), alpha = 1 / 10, linewidth = 1) +
    labs(x = "Parameter", y = "Objective Function") +
    lims(y = y_rng) +
    theme_bw()
  
  output$iterations <-
    renderPlot({
      
      plot_data <- obs_dat[obs_dat$iteration < input$iteration, ]
      next_data <- obs_dat[obs_dat$iteration == input$iteration, ]
      plot_curve <- gp_pred[[input$iteration]]
      plot_curve$`Std Dev` <- plot_curve$.sd
      
      p <- 
        p_base +
        geom_line(data = plot_curve, aes(y = .mean, col = `Std Dev`), 
                  alpha = 1, linewidth = 1.2) +
        geom_point(data = plot_data, aes(y = y), cex = 2) +
        geom_vline(xintercept = next_data$x, col = "red", lty = 2) +
        scale_colour_viridis_c(option = "mako", direction = -1) +
        theme(
          plot.margin = margin(t = 0.0, r = 5.5, b = 5.5, l = 5.5, unit = "pt")
        )
      
      p_ei <- 
        ggplot(plot_curve, aes(x = x, y = objective)) + 
        geom_line() +
        geom_vline(xintercept = next_data$x, col = "red", lty = 2) + 
        lims(y = 0:1) + 
        labs(y = "Expected Imp.", x = NULL) + 
        theme_bw() +
        theme(
          axis.text.x = element_blank(), axis.ticks.x = element_blank(),
          plot.margin = margin(t = 5.5, r = 5.5, b = 0.0, l = 5.5, unit = "pt")
        ) 
      
      print((p_ei / p) + plot_layout(heights = c(2, 3)))
      
    }, res = 100)
}

app <- shinyApp(ui, server)
app
```

:::

An example of Bayesian optimization for the function $\psi(\theta) = \theta\: cos(\theta/2)$. The top plot shows the expected improvement for the current iteration. The bottom panel shows the true curve in grey and the mean prediction line (colored by the predicted standard deviation). The vertical line indicates the location of the next candidate. 

:::

Numerous other acquisition functions can be used.  For example, instead of expected improvement, can maximize the probability of improvement:

$$
PI(\hat{\boldsymbol{\theta}}) = \Phi\left(\frac{\tau - \mu(\hat{\boldsymbol{\theta}})}{\sigma(\hat{\boldsymbol{\theta}})}\right) 
$$

where $\tau$ is some performance metric goal (e.g., an _R_<sup>2</sup> of 80%). This is generally deprecated in favor of EI for a few reasons. Most importantly, PI does not directly incorporate the current best value. Additionally, the value of $\tau$ is arbitrary and the search can be inconsistent across values of $\tau$ [@jones2001taxonomy].

Another acquisition function is based on confidence bounds [@cox1992statistical]. For minimizing the performance statistic, the lower bound would be computed:
 
$$
CB(\hat{\boldsymbol{\theta}}) = \mu(\hat{\boldsymbol{\theta}}) - \kappa\: \sigma(\hat{\boldsymbol{\theta}})
$$

where $\kappa$ sets the confidence level and often has values that are _much_ smaller than range used for statistical inference (e.g., centered around 1.64). This multiplier also modulates between extrapolation (large $\kappa$) and exploitation (small $\kappa$) for the search. 

Apart from different acquisition functions, many other variations can be used in Bayesian optimization. For example, like simulated annealing, the default is the sample one candidate at a time. This limits the computational efficiency of the search process if we can fit models in parallel. There are alterations where multiple candidates can be _simulated_. The candidate with the largest predicted acquisition value is identified, and its predicted performance statistic is treated as if it were estimated from an assessment set. A new GP is created with this imputed data point, and a new point is acquired. This process repeats until the desired number of new candidates is available. These new candidates are then trained and assessed. See @azimi2010batch.

Alternatively, we can consider the most advantageous regions of the parameter space and sample several dissimilar points. These candidates can be evaluated in batches instead of one at a time. 

Now that the general optimization process has been outlined, let's focus on the most popular model associated with Bayesian optimization. 

### Gaussian Process Models {#sec-gp}

GPs [@williams2006gaussian;@garnett2023] are often motivated as special cases of stochastic processes, which are the collection of random variables that are indexed by one or more variables. The most common example of a stochastic process is the stock market. A stock price is a random variable that is indexed by time. A Gaussian process is just a stochastic process whose data are assumed to be multivariate normal. 

Gaussian processes are different from basic multivariable normal distributions. Let's say that we collected the heights and weights of 100 students in a specific grade. If we collect the heights and weights into a two-dimensional vector $\boldsymbol{x} = [height, weight]$, we might assume that the data is multivariate normal, with a 2D population mean _vector_ and a 2 $\times$ 2 covariance matrix, i.e., $\boldsymbol{x} \sim N(\boldsymbol{\mu}, \Sigma)$. In this case, the data are a sample of people at a static time point. 

However, a Gaussian process is a **sequence of data** so we have to specify their means and covariances dynamically; there are mean and covariance _functions_ instead of vectors and matrices. The mean function is often denoted as  $\mu(\boldsymbol{x})$. One way of writing the covariance function is $\Sigma(\boldsymbol{x}, \boldsymbol{x}') = k(\boldsymbol{x}, \boldsymbol{x}') + \sigma^2_{\epsilon}I$ where $k(\cdot, \cdot)$ is a **kernel function** and $\sigma_{\epsilon}$ is akin to a constant error term.

We've seen kernels before, back in @eq-kernel-poly when they were associated with support vector machine models. For Gaussian processes, the kernel will define the variance between two data points in the process. Some kernels can be written as a function of the difference $\delta_{ii'} = ||\boldsymbol{x} - \boldsymbol{x}'||$. A common fuction is the squared exponential:

$$
k(\boldsymbol{x}, \boldsymbol{x}') = \exp\left(-\sigma d_{ii'}^2 \right)
$$ {#eq-kernel-sq-expo}

Note that this covariance function has it's own parameter $\sigma$, similar to $a$, $b$, and $q$ in @eq-kernel-poly (that is unrelated to $\sigma_{\epsilon}$).

The squared exponential function shows that as the two vectors become more different from one another (i.e., further away), the exponentiated difference becomes large, indicating high variance (apart from $\sigma^2_{\epsilon}$). For two identical vectors, this covaraince function yeilds a variance of $\sigma^2_{\epsilon}$. Now, we can see why the previous section had a strong emphasis on spatial variability for Bayesian optimization. @fig-bayes-opt used this kernel function. 

A more general covariance function uses the Matern kernel: 

$$
k_{\nu }(\delta_{ii'})=
{\frac {2^{1-\nu }}{\Gamma (\nu )}}{\Bigg (}{\sqrt {2\nu }}{\frac {\delta_{ii'}}{\rho }}{\Bigg )}^{\nu }\mathcal{K}_{\nu }{\Bigg (}{\sqrt {2\nu }}{\frac {\delta_{ii'}}{\rho }}{\Bigg )}
$$ {#eq-kernel-matern}

where $\mathcal{K}(\cdot)$ is the Bessel function, $\Gamma(\cdot)$ is the Gamma function, and $\rho$ and $\nu$ are tuning paramters. 

So far, our covariance functions have assumed that the tuning parameters are all numeric. One fairly common but unsophisticated method to use qualitative data in the Gaussian process is to convert them to binary indicators and treat them as generic numeric predictors. However, it is difficult to believe that the indicators follow a Gaussian distribution. Also, if there are many levels of qualitative tuning parameters, we may quickly expand the dimension of the Gaussian space, exacerbating the computational costs of training the model. 

Alternatively, special "categorical kernels" take integers corresponding to levels of a categorical predictor as inputs. For example, one based on an exchangeable correlation structure is: 

$$
k(x, x') = \rho I(x \ne x') + I(x = x')
$$ {#eq-kernel-categorical}

where $\rho < 1$ [@joseph2007functionally]. More extensive discussions if models with _mixed types_ can be found in @qian2008bayesian, @zhou2011simple, and @saves2023mixed.

Multiple kernels can be used to accommodate a pipeline with both quantitative and qualitative tuning parameters. Depending on the situation, an overall kernel can be created via addition or multiplication. 

@genton2001classes, Part II of @cristianini2004, and Chapter 4 of @garnett2023 contain overviews of kernel functions, their different classes, and how they can be used and combined for data analysis.

How does this relate to iterative tuning parameter optimization? Suppose that our multivariate random variable is the concatenation of an outcome variable and one or more predictors, our vector of random variable could be thought of as $\boldsymbol{d} = [y, x_1, ..., x_p]$. In a model, we'd like to predict the value of $y$ is for a specific set of $x$ values. Mathematically, this is $Pr[y | \boldsymbol{x}]$ and, since this collection of data is multivariate normal, there are some nice linear algebra equations that can be used to compute this. This ties into Bayesian analysis since we can write @eq-bayes-rule-distr in terms of probabilities: 

$$
Pr[y | \boldsymbol{x}] = \frac{Pr[y] Pr[\boldsymbol{x} | y]}{Pr[\boldsymbol{x}]} = \frac{(prior)\times (likelihood)}{(evidence)}
$$ {#eq-bayes-rule}

The GP model is Bayesian because we have specified the distributions for the outcome and predictors ($Pr[y]$ and $Pr[\boldsymbol{x}]$, respectively) simultaneous way. The kernel function is the primary driver of the prior distribution of Gaussian processes. 

_In theory_, each of these is easy to compute with a simple multivariate normal. However, we don't the value of $\sigma^2_{\epsilon}$ nor do we know the values of any kernel parameters used by $k(\cdot,\cdot)$.  The error term can be estimated a variety of ways, including maximum likelihood, cross-validation, and others (see @ameli2022noise for a survey of methods). For the kernel tuning parameters, it is common to maximize the marginal likelihood to estimate these structural parameters [@williams2006gaussian, chap. 5]. The Gaussian nature of this model enables a number of relatvely strightforward procedures for these purposes (that does not involve another layer of resampling).

Howver, training Gaussian process models can be difficult and the computation cost of training these models increases _cubically_ with the number of data points. In our application, the training set size is the number of tuning parameter candidates with performance statistics. However, after the initial GP model has been trained, there are updating algorithms that can prevent the model from being completely re-estimated from scratch thus reducing training time. 

::: {.note-box}
In summary, Gaussian process models are nonlinear models that can use tuning parameter values to make predictions on future performance statistics. They can predict the mean and variance of performance, the latter being mostly driven by spatial variability.  
:::

In @fig-bayes-opt we've seen how well Bayesian optimization works for a simple one-dimensional function. Let’s apply it in context by using it to optimize our two SVM tuning parameters. 

### A Two Dimensional Illustration {#sec-ba-2D}

```{r}
#| label: bo-example-calcs
#| echo: false
load(url("https://raw.githubusercontent.com/aml4td/website/main/RData/two_param_iter_bo.RData"))

bo_best <- numeric(0)

rmse_best <- min(bo_mtr$mean[bo_mtr$.iter == 0])
for (i in 1:max(bo_mtr$.iter)) {
  new_rmse <- bo_mtr$mean[bo_mtr$.iter == i]
  if (new_rmse < min(rmse_best)) {
    bo_best <- c(bo_best, i)
    rmse_best <- c(rmse_best, new_rmse)
  }
}

bo_best_chr <- cli::format_inline("iterations {bo_best}")
rmse_best_chr <- cli::format_inline("{paste0(signif(rmse_best, 4), '%')}")
```

Returning the the SVM example, we initialize the GP model using the same three points shown in @tbl-svm-initial. We again use the squared exponential kernel in @eq-kernel-sq-expo to measure variability. 

@fig-bo-example shows the results that help us select the first new candidate value. Due to the small number of points used to fit the GP, the EI surface is virtually flat. The flatness of the acquisition function results in a fairly uninformative choice: the first point is very close to the best candidate in the initial set.

Once this new point is sampled, the surrogate GP model produces a clear trend in EI indicating a strong preference for higher cost values (and no effect of the scale parameter). The selected candidate is closer to the ridge of optimal performance. After acquiring this point, the next iteration shows that EI is focused on the scale parameter value and ignores the cost parameter. By iteration 13, a candidate is chosen that is nearly optimal. 

This example shows that Bayesian optimization can make enormous leaps in parameter space, often evaluating its boundaries. This is the opposite of SA, which meanders through local parameter space. 

:::: {.columns}

::: {.column width="15%"}
:::

::: {.column width="70%"}

::: {#fig-bo-example}

::: {.figure-content}

```{shinylive-r}
#| label: fig-bo-example
#| viewerHeight: 630
#| viewerWidth: "100%"
#| standalone: true
#| fig-alt: A two-dimensional parameter space with axes for the scale parameter and the SVM cost is shown. Three initial points are shown. The BO algorithm progresses from a point with low cost and a large scale factor value, making large jumps to different regions of the parameter space; several iterations come close to the optimal ridge. 
library(shiny)
library(bslib)
library(ggplot2)
library(dplyr)
library(purrr)
library(scales)

source("https://raw.githubusercontent.com/aml4td/website/main/R/shiny-setup.R")

ui <- page_fillable(
  theme = bs_theme(bg = "#fcfefe", fg = "#595959"),
  sliderInput(
    "iter",
    label = "Iteration",
    min = 1L,
    max = 50L,
    step = 1L,
    value = 1L,
    width = "100%"
  ),
  radioButtons(
    inputId = "objective",
    label = "Objective Function",
    inline = TRUE,
    choices = list("Exp. Improivement" = "objective", "Mean" = ".mean", 
                   "Std. Dev" = ".sd")
  ),
  as_fill_carrier(plotOutput("path"))
)

server <- function(input, output) {
  
  load(url("https://raw.githubusercontent.com/aml4td/website/main/RData/two_param_iter_bo.RData"))
  load(url("https://raw.githubusercontent.com/aml4td/website/main/RData/two_param_iter_large.RData"))
  
  # ------------------------------------------------------------------------------
  
  x_rng <- 10^extendrange(c(-10, -1/10))
  y_rng <- 2^extendrange(c(-10, 10))
  
  log10_labs <- trans_format("log10", math_format(10^.x, function(x) format(x, digits = 3)))
  log2_labs <- trans_format("log2", math_format(2^.x, function(x) format(x, digits = 3)))
  
  # ------------------------------------------------------------------------------
  
  best_init <- 
    bo_mtr %>% 
    filter(.iter == 0) %>% 
    slice_min(mean) %>% 
    select(cost, scale_factor, .iter)
  
  initial_plot <- 
    regular_mtr %>%
    ggplot(aes(scale_factor, cost)) +
    geom_point(data = init_grid, cex = 3, pch = 1) +
    scale_x_log10(limits = x_rng,
                  labels = log10_labs,
                  expand = expansion(add = c(-1 / 5, -1 / 5))) +
    scale_y_continuous(limits = y_rng, trans = "log2", labels = log2_labs,
                       expand = expansion(add = c(-1/2, -1/2))) +
    theme_bw() +
    labs(x = "Scaling Factor", y = "Cost") +
    coord_fixed(ratio = 1/2)
  
  bo_tile <- tidyr::pivot_longer(
    bo_tile,
    cols = c(.mean, .sd, objective),
    names_to = "metric",
    values_to = "value"
  )
  
  # ------------------------------------------------------------------------------
  
  output$path <-
    renderPlot({
      
      tile <- bo_tile %>% filter(.iter == input$iter & metric == input$objective)
      last_best <- bo_mtr %>% filter(.iter < input$iter) %>% slice_min(mean)
      path <- 
        bo_mtr %>% 
        filter(.iter <= input$iter & .iter > 0) %>% 
        select(cost, scale_factor, .iter) %>% 
        bind_rows(best_init) %>% 
        arrange(.iter)

      rc_pal <- switch(
        input$objective,
        "objective" = "Greens",
        ".mean" = "OrRd",
        ".sd" = "Blues"
      )
      
      hist_alpha <- 
        case_when(
          input$iter < 5 ~ 1/2, 
          input$iter >= 5 & input$iter < 10 ~ 1/3,  
          input$iter >= 10 & input$iter < 20 ~ 1/4, 
          input$iter >= 20 & input$iter < 30 ~ 1/5, 
          TRUE ~ 1 / 10)
      hist_alpha <- 2 * hist_alpha
      
      col_dir <- if_else(input$objective == ".mean", -1, 1)
      col_tr <- "identity"

      current_plot <- 
        initial_plot + 
        geom_tile(data = tile, aes(fill = value), alpha = 1 / 2) +
        geom_line(
          data = regular_mtr %>% slice_min(mean, n = 18),
          stat = "smooth",
          col = "black",
          method = lm,
          se = FALSE,
          formula = y ~ x,
          alpha = 1 / 4,
          linewidth = 2
        ) +
        geom_path(data = path, col = "black", alpha = hist_alpha, lty = 3) +
        geom_point(data = new_bo_points %>% filter(iter == input$iter), 
                   col = "black", pch = 16, cex = 4) +
        geom_point(data = last_best, cex = 4, col = "black", pch = 8) + 
        scale_fill_distiller(palette = rc_pal, type = "seq", 
                             direction = col_dir, transform = col_tr) +
        theme(legend.title = element_blank(), legend.text = element_blank())
      print(current_plot)
      
    }, res = 100)

}

app <- shinyApp(ui, server)
app
```

:::

An illustration of Bayesian optimization. The open circles represent a small initial grid. The thick diagonal grey light is a ridge where the model has the smallest RMSE. The asterisk denotes the current best candidate.

:::

:::

::: {.column width="15%"}
:::

:::: 

The complete search produced new optimal values at iterations `r bo_best_chr`. The decrease in RMSE shows few meaningful improvements among negligible decreases: `r rmse_best_chr`. The search process was able to effectively tune the SVM model and find very good parameters. 

The cost of the Gaussian process fit does become more expensive as new candidates are sampled, making the process somewhat less efficient than the previous approaches. The time to compute each candidate was `r prettyunits::pretty_sec((initial_time[3] + bo_time[3])/nrow(bo_mtr))`.

## Example: Tuning a Neural Network {#sec-bayes-opt-nnet}

Our previous work on the Barely data has addressed the high correlation between predictors via feature engineering with principal components. In this chapter, we’ll take a more sophisticated approach to preprocessing these data using signal processing techniques, specifically the **Savitzky-Golay** method [@Schafer2011;@rinnan2009review]. This technique incorporates two main goals: to smooth the data from location to location (i.e., across the x-axis in @fig-barley-data(b)) and to difference the data. Smoothing attempts to reduce measurement noise without diminishing the data patterns that could predict the outcome. Differencing can remove the correlation between locations and might also mitigate other issues, such as systematic background noise. 

For smoothing, the procedure uses a moving window across a sample’s location and, within each window, uses a polynomial basis expansion to produce a smoother representation of the data. The window width and the polynomial degree are both tuning parameters. 

Differencing has a single tuning parameter: the difference order. A zero-order difference leaves the data as-is (after smoothing). A first-order difference is the smoothed value minus the smoothed value for the next location (and so on). Savitzky and Golay's method uses the polynomial estimates to estimate the differences/derivatives, instead of subtracting two columns after smoothing. 

@fig-savitzky-golay shows an example of a small set of locations from a single spectra in @fig-barley-data. The top row shows the effect of smoothing when differencing is not used. For a linear smoother (i.e., a polynomial degree of one), the process can over-smooth the data such that the nonlinear portions of the raw data lose significant amounts of information. This issue goes away as the polynomial order is increased. However, the higher degree polynomial nearly interpolates between data points and may not be smoothing the data in any meaningful way. 

The bottom panel shows the data when a first-order difference is used. The pattern is completely different since the data now represent the rate of change in the outcome rather than the absolute measurement values. Again, larger window sizes oversmooth the data, and the highest degree of polynomial provides minimal smoothing. 

```{r}
#| label: fig-savitzky-golay
#| echo: false
#| fig-width: 8.5
#| fig-height: 6
#| out-width: 100%
#| warning: false
#| fig-cap: "Demonstrations of the Savitzky-Golay preprocessing method for a small region for one specific sample previously shown in @fig-barley-data."
#| fix-alt: "Six panel figure showing Savitzky-Golay smoothing analysis of spectral data. Top row displays original values with fitted curves for polynomial degrees 1, 2, and 5 (windows: 3, 7, 11). Bottom row shows corresponding first differences. Each panel plots wavelength against signal intensity, demonstrating increasing smoothing complexity across polynomial degrees."

load("../RData/savitzky_golay_demo.RData")

smoothed_p <-
  smoothed_plot_data %>%
  mutate(.location = .location + (`window size`/2) - 1/2) %>%
  ggplot(aes(.location, .measure)) +
  geom_point(data = raw_plot_data, cex = 1/2) +
  geom_path(aes(col = window), alpha = 3 / 4) +
  facet_wrap(~ `polynomial degree`, labeller = label_both) +
  lims(y = c(0.595, 0.606), x = c(505, 544)) +
  labs(y = "Original Value", x = NULL) +
  theme(legend.position = "top")

diff_p <- diff_plot_data %>%
  mutate(.location = .location + (`window size`/2)) %>%
  ggplot(aes(.location, .measure)) +
  geom_hline(yintercept = 0, lty = 2, alpha = 1 / 2) +
  geom_point(data = raw_diff_plot_data, cex = 1/2) +
  geom_path(aes(col = window), alpha = 3 / 4) +
  facet_wrap(~ `polynomial degree`, labeller = label_both) +
  lims(y = c(-0.0012, 0.0014), x = c(505, 544)) +
  labs(y = "1st Difference", x = "Wavelength (nm)") +
  theme(legend.position = "none")

smoothed_p / diff_p
```

We’ll want to optimize these preprocessing parameters simultaneously with the parameters for the supervised model. We’ll fit a neural network with a single layer of hidden units. We’ll tune over the following parameters, described at length in @sec-cls-nnet:

```{r}
#| label: collect-iterative
#| include: false
load("../RData/barley_iterative.RData")

iters <- max(mlp_sfd_bo_ci$.iter)
rmse_rng <- extendrange(c(mlp_sfd_bo_ci$.lower, mlp_sfd_bo_ci$.upper, 
                          mlp_sfd_sa_ci$.lower, mlp_sfd_sa_ci$.upper))

init_rng <- paste0(round(range(mlp_sfd_bo_ci$.estimate[mlp_sfd_bo_ci$.iter == 0]), 1), "%")
init_rng <- cli::format_inline("{init_rng}")

mlp_sfd_bo_best_ci <- 
  mlp_sfd_bo_ci %>% 
  filter(.iter == max(mlp_sfd_bo_best))

mlp_sfd_bo_ci$is_best <- "no"
mlp_sfd_bo_ci$is_best[mlp_sfd_bo_ci$.iter %in% mlp_sfd_bo_best] <- "yes"

mlp_sfd_bo_ci <- mlp_sfd_bo_ci %>% arrange(.iter)

bo_best_iter <- bo_best <- Inf

for (i in 1:nrow(mlp_sfd_bo_ci)) {
  if (mlp_sfd_bo_ci$.estimate[i] < bo_best) {
    bo_best <- mlp_sfd_bo_ci$.estimate[i]
    bo_best_iter <- c(bo_best_iter, mlp_sfd_bo_ci$.iter[i])
  }
}
bo_best_iter <- bo_best_iter[bo_best_iter > 0 & is.finite(bo_best_iter)]

mlp_sfd_sa_best_ci <- 
  mlp_sfd_sa_ci %>% 
  filter(.iter == max(mlp_sfd_sa_best))

mlp_sfd_sa_ci$is_best <- "no"
mlp_sfd_sa_ci$is_best[mlp_sfd_sa_ci$.iter %in% mlp_sfd_sa_best] <- "yes"

mthds <- c("Simulated Annealing", "Bayesian Optimization")
restarts <- result_history$.iter[result_history$results == "restart from best"]
restarts <- tibble(Method = factor("Simulated Annealing", levels = mthds), 
                   .iter = restarts)
sa_best <- result_history$.iter[result_history$results == "new best"]

num_range <- function(x) {
  prm <- mlp_param$object[[which(mlp_param$id == x)]]
  rng <- prm$range
  rng <- map(rng, format, digits = 3, big.mark = ",")
  if (is.null(prm$trans)) {
    trns <- ""
  } else {
    trns <- cli::format_inline(", in {prm$trans$name} units")
  }
  cli::format_inline("({rng[[1]]} to {rng[[2]]}{trns})")

}

init_best_ci <- 
  mlp_sfd_bo_ci %>% 
  filter(.iter == 0) %>% 
  slice_min(.estimate, n = 1) %>% 
  mutate(method = "Initial Grid") %>% 
  select(-is_best)
```

- The number of hidden units in the layer `r num_range("hidden_units")`. 
- The type of nonlinear function that connects the input layer and the hidden layer, called the "activation function.". Possible functions are "tanh", exponential linear unit  ("ELU") functions, rectified linear unit ("ReLU") functions, and log-sigmoidal functions. 
- The number of epochs of degraded performance before early stopping is enacted `r num_range("stop_iter")`. 
- The total amount of penalization for the model `r num_range("penalty")`. 
- The proportion of $L_1$ penalty (a.k.a. Lasso penalization) `r num_range("mixture")`. 
- The initial learning rate used during gradient descent `r num_range("learn_rate")`. 
- The "scheduling" function to adjust the learning rate over iterations: "constant", "cyclic", or "exponential decay".

In all, there are `r xfun::numbers_to_words(length(mlp_param$id))` tuning parameters, two of which are qualitative. 

A space-filling design with `r mlp_sfd_bo_ci %>% filter(.iter == 0) %>% nrow()` candidate points were initially processed to use as the starting point for Bayesian optimization and simulated annealing. When constructing the grid, there are two constraints on the preprocessing parameters: 

 - The smoothing polynomial degree must be greater or equal to the differentiation order. 
 - The window size must be greater than the polynomial degree.

An initial grid was created without constraints, and candidates who violated these rules were eliminated. The two constraints were applied when simulated annealing and Bayesian optimization created new candidates. 

@tbl-nnet-initial shows the settings and their corresponding validation set RMSE values, which ranged between `r init_rng`. At least two of the settings show good performance results, especially compared to the RMSE values previously achieved when embeddings and/or SVMs were used.   

::: {#tbl-nnet-initial}

```{r}
#| label: tbl-nnet-initial
#| echo: false
mlp_sfd_bo_ci %>% 
  filter(.iter == 0) %>% 
  mutate(
    `window size` = 2 * window_side + 1,
    mixture = mixture * 100,
    `penalty (log-10)` = log10(penalty),
    `learn rate (log-10)` = log10(learn_rate),
    activation = gsub("_", " ", activation),
    rate_schedule = gsub("(decay_time)|(decay_expo)", "decay", rate_schedule)
    ) %>% 
  arrange(.estimate) %>% 
  select(`RMSE (%)` = .estimate, `window size`, differentiation_order, degree,
         hidden_units, `penalty (log-10)`, activation, `learn rate (log-10)`,
         rate_schedule, stop_iter, mixture) %>% 
  kable(
    digits = 2,
    col.names  = c(
     "RMSE (%)", "Window", "Diff. Order", "Degree", "Units", "Penalty (log-10)", 
     "Activation", "Learn Rate (log-10)", "Rate Schedule", "Stop Iter.", 
     "L1 Mixture"
    )
  ) %>% 
  kable_styling(bootstrap_options = "responsive", full_width = FALSE)
```

The initial set of candidates used for iterative search methods.
 
:::

Can we improve on these results using iterative optimization? To begin, a simulated annealing search was initialized using the best results in @tbl-nnet-initial and ran for `r iters` iterations with no early stopping. If a new globally best result was not found within eight iterations, the search restarted from the previously best candidate. `r cli::format_inline("The search was restarted {length(restarts$.iter)} time{?s} at iterations {restarts$.iter}")` and improved candidates were found at iterations `r sa_best`. The overall best candidate had an RMSE value of `r round(mlp_sfd_sa_best_ci$.estimate, 2)`%, with a 90% confidence interval of (`r round(mlp_sfd_sa_best_ci$.lower, 2)`%, `r round(mlp_sfd_sa_best_ci$.upper, 2)`%).  The improvement appears to be a legitimate improvement over the initial best configuration. The top panel of @fig-nnet-sg-iterations shows the RMSE values over iterations and @tbl-nnet-sg-best lists the best candidate value.

```{r}
#| label: fig-nnet-sg-iterations
#| echo: false
#| fig-width: 6
#| fig-height: 5
#| out-width: 70%
#| fig-cap: "Validation set RMSE results for the optimization. The validation set RMSE is shown on the y-axis with 90% confidence intervals. Orange points indicate iterations where a new optimal value was found and vertical lines indicate where the algorithm restarted from the previous best candidate."
#| fix-alt: "Comparison of two optimization methods - SA (top) and BO (bottom) - showing RMSE values over 50 iterations. Both plots display RMSE (3-15 scale) vs. iteration number with error bars. Orange points mark new optimal values. Both methods show gradual error reduction, with Bayesian Optimization achieving lower and more stable RMSE values."
#| warning: false

mlp_sfd_sa_ci %>% 
  mutate(Method = "Simulated Annealing") %>% 
  bind_rows(
    mlp_sfd_bo_ci %>% mutate(Method = "Bayesian Optimization")
  ) %>% 
  mutate(Method = factor(Method, levels = mthds)) %>% 
  filter(.iter > 0) %>% 
  ggplot(aes(.iter, col = is_best)) + 
  geom_point(aes(y = .estimate), show.legend = FALSE, cex = 1 / 2) +
  geom_errorbar(
    aes(ymin = .lower, ymax = .upper), 
    width = 1/2, 
    show.legend = FALSE
  ) +
  geom_vline(data = restarts, aes(xintercept = .iter), col = "darkred", lty = 3) +
  facet_wrap(~ Method, ncol = 1) +
  labs(x = "Iteration", y = "RMSE") +
  scale_color_manual(values = c("black", "#FF7F00"))
```

A Bayesian optimization was also used with a squared exponential kernel for the covariance function and used expected improvement to select candidates at each of the `r iters` iterations. This search found new best results at `r cli::format_inline("{length(bo_best_iter)} iteration{?s}: {bo_best_iter}")`. Like the SA search, the best RMSE was substantially different than the one found in the initial grid: `r round(mlp_sfd_bo_best_ci$.estimate, 2)`% with 90% confidence interval, (`r round(mlp_sfd_bo_best_ci$.lower, 2)`%, `r round(mlp_sfd_bo_best_ci$.upper, 2)`%). The iterations and final values also be seen in @fig-nnet-sg-iterations and @tbl-nnet-sg-best, respectively. 

:::: {.columns}

::: {.column width="15%"}
:::

::: {.column width="70%"}

::: {#tbl-nnet-sg-best}

```{r}
#| label: tbl-nnet-sg-best
#| echo: false
iter_rows <- 
  c("Differentiation Order", "Polynomial Degree", "Window Size",
    "Hidden Units", "Activation", "Penalty (log10)", "L1 Proportion", 
    "Learning Rate (log10)", "Rate Schedule", "Stopping Rule", "RMSE", 
    "Conf. Int."
    )

bind_rows(init_best_ci, mlp_sfd_sa_best_ci, mlp_sfd_bo_best_ci) %>% 
  mutate(
    `Penalty (log10)` = log10(penalty),
    `Learning Rate (log10)` = log10(learn_rate),
    `Conf. Int.` = map2_chr(.lower, .upper, 
                       ~ cli::format_inline("({round(.x, 2)}%, {round(.y, 2)}%)")),
    RMSE = map_chr(.estimate, ~ cli::format_inline("{round(.x, 2)}%")),
    `Window Size` = 1 + 2 * window_side,
    across(where(is.numeric), ~ format(.x, digits = 3))
  ) %>% 
  select(-.metric, -.estimator, -.config, -penalty, -learn_rate, 
         -.lower, -.upper, -.estimate, -window_side, -.iter) %>% 
  rename(`Hidden Units` = hidden_units, Activation = activation,
         `Stopping Rule` = stop_iter, `L1 Proportion` = mixture, 
         `Rate Schedule` = rate_schedule, `Polynomial Degree` = degree,
         `Differentiation Order` = differentiation_order) %>% 
  pivot_longer(cols = c(-method), names_to = "Parameter", values_to = "Value") %>% 
  pivot_wider(id_cols = c(Parameter), names_from = "method", values_from = "Value") %>% 
  mutate(
    Parameter = factor(Parameter, levels = iter_rows)
  ) %>% 
  arrange(Parameter) %>% 
  kable(
    col.names  = c(" ", "Initial Grid", "Simulated Annealing", "Bayesian Optimzation")
  ) %>% 
  kable_styling(bootstrap_options = "responsive", full_width = FALSE)

```

The best results from the initial space-filling design and the two iterative searches for a neural network using Savitzky-Golay preprocessing. 

:::

:::

::: {.column width="15%"}
:::

:::: 

Many of the parameter values for the final candidates from each search are very similar. In particular, it appears that a second-order difference in the predictors was very effective. 

In terms of computing time, simulated annealing took `r prettyunits::pretty_sec(mlp_sa_time[3] / iters)` on average for each candidate and compared to `r prettyunits::pretty_sec(mlp_bo_time[3] / iters)` required for BO (a `r round(mlp_bo_time[3]/mlp_sa_time[3], 1)`-fold difference). 

## Summary {#sec-iterative-summary}

There are several different ways to tune models sequentially. For tabular data, these approaches are rarely the only efficient method for model optimization, but they may be preferable for certain models and large data sets.  

## Chapter References {.unnumbered}
