---
knitr:
  opts_chunk:
    cache.path: "../_cache/whole-game/"
---

# Initial Data Splitting {#sec-data-splitting}

```{r}
#| label: splitting-setup
#| include: false

source("../R/_common.R")

# ------------------------------------------------------------------------------

library(sf)
library(readr)
library(tidymodels)
library(patchwork)
library(gt)
library(spatialsample)
library(tidysdm)
library(forested)
library(leaflet)

# ------------------------------------------------------------------------------
# Set options

tidymodels_prefer()
theme_set(theme_transparent())
set_options()

# ------------------------------------------------------------------------------

data(ames)
load("../RData/forested_data.RData")
load("../RData/forested_split_info.RData")
load("../RData/forested_plot_sf.RData")
load("../RData/forested_sf.RData")
```

In the previous chapter, Figures [-@fig-model-building-process] and [-@fig-within-model-process] described various operations for the development and evaluation of ML models. We've also emphasized that "the right data should be used at the right time." If the same samples were used for many different purposes, we run the risk of **overfitting**.  Illustrated in @sec-overfitting, this occurs when the model over-interprets irreproducible patterns in the modeling data that don't happen in any other data set. As a result, the model performance statistics are likely to be very optimistic and give us a false sense of how well the model works. If the model were evaluated on a separate set of data (that does not have abnormal patterns), performance would look considerably worse. Because of potential overfitting, the modeler must decide how to best utilize their data across different operations. 

This chapter will examine how we can appropriately utilize our data. Except in @sec-multilevel-splitting, we'll assume that each data set row is statistically independent of the others. Before proceeding further, we'll introduce an example data set used in multiple chapters.  

## The Ames Housing Data {#sec-ames-intro}

These data, originally published by @ames, are an excellent teaching example. Data were collected for `r format(nrow(ames), big.mark = ",")` houses in Ames, Iowa, via the local assessor's office. A variety of different characteristics of the houses were measured. [Chapter 4](https://www.tmwr.org/ames.html) of @tmwr contains a detailed examination of these data. For illustration, we will focus on a smaller set of predictors, summarized in Tables [-@tbl-ames-numeric] and [-@tbl-ames-categorical]. The geographic locations of the properties are shown in @fig-ames-selection. 

:::: {.columns}

::: {.column width="15%"}
:::

::: {.column width="70%"}

::: {#tbl-ames-numeric}

```{r}
#| echo: false
#| warning: false
#| message: false
#| renderings: [light, dark]
#| html-table-processing: none

quant_summary <- function(x) {
  data.frame(
    Min = min(x, na.rm = TRUE),
    Median = median(x, na.rm = TRUE),
    Max = max(x, na.rm = TRUE),
    std.dev = sd(x, na.rm = TRUE),
    Skewness = e1071::skewness(x, na.rm = TRUE)
  )
}

ames_quant <- 
  ames %>%
  select(Sale_Price, Year_Built, `Gross Living Area` = Gr_Liv_Area, Full_Bath,
         Half_Bath, Year_Sold, Lot_Area, Longitude, Latitude) %>%
  mutate(
    Baths = Full_Bath  + Half_Bath/2
  ) %>%
  select(-Half_Bath, -Full_Bath) %>%
  pivot_longer(
    cols = c(everything()),
    names_to = "Column",
    values_to = "value"
  ) %>%
  mutate(
    Column = tolower(gsub("_", " ", Column)),
    Column = tools::toTitleCase(Column)
  ) %>% 
  nest_by(Column) %>% 
  mutate(
    summa = map(data, ~ quant_summary(.x)),
    plots = list(
      ggplot(data, aes(value)) + 
        geom_histogram(bins = 20, col = "transparent", linewidth = 5) +
        scale_x_continuous(expand = c(0, 0)) +
        scale_y_continuous(expand = c(0, 0)) +
        theme(
          axis.line = element_blank(),
          axis.text.x = element_blank(),
          axis.text.y = element_blank(),
          axis.ticks = element_blank(),
          axis.title.x = element_blank(),
          axis.title.y = element_blank(),
          legend.position = "none",
          panel.background = element_blank(),
          panel.border = element_blank(),
          panel.grid.major = element_blank(),
          panel.grid.minor = element_blank(),
          plot.background = element_blank()
        )
    )
  )

ames_quant_stats <- 
  ames_quant %>% 
  select(summa) %>% 
  unnest(summa) %>% 
  ungroup() %>% 
  mutate(
    Min = format(Min, digits = 3, scientific = FALSE, big.mark = ","),
    Median = format(Median, digits = 3, scientific = FALSE, big.mark = ","),
    Max = format(Max, digits = 3, scientific = FALSE, big.mark = ","),
    std.dev = format(std.dev, digits = 1, scientific = FALSE, big.mark = ","),
    Skewness = format(Skewness, digits = 1)
  ) %>% 
  select(Column, Min, Median, Max, `Std. Dev.` = std.dev, Skewness)

ames_tbl <- 
  bind_cols(
  ames_quant_stats,
  ames_quant %>% ungroup() %>% select(plots)
  ) 

ames_quant_light_tbl <- 
  ames_tbl |> 
  mutate(Distribution = NA) %>%
  {
    dat <- .
    dat %>%
      select(-plots) %>%
      gt() %>%
      tab_options(table.background.color = light_bg) %>% 
      text_transform(locations = cells_body(c(Distribution)),
                     fn = function(x) {
                       map(dat$plots, ggplot_image, height = px(30), aspect_ratio = 4)
                     }
      )
  } |> 
  lt_tbl_thm() 


ames_quant_dark_tbl <- 
  ames_tbl |> 
  mutate(Distribution = NA) %>%
  {
    dat <- .
    dat %>%
      select(-plots) %>%
      gt() %>%
      tab_options(table.background.color = dark_bg) %>% 
      text_transform(locations = cells_body(c(Distribution)),
                     fn = function(x) {
                       map(dat$plots, ggplot_image, height = px(30), aspect_ratio = 4)
                     }
      )
  } |> 
  dk_tbl_thm() 

ames_quant_light_tbl

ames_quant_dark_tbl
```

A summary of numeric predictors in the Ames housing data. 
 
:::

:::

::: {.column width="15%"}
:::

:::: 


:::: {.columns}

::: {.column width="15%"}
:::

::: {.column width="70%"}

::: {#tbl-ames-categorical}

```{r}
#| echo: false
#| renderings: [light, dark]
#| html-table-processing: none

freq <- function(x, most = TRUE) {
  xtab <- sort(table(x), decreasing = most)
  xtab <- xtab[xtab > 0]
  res <- names(xtab)[1]

  if (res == "N") {
    res <- "No"
  } else if (res == "Y") {
    res <- "Yes"
  } else if (res == "OneFam") {
    res <- "Single-Family Detached"
  } else if (res == "TwoFmCon") {
    res <- "Two-Family Conversion"
  }
  
  res <- paste0(res, " (", xtab[1], ")")
  gsub("_", " ", res)
}

ames_qual <- 
  ames  %>%
  select(`Building Type` = Bldg_Type, Neighborhood, Central_Air) %>%
  pivot_longer(
    cols = c(everything()),
    names_to = "Column",
    values_to = "value"
  ) %>%
  mutate(
    Column = tolower(gsub("_", " ", Column)),
    Column = tools::toTitleCase(Column)
  ) %>% 
  nest_by(Column) %>%
  mutate(
    `# Values` = length(unique(data$value)),
    `Most Frequent (n)` = freq(data$value),
    `Least Frequent (n)` = freq(data$value, FALSE),
    plots = list(
      ggplot(data, aes(value, fill = value)) +
        geom_bar() +
        theme(
          axis.line = element_blank(),
          axis.text.x = element_blank(),
          axis.text.y = element_blank(),
          axis.ticks = element_blank(),
          axis.title.x = element_blank(),
          axis.title.y = element_blank(),
          legend.position = "none",
          panel.background = element_blank(),
          panel.border = element_blank(),
          panel.grid.major = element_blank(),
          panel.grid.minor = element_blank(),
          plot.background = element_blank()
        )
    ),
    .keep = "unused"
  ) %>%
  ungroup() %>% 
  mutate(Distribution = NA)

ames_qual_light_tbl <- 
  ames_qual %>%
  {
    dat <- .
    dat %>%
      select(-plots) %>%
      gt() %>%
      tab_options(table.background.color = light_bg) %>% 
      text_transform(locations = cells_body(c(Distribution)),
                     fn = function(x) {
                       map(dat$plots, ggplot_image, height = px(30), aspect_ratio = 4)
                     }
      ) %>%
      tab_options(table.font.size = "80%")
  } |> 
  lt_tbl_thm() 


ames_qual_dark_tbl <- 
  ames_qual %>%
  {
    dat <- .
    dat %>%
      select(-plots) %>%
      gt() %>%
      tab_options(table.background.color = dark_bg) %>% 
      text_transform(locations = cells_body(c(Distribution)),
                     fn = function(x) {
                       map(dat$plots, ggplot_image, height = px(30), aspect_ratio = 4)
                     }
      ) %>%
      tab_options(table.font.size = "80%")
  } |> 
  dk_tbl_thm() 

ames_qual_light_tbl

ames_qual_dark_tbl
```

A summary of categorical predictors in the Ames housing data.
 
:::

:::

::: {.column width="15%"}
:::

:::: 

As shown in @tbl-ames-numeric, the sale price distribution is fairly right-skewed. For this reason, and because we do not want to be able to predict negative prices, the outcome is analyzed on the log (base-10) scale.

## Training and Testing Sets  {#sec-train-test}

One of the first decisions is to decide which samples will be used to evaluate performance. We should evaluate the model with samples that were not used to build or fine-tune it. An "external sample" will help us obtain an unbiased sense of model effectiveness. A selection of samples can be set aside to evaluate the final model. The **training data** set is the general term for the samples used to create the model. The remaining samples, or a subset of them, are placed in the **testing data** set.  The testing data set is exclusively used to quantify how well the model works on an independent set of data. It should only be accessed once to validate the final model candidate.  

How much data should be allocated to the training and testing sets? This depends on several characteristics, such as the total number of samples, the distribution of the response, and the type of model to be built.  For example, suppose the outcome is binary and one class has far fewer samples than the other. In that case, the number of samples selected for training will depend on the number of samples in the minority class.  Finally, the more tuning parameters required for a model, the larger the training set sample size will need to be. 
 In general, a decent rule of thumb is that 75% could be used from training. 

When the initial data pool is small, a strong case can be made that a test set should be avoided because every sample may be needed for model building. Additionally, the size of the test set may not have sufficient power or precision to make reasonable judgments. Several researchers [@Molinaro2005p47; @Martin1996p52; @Hawkins2003p2906]  show that validation using a single test set can be a poor choice. @Hawkins2003p2906 concisely summarizes this point:

> "hold-out samples of tolerable size [...] do not match the cross-validation itself for reliability in assessing model fit and are hard to motivate".  

Resampling methods (@sec-resampling), such as cross-validation, are an effective tool that indicates if overfitting is occurring. Although resampling techniques can be misapplied, such as the example shown in @Ambroise2002p1493, they often produce performance estimates superior to a single test set because they evaluate many alternate versions of the data.

::: {.dangerous-box}
Overfitting is the greatest danger in predictive modeling. It can occur subtly and silently. You cannot be too paranoid about overfitting. 
:::

For this reason, it is crucial to have a systematic plan for using the data during modeling and ensure that everyone sticks to the program. This can be particularly important in cases where the modeling efforts are collaborations between multiple people or institutions. We have had experiences where a well-meaning person included the test set during model training and showed stakeholders artificially good results. For these situations, it might be a good idea to have a third party split the data and blind the outcomes of the test set. In this way, we minimize the possibility of accidentally using the test set (or people peeking at the test set results).  

## Information Leakage  {#sec-leakage}

Information leakage (a.k.a data leakage) is another aspect of data handling to consider at the onset of a modeling project. This occurs when the model has access to data that it should not. For example, 

* Using the distribution of the predictor data in the test set (or other future data) to inform the model.
* Including identical or statistically related data in training _and_ test sets.
* Exploiting inadvertent features that are situationally confounded with the outcome.

An example of the last item we experienced may be familiar to some readers. A laboratory was producing experimental results to evaluate the difference between two treatments for a particular disorder. The laboratory was under time constraints due to an impending move to another building. They prioritized samples corresponding to the new treatment since these were more interesting. Once finished, they moved to their new home and processed the samples from the standard treatment. 

Once the data were examined, there was an enormous difference between the two treatment sets. Fortuitously, one sample was processed twice: before and after they moved. The two replicate data points for this biological sample also showed a large difference. This means that the signal seen in the data was potentially driven by the changes incurred by the laboratory move and not due to the treatment type. 

This type of issue can frequently occur. See, for example, @bioinformaticsbtg484, @kaufman2012leakage, or @kapoor2023leakage.

Another example occurs in the Ames housing data set. These data were produced by the local assessor's office, whose job is to appraise the house and estimate the property's value. The data set contains several quality fields for things like the heating system, kitchen, fireplace, garage, and so on. These are subjective results based on the assessor’s experience. These variables are in a qualitative, ordinal format:  "poor", "fair", "good", etc. While these variables correlate well with the sale price, they are actually outcomes and not predictors. For this reason, it is inappropriate to use them as independent variables.  

Finally, the test set must emulate the data that will be seen "in the wild", i.e., in future samples. We have had experiences where the person in charge of the initial data split had a strong interest in putting the "most difficult" samples in the test set. The prevalence of such samples should be consistent with their prevalence in the population that the model is predicting. 

## Simple Data Splitting  {#sec-basic-splitting}

When splitting the data, it is vital to think about the model's purpose and how the predictions will be used. The most important issue is whether the model will predict the same population found in the current data collection. For example, for the Ames data, the purpose is to predict new houses in the town. This definition implies a measure of interpolation since we are primarily concerned with what is happening in Ames. The existing data capture the types of properties that might be seen in the future.

As a counter-example, [Chapter 4](https://bookdown.org/max/FES/chicago-intro.html) of @fes highlights a prediction problem in which a model is used to predict the future ridership of commuters on the Chicago elevated trains. This data set has daily records of how many commuters ride the train, and temporal factors highly affect the patterns. In this case, the population we will predict is future ridership. Given the heavy influence of time on the outcome, this implies that we will be extrapolating outside the range of existing data. 

In cases of temporal extrapolation, the most common approach to creating the training and testing set is to keep the most recent data in the test set. In general, it is crucial to have the data used to evaluate the model be as close to the population to be predicted. For times series data, a deterministic split is best for partitioning the data. 

When interpolation is the focus, the simplest way to split the data into a training and test set is to take a simple random sample. If we desire the test set to contain 25{{< pct >}} of the data, we randomly generate an appropriately sized selection of row numbers to allocate sales to the test set. The remainder is placed in the training set. 

What is the appropriate percentage? Like many other problems, this depends on the characteristics of the data (e.g., size) and the modeling context. Our general rule of thumb is that one-fourth of the data can go into testing. The criticality of this choice is driven by how much data are available. The split size is not terribly important if a massive amount of data is available. When data are limited, deciding how much data to withhold from training can be challenging. 

@Martin2012hr compares different methods of splitting data, including random sampling, dissimilarity sampling, and other methods.

`r r_comp("initial-data-splitting.html#sec-basic-splitting")`

## Using the Outcome {#sec-split-with-outcome}

Simple random sampling does not control for any data attributes, such as the percentage of data in the classes. When one class has a disproportionately small frequency compared to the others (discussed in @sec-imbalances), the distribution of the outcomes may be substantially different between the training and test sets.

When splitting the data, stratified random sampling [@Kohavi1995p57] applies random sampling within sub-groups (such as the classes) to account for the outcome. In this way, there is a higher likelihood that the outcome distributions will match. When an outcome is a number, we use a similar strategy; the numeric values are broken into similar groups (e.g., low, medium, and high) and execute the randomization within these groups.

Let's use the Ames data to demonstrate stratification. The outcome is the sale price of a house. @fig-ames-splitting(a) shows the distribution of the outcomes with vertical lines that separate 20{{< pct >}} partitions of the data. Panel (b) shows that the outcome distributions are nearly identical after partitioning into training and testing sets. 

```{r}
#| label: ames-before
#| include: false

sale_dens <- 
  density(ames$Sale_Price, n = 2^10) %>% 
  tidy() 
price_bins <- quantile(ames$Sale_Price, probs = c(0:5)/5)
price_bins <- tibble(prob = c(0:5)/5, value = unname(price_bins))
price_bins$y <- approx(sale_dens$x, sale_dens$y, xout = price_bins$value)$y

light_strata_plot <- 
  ggplot(ames, aes(x = Sale_Price)) +
  geom_line(stat = "density", linewidth = 1.2) +
  geom_segment(data = price_bins,
               aes(x = value, xend = value, y = 0, yend = y),
               lty = 2) +
  geom_rug(alpha = 1 / 10, length = unit(0.02, "npc")) +
  labs(x = "Sale Price (USD)", y = NULL, title = "(a) before") +
  theme_transparent()

dark_strata_plot <- 
  ggplot(ames, aes(x = Sale_Price)) +
  geom_line(stat = "density", col = "#CCDEEC", linewidth = 1.2) +
  geom_segment(data = price_bins,
               aes(x = value, xend = value, y = 0, yend = y),
               lty = 2, col = "#F2EFE5") +
  geom_rug(alpha = 1 / 10, length = unit(0.02, "npc"), col = "#CCDEEC") +
  labs(x = "Sale Price (USD)", y = NULL, title = "(a) before") +
  dk_thm
```

```{r}
#| label: ames-split
#| include: false

source("../R/setup_ames.R")
```


::: {#fig-ames-splitting}

::: {.figure-content}

```{r}
#| echo: false
#| renderings: [light, dark]
#| fig-height: 4

light_parition_plot <- 
  ggplot(ames_train, aes(x = 10^Sale_Price)) + 
  geom_line(stat = "density", col = "red", linewidth = 1.2) + 
  geom_line(data = ames_test, stat = "density", col = "blue", lty = 2, linewidth = 1.2)+
  geom_rug(alpha = 1 / 5, length = unit(0.02, "npc"), col = "red", sides = "b") +
  geom_rug(data = ames_test, alpha = 1 / 5, length = unit(0.02, "npc"), col = "blue", sides = "t") +
  labs(x = "Sale Price (USD)", y = NULL, title = "(b) after") +
  theme_transparent()

dark_parition_plot <- 
  ggplot(ames_train, aes(x = 10^Sale_Price)) + 
  geom_line(stat = "density", col = "#BE3428FF", linewidth = 1.2) + 
  geom_line(data = ames_test, stat = "density", col = "#0076C0FF", lty = 2, linewidth = 1.2)+
  geom_rug(alpha = 1 / 5, length = unit(0.02, "npc"), col = "#BE3428FF", sides = "b") +
  geom_rug(data = ames_test, alpha = 1 / 5, length = unit(0.02, "npc"), col = "#0076C0FF", sides = "t") +
  labs(x = "Sale Price (USD)", y = NULL, title = "(b) after") +
  dk_thm

light_strata_plot + light_parition_plot

dark_strata_plot + dark_parition_plot
```

:::

Panel (a) A density plot of the sale price of houses in Ames with vertical lines that indicate regions that cover 20{{< pct >}} of the data. The 'rug' on the axis shows the individual data points. Panel (b) Density plots of the training set outcomes (solid red) and test set outcomes (dashed blue) for the Ames data.

:::


`r r_comp("initial-data-splitting.html#sec-split-with-outcome")`

## Using the Predictors  {#sec-split-with-predictors}

Alternatively, we can split the data based on the predictor values. @Willett1999p8 and @Clark1997p1352 proposed data splitting based on _maximum dissimilarity sampling_. The dissimilarity between two samples can be measured in several ways. The simplest method uses the distance between the predictor values for two samples. If the distance is small, the points are nearby. Larger distances between points are indicative of dissimilarity.  To use dissimilarity as a tool for data splitting, we should initialize the training set with a single sample. We calculate the dissimilarity between this initial sample and the unallocated samples. The unallocated sample that is most dissimilar is added to the training set. A method is needed to allocate more instances to the training set to determine the dissimilarities between _groups_ of points (i.e., the two in the training set and the unallocated points). One approach is to use the average or minimum of the dissimilarities. For example, to measure the dissimilarities between the two samples in the training set and a single unallocated point, we can determine the two dissimilarities and average them. The third point added to the training is chosen as having the maximum average dissimilarity to the existing set. This process continues until we achieve the targeted training set size.

@fig-ames-selection illustrates this process for the Ames housing data. Starting with a data point near the middle of the town, dissimilarity sampling selected 25 data points using scaled longitude and latitude as predictors.  As the sampling proceeds, the algorithm initially chooses samples near the outskirts of the data, especially if they are outliers. Overall, the selected data points cover the space with no redundancy.  


::: {#fig-ames-selection}

::: {.figure-content}

```{r}
#| out-width: 70%
#| renderings: [light, dark]
#| message: false
#| warning: false

knitr::include_graphics("../premade/anime_ames_selection.gif")

knitr::include_graphics("../premade/anime_ames_selection_dark.gif")
```


:::

Maximum dissimilarity sampling of 25 points in the Ames data. The small black circles are individual properties. Larger, lighter colors indicate earlier selection.

:::


For this example, the two predictors used for splitting were numeric. In this case, we typically use simple distance functions to define dissimilarity. Many other functions are possible. The Gower distance [@gower] is a good alternative when a data set has non-numeric predictors. @sec-cls-knn discusses this metric in more detail. 

::: {.warning-box}
While this analysis nicely illustrates the dissimilarity sampling process, it is flawed since it ignores the issue of _spatial autocorrelation_. This is the idea that things close to one another act more similarly than objects farther away and will be discussed more in  @sec-spatial-splitting below. 
:::

There are various other methods to split the data using the predictor set. For example, @kennard1969computer describes an algorithm that attempts to sequentially select points to be uniformly distributed in the space defined by the splitting variables. Similarly, @vakayil2022data proposed a data splitting method called _twinning_, where a split of the data is sought that minimizes an aggregate distance between points in the training and testing set. Twinning uses the energy distance of @szekely2013energy, which measures the equality of distributions, to make the two data sets similar. Any variables can be used in the distance calculations.

`r r_comp("initial-data-splitting.html#sec-split-with-predictors")`

## Validation Sets  {#sec-three-way-split}

As previously discussed, validation sets are a separate partition of the data that function as a precursor for the testing set. It allows us to obtain performance estimates on our model(s) during the development cycle. These are commonly used in deep learning and other domains where the initial data sizes range from very large to massive. This additional partition is often created simultaneously with the training and testing sets. 

Validation sets serve the same purpose as resampling methods described in @sec-validation and we can consider them single resamples of the training data. Methods like bootstrapping or cross-validation use many alternative versions of the training set to compute performance statistics. When our data are extensive, multiple resamples are computationally expensive without significantly improving the precision of our estimates. 

Without loss of generalization, we will treat the validation set as a particular case of resampling where there is a single resample of the training set. This difference is not substantive and allows us to have a common framework for measuring model efficacy (before the testing set).

We’ll see validation sets discussed in @sec-validation and used in Sections TODO and TODO.

`r r_comp("initial-data-splitting.html#sec-three-way-split")`

## Multi-Level Data  {#sec-multilevel-splitting}

There are cases where the rows of a data set may not be statistically independent. This often occurs when multiple data points are collected on individual people, such as

* Patients in medical studies may have data collected over time. 
* Purchase histories of individual customers in a retail database. 

In these and other situations, the data within a person tend to be correlated. This means that the data from a specific person have a higher correlation than data between people. There are many names for this type of data: multi-level data, hierarchical data, longitudinal data, random effect data, profile data, functional data, and so on. In some cases, there are multiple layers of data hierarchies.  

Note that the variable that indicates the person is generally not a predictor; we would not be making predictions about individual people. People, in this example, are sampled from the broader population.  In this case, we are more concerned with the population rather than the individuals sampled from that population. 

This aspect of the data differentiates it from the neighborhood	predictor in the Ames data. The houses within each neighborhood may be more similar to one another than houses between neighborhoods. However, the difference is that we want to make predictions using information from these specific neighborhoods. Therefore, we will include neighborhood as a predictor since the individual neighborhoods are not a selected subset of those in the town; instead, the data contain all of the neighborhoods currently in the city.^[If you are familiar with non-Bayesian approaches to multi-level data, such as mixed effects models, this is the same as the difference between random and fixed effects. ]

[Chapter 9](https://bookdown.org/max/FES/profile-data.html) of @fes has a broad discussion on this topic with an illustrative example. 

When splitting multi-level data into a training and test set, the data are split at the subject level (as opposed to the row level). Each subject would have multiple rows in the data, and all of the subject’s rows must be allocated to either the training or the test set. In essence, we conduct random sampling on the subject identifiers to partition the data, and all of their data are added to either the training or test set. 

If stratification is required, the process becomes more complicated. Often, the outcome data can vary within a subject. To stratify to balance the outcome distribution, we need a way to quantify the outcome per subject. For regression models, the mean of each subject's outcome might be an excellent choice to summarize them. Analogously, the mode of categorical outcomes may suffice as an input into the stratification procedure.  

`r r_comp("initial-data-splitting.html#sec-multilevel-splitting")`

## Splitting Spatial Data {#sec-spatial-splitting}

Spatial data reflect information that corresponds to specific geographic locations, such as longitude and latitude values on the earth^[[Chapters -@sec-grid-search] and [-@sec-iterative-search] will also look at spatial effects unassociated with real geographies.]. Spatial data can have _autocorrelation_, with objects being more similar to closer objects than to objects further away. Tobler's First Law of Geography [@bjorholm2008extent] is: 

> "Everything is related to everything else, but near things are more related than distant things."

Think of an overhead color satellite image of a forest. Different types of foliage—or lack thereof—have different colors. If we focus on the color green, the distribution of "greeness" is not a random pattern of the x/y axes (random distribution would resemble static). In other words, pixels cannot be assumed to be independent of one another. 

Spatial autocorrelation will generally affect how we partition the data; we want to avoid having very similar data points in both the training and testing sets. 

```{R}
#| label: forested-sizes
#| echo: false

forested_n <- nrow(forested::forested)
forested_n_tr <- sum(forested_split_info$group == "training")
forested_n_te <- sum(forested_split_info$group == "testing")
forested_n_bf <- sum(forested_split_info$group == "buffer")
forested_p_bf <- round(forested_n_bf / forested_n * 100, 1)
forested_p_te <- round(forested_n_te / (forested_n_te + forested_n_tr) * 100, 1)

event_rates <- 
  forested_split_info %>% 
  group_by(group) %>%
  summarize(event_rate = mean(class == "Yes") * 100) %>% 
  filter(group != "buffer")
```

The example data that we’ll use is from the US Forest Service, who send experts to specific locations to make a determination about whether an area is forested. @forested state: 

> The U.S. Department of Agriculture, Forest Service, Forest Inventory and Analysis (FIA) Program provides all sorts of estimates of forest attributes for uses in research, legislation, and land management. The FIA uses a set of criteria to classify a plot of land as "forested" or "non-forested," and that classification is a central data point in many decision-making contexts. A small subset of plots in Washington State are sampled and assessed "on-the-ground" as forested or non-forested, but the FIA has access to remotely sensed data for all land in the state. 

See @Frescino2023 and @white2024smallareaestimationforest for similar data sets and background on the original problem. The Washington State data contains `r format(forested_n, big.mark = ",")` locations. The data are shown in @fig-forested where the points are colored by the outcome class (green representing forestation). This figure shows that locations across the state are not spread uniformly. @FIA2015 describes the sampling protocols and related issues. @finley2008bayesian and @may2024spatial show examples of how models have been applied to US forestry data in other geographic regions.  

The rate for forestation in these data is nearly even at `r round(mean(forested::forested$forested == "Yes") * 100, 1)`%.  


::: {#fig-forested}

::: {.figure-content}

```{r}
#| echo: false
#| renderings: [light, dark]

forested_labs <-
  forested::forested %>%
  mutate(class_col = if_else(forested == "Yes", "#218239", "#d4ad42"))

forested_labs <-
  forested::forested %>%
  mutate(class_col = if_else(forested == "Yes", "#218239", "#d4ad42"))

lt_split <- 
  leaflet() %>%
  addProviderTiles(providers$CartoDB.PositronNoLabels)

dk_split <- 
  leaflet() |> 
  addProviderTiles(providers$CartoDB.DarkMatterNoLabels)

lt_split %>%
  addCircles(
    data = forested_labs,
    lng = ~lon,
    lat = ~lat,
    color = ~class_col,
    fillColor = ~class_col,
    fill = TRUE,
    opacity = .1,
    fillOpacity = 1,
    radius = 1500
  ) %>%
  setView(lng = -120.3945, lat = 47.33047, zoom = 7)

dk_split %>%
  addCircles(
    data = forested_labs,
    lng = ~lon,
    lat = ~lat,
    color = ~class_col,
    fillColor = ~class_col,
    fill = TRUE,
    opacity = .1,
    fillOpacity = 1,
    radius = 1500
  ) %>%
  setView(lng = -120.3945, lat = 47.33047, zoom = 7)
```

:::

Area locations in Washington State sampled for determining forestation. Green points reflect locations that were determined to be forested.

:::


How should we split these data? A simple random sample is inadequate; we need to ensure that adjacent/nearby locations are not allocated to the training and testing sets. There are a few ways to compensate for this issue. 

First, we can group the data into local areas and iterate by removing one or more group at a time. If there is no rational, objective process for creating groups, we can use clustering methods or create a regular grid across the data range [@Roberts2017]. For example, @fig-spatial-block(a) shows a collection of data grouped by a grid of hexagons. We could randomly sample some groups, often referred to as _blocks_, to allocate to the testing set. 

However, notice that some points, while in different hexagonal blocks, are still close to one another. _Buffering_ [@brenning2005spatial;@le2014spatial] is a method that excludes data around a specific data point or group. Panel (b) shows a buffer for one block. If this region was selected for the testing set, we would discard the points that are within the buffer (but are in different blocks) from being allocated to the training set. 

::: {#fig-spatial-block}

::: {.figure-content}


```{r}
#| echo: false
#| renderings: [light, dark]
#| fig-height: 7
#| fig-width: 7
#| out-width: 60%

p_hex <-
  hex_data %>%
  ggplot() +
  geom_sf(data = sel_grid, alpha = 1 / 2) +
  geom_sf(aes(col = hex), show.legend = FALSE, cex = 3, alpha = 2 / 4) +
  theme_void() +
  ggtitle("(a) Hexagonal blocks")

p_buff <-
  hex_data %>%
  ggplot() +
  geom_sf(data = sel_grid, alpha = 1 / 2) +
  geom_sf(aes(col = hex), show.legend = FALSE, cex = 3, alpha = 2 / 4) +
  geom_sf(data = sel_buff, fill = "blue", alpha = 1 / 10) +
  theme_void() +
  ggtitle("(b) Buffered")

(p_hex +
  scale_color_brewer(palette = "Dark2") +
  theme_transparent()) /
  (p_buff +
    scale_color_brewer(palette = "Dark2") +
    theme_transparent())

(p_hex +
  scale_color_brewer(palette = "Set2") +
  dk_thm) /
  (p_buff +
    scale_color_brewer(palette = "Set2") +
    dk_thm)
``` 
 
:::

A plot of 65 spatial data points where (a) shows how they can be blocked into one of seven hexagonal regions. Panel (b) shows the same data with a circular buffer around the center of a single block.

:::

@Pohjankukka2017, @lyons2018comparison, @meyer2019importance @karasiak2022spatial, and @mahoney2023assessing have good overviews of the importance of countering spatial autocorrelation and appropriate sampling methods. 

For our example, we used blocking and buffering to allocate roughly 20% of the forestry data to the testing set. First, the locations were allocated to a 25 x 25 grid of hexagons across the state. After this, a buffer was created around the hexagon such that outside points within the buffer would be excluded from being used in the training or testing sets. Finally, roughly 20% of the locations were selected for the test set by moving through the space and selecting hexagons sequentially. @fig-forested-split shows the results of this process. 

In the end, a training set of `r format(forested_n_tr, big.mark = ",")` locations and a test set of `r format(forested_n_te, big.mark = ",")` locations (roughly a `r forested_p_te`% holdout) were assembled. The buffer contained `r format(forested_n_bf, big.mark = ",")` locations which was about `r forested_p_bf`% of the original pool of data points. The event rates were similar between the data sets: `r round(event_rates$event_rate[event_rates$group == "training"], 1)`% for the training set and `r round(event_rates$event_rate[event_rates$group == "testing"], 1)`% for the testing set.

::: {#fig-forested-split}

::: {.figure-content}

```{r}
#| renderings: [light, dark]
#| echo: false

lt_split <- 
  leaflet() %>%
  addProviderTiles(providers$CartoDB.PositronNoLabels)

dk_split <- 
  leaflet() |> 
  addProviderTiles(providers$CartoDB.DarkMatterNoLabels)

lt_split %>%
  addCircles(
    data = forested_split_info,
    lng = ~longitude,
    lat = ~latitude,
    color = ~group_col,
    fillColor = ~group_col,
    fill = TRUE,
    opacity = .01,
    fillOpacity = 1 / 2,
    radius = 1500,
    popup = htmltools::htmlEscape(forested_split_info$group)
  ) %>%
  setView(lng = -120.3945, lat = 47.33047, zoom = 7)

dk_split %>%
  addCircles(
    data = forested_split_info,
    lng = ~longitude,
    lat = ~latitude,
    color = ~group_col,
    fillColor = ~group_col,
    fill = TRUE,
    opacity = .01,
    fillOpacity = 1 / 2,
    radius = 1500,
    popup = htmltools::htmlEscape(forested_split_info$group)
  ) %>%
  setView(lng = -120.3945, lat = 47.33047, zoom = 7)
```

:::

A split of the forestation data into training (magenta) and testing (purple) sets. Some locations, in black, correspond to the buffer and are not allocated to either set. Clicking on individual points will show their allocation results.

:::

From this map, we can see that the hexagons selected for the testing set cover the geographic area well. While the training set dominates some spaces, this should be sufficient to reduce the effects of spatial autocorrelation on how we measure model performance. 

We will revisit these data in @sec-spatial-resampling to demonstrate how to _resample_ them appropriately. 

`r r_comp("initial-data-splitting.html#sec-spatial-splitting")`

## Chapter References {.unnumbered}

