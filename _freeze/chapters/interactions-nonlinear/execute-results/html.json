{
  "hash": "273ea4933304b064a9546201da653b2e",
  "result": {
    "engine": "knitr",
    "markdown": "---\nknitr:\n  opts_chunk:\n    cache.path: \"../_cache/interactions-nonlinear/\"\n---\n\n\n# Interactions and Nonlinear Features {#sec-interactions-nonlinear}\n\n\n\n\n\n\n\nWe saw in previous chapters that preprocessing is necessary because models can be sensitive to specific predictor characteristics.  For instance, some models:\n\n- are sensitive to highly correlated predictors.\n- cannot consume qualitative predictors as non-numeric data.\n- cannot be built when predictors have no or near-zero variability.\n\nPreprocessing methods address aspects of the predictors that place them in a form so that models can be built.  This is _what the model needs_ to function.\n\nWhile preprocessing techniques allow models to be built, they do not necessarily transform them in ways that help the model to identify predictive relationships with the outcome.  This is the fundamental concept of **feature engineering** which addresses the question:  what can we do to make it easier for the model to understand and predict the outcome.\n\n In this chapter we will discuss techniques that address this question.   For example, if the relationship between a predictor is nonlinear, how can we represent that predictor so that the relationship can be modeled?  Or if two predictors work in conjunction with each other, then how can this information be engineered for a model?  While feature engineering is not necessary for models to be built, it contains a crucial set of tools for improving model performance.\n\nLet’s look at a simple example. Occasionally, predictor pairs work better in unison rather than as main effects. For example, consider the data in @fig-two-class-corr(a), where two predictors are: \n\n- strictly positive,\n- significantly right-skewed, and\n- highly correlated. \n\nIn the predictors' original form, there is a significant overlap between the two classes of samples.  However, when the ratio of the predictors is used, the newly derived predictor better discriminates between classes (shown in @fig-two-class-corr(b)). While not a general rule, the three data characteristics above suggest that the modeler attempts to form ratios from two or more predictors ^[Alternatively, PCA after skewness-correcting transformations may be another good option.].\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Panel (a): two highly correlated, right-skewed predictors with two classes. Panel (b): sepration of classes using $log(A/B)$.](../figures/fig-two-class-corr-1.svg){#fig-two-class-corr fig-align='center' fig-alt='Panel (a): two highly correlated, right-skewed predictors with two classes. Panel (b): sepration of classes using $log(A/B)$.' width=80%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\nIt is essential to understand that these _data_ require transformation. We can put the original predictors into a model as-is. The model won’t produce an error but won’t have good predictive performance. We can induce a separation of the classes when a joint feature is used. \n\nThis aspect of feature engineering depends on the data set so it is difficult to enumerate all possible techniques. In this chapter, we’ll describe a few commonly used methods: splines, interactions, and discretization (a.k.a. binning). \n\n## Interactions {#sec-interactions}\n\nWhen building models for prediction, the majority of variation in the outcome is generally explained by the cumulative effect of the important individual predictors.  For many problems, additional variation in the response can be explained by the effect of two or more predictors working in conjunction with each other.  \n\nThe healthcare industry has long understood the concept of interactions among drugs for treating specific diseases [@singh2017suppressive, @mokhtari2017combination, and @altorki2021neoadjuvant].  As an example of an interaction, consider treatment for the disease non-small cell lung cancer (NSCLC).  In a recent study, patients with an advanced stage of NSCLC with an EGFR mutation were given either osimertinib alone or osimertinib in combination with traditional chemotherapy [@NEJMoa2306434].   Patients taking the combination treatment had a significantly longer progression-free survival time than patients taking osmertinib alone.  Hence, the interaction of the treatments is more effective than the single treatment.  To summarize, two (or more) predictors interact if their combined impact is different (less or greater) than what would be expected from the added impact of each predictor alone.\n\nWe’ve already encountered an example of an interaction in @sec-eda-whole-game where the relationship between delivery time and the time of order differed across days of the week. This trend is reproduced in @fig-delivery-no-interact(a). The telltale sign of the interaction is that the trendlines are not parallel with one another; they have different rates of increase and cross. \n\nHow would this plot change if there was no interaction between the order time and day? To illustrate, we estimated trendlines in a way that coerced the nonlinear trend for order time to be the same.  @fig-delivery-no-interact(b) shows the results: parallel lines for each day of the week. \n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Delivery times versus the time of the order, colored by the day of the week. (a) A duplicate of a panel from @fig-delivery-predictors. (b) The same data with trendlines where the underlying model did _not_ allow an interaction between the delivery day and hour.](../figures/fig-delivery-no-interact-1.svg){#fig-delivery-no-interact fig-align='center' width=85%}\n:::\n:::\n\n\nThis example demonstrates an interaction between a numeric predictor (hour of order) and a categorical predictor (day of the week). Interactions can also occur between two (or more) numeric or categorical predictors. Using the delivery data, let’s examine potential interactions solely between categorical predictor columns. \n\nFor regression problems, one visualization technique is to compute the means (or medians) of the outcome for all combinations of variables and then plot these means in a manner similar to the previous figure. Let’s look at the 27 predictors columns for whether a specific item was included in the order. The original data is a count, but the data are mostly zero or one. We’ll look at two variables at a time and plot the four combinations of whether the item was ordered at all (versus not at all). @fig-delivery-items shows two potential sets of interactions. The x-axis indicates whether Item 1 was in the order or not. The y-axis is the mean delivery time with 90% confidence intervals^[These were computed using the bootstrap, as in @sec-eda-whole-game.].\n\nThe left panel shows the joint effect of items 1 and 9. The lines connecting the means are parallel. This indicates that each of these two predictors affects the outcome independently of one another. Specifically, the incremental change in delivery time is the same when item 9 is or is not included with item 1.  The right panel has means for items 1 and 10. The mean delivery times are very similar when neither is contained in the order. Also, when only one of the two items is in the order, the average time is similarly small. However, when both are included, the delivery time becomes much larger.  This means that you cannot consider the effect or either item 1 or 10 alone; their effect on the outcome occurs jointly. \n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Interaction examples with two categorical predictors. Items 1 and 9 (left panel) do not interaction, while items 1 and 10 appear to have a strong  interaction (right panel).](../figures/fig-delivery-items-1.svg){#fig-delivery-items fig-align='center' width=70%}\n:::\n:::\n\n\nAs a third example, interactions may occur between continuous predictors. It can be difficult to discover the interaction via visualization for two numeric predictors without converting one of the predictors to categorical bins. To illustrate the _concept_ of an interaction between two numeric predictors, $x_1$ and $x_2$, let’s use a simple linear equation:\n\n$$ \ny = \\beta_0 + \\beta_{1}x_1 + \\beta_{2}x_2 + \\beta_{3}x_{1}x_{2} + \\epsilon\n$$ {#eq-two-way-int}\n\nThe $\\beta$ coefficients represent the overall average response ($\\beta_0$), the average rate of change for each individual predictor ($\\beta_1$ and $\\beta_2$), and the incremental rate of change due to the combined effect of $x_1$ and $x_2$ ($\\beta_3$) that goes beyond what $x_1$ and $x_2$ can explain alone.  The parameters for this equation can be estimated using a technique such as ordinary least squares (REF).  The sign and magnitude of $\\beta_3$ indicate how and the extent to which the two predictors interact:   \n\n - When $\\beta_3$ is positive, the interaction is _synergistic_ since the response increases beyond the effect of either predictor alone.  \n - Alternatively, when $\\beta_3$ is negative, the interaction is _antagonistic_ since the response decreases beyond the effect of either predictor alone.  \n - A third scenario is when $\\beta_3$ is essentially zero.  In this case, there is no interaction between the predictors and the relationship between the predictors is _additive_. \n - Finally, for some data sets, we may find that neither predictor is important individually (i.e., $\\beta_1$ and $\\beta_2$ are zero).  However, the coefficient on the interaction term is not zero.  Because this case occurs very infrequently, it is called _atypical_. \n \nTo understand this better, @fig-interaction-contours shows a contour plot of a predicted linear regression model with various combinations of the model slope parameters. The two predictors are centered at zero with values ranging within $x_j \\pm 4.0$). The default setting shows a moderate synergistic interaction effect since all of the $\\beta_j = 1.0$). In the plot, darker values indicate smaller predicted values.   \n\n::: {#fig-interaction-contours}\n\n::: {.figure-content}\n\n```{shinylive-r}\n#| label: fig-interaction-contours\n#| viewerHeight: 600\n#| standalone: true\n\nlibrary(shiny)\nlibrary(ggplot2)\nlibrary(bslib)\nlibrary(viridis)\n\nsource(\"https://raw.githubusercontent.com/aml4td/website/main/R/shiny-setup.R\")\nsource(\"https://raw.githubusercontent.com/aml4td/website/main/R/shiny-interaction-contours.R\")\n\napp\n```\n:::\n\nPrediction contours for a linear regression model with @eq-two-way-int with $\\beta_0 = 0$. Darker values indicate smaller predictions. \n\n:::\n\nInteraction effects between predictors are sometimes confused with correlation between predictors. They are not the same thing. Interactions are defined by their relationship to the outcome while between-predictors correlations are unrelated to it. An interaction could occur independent of the amount of correlation between predictors. \n\n### How Likely Are Interactions? {#sec-interactions-princples} \n\nWithin the context of statistical experimental design, @hamada1992analysis discuss some probabilistic aspects of predictor importance. The effect sparsity principle is that there are often few predictors that are relevant for predicting the outcome. Similarly, the effect hierarchy principle states that “main effects” (i.e. a feature involving only predictor) are more likely to occur than interactions. Also, as more predictors are involved in the interaction, the less likely they become. Finally, the heredity principle conjectures that if an interaction is important, it is very likely that the corresponding main effects are likely too. @chipman1996bayesian further expands this principle. \n\nThe original context of these principles was envisioned for screening large numbers of predictors in experimental designs; they are still very relevant for the analysis of tabular data. \n\n### Detecting Interactions {#sec-interactions-detection} \n\nAn ideal scenario would be that we would know which predictors interact before modeling the data.  If this would be the case, then these terms could be included in a model.  This would be ideal because the model could more easily find the relationship with the response, thus leading to better predictive performance.  Unfortunately, knowledge of which predictors interact is usually not available prior to initiating the modeling process.  \n\nIf meaningful interactions are unknown before modeling, can models still discover and utilize these potentially important features? Recent studies using various advanced modeling techniques have shown that some methods can inherently detect interactions. For example, tree-based models [@elith2008working], random forests [@garcia2009evaluating], boosted trees [@lampa2014identification], and support vector machines [@chen2008support] are effective at uncovering them. \n\nIf modern modeling techniques can naturally find and utilize interactions, then why is it necessary to spend any time uncovering these relationships?  The first reason is to improve interpretability.  Recall the trade-off between prediction and interpretation that was discussed in Section TODO.  More complex models are less interpretable and generally more predictive, while simpler models are more interpretable and less predictive.   Therefore, if we know which interaction(s) are important, we can include these in a simpler model to enable a better interpretation.  A second reason to spend time uncovering interactions is to help improve the predictive performance of models.  \n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n \nWhat should we do if we have a candidate set of interactions?  If we are using a more formal statistical model, such as linear or logistic regression, the traditional tool for evaluating whether additional model terms in a set of nested models are worth including is the conventional analysis of variance (ANOVA). This uses the statistical likelihood value as the objective function, which is equivalent to comparing the RMSE values between models for linear regression ^[It so happens that the Gaussian likelihood function is equivalent to the sums of squared errors (SSE). That, in turn, is equivalent to the RMSE. That simplification does not automatically occur for other probability distributions.]. The error reduction and how many additional terms are responsible for the improvement are computed. Using these results and some probability assumptions about the data, we can formally test the null hypothesis that the additional parameters all have coefficient values of zero. \n\nLooking at the delivery data, our model in @sec-model-development-whole-game included a single set of interactions (e.g., hour-by-day). What if we included one more interaction: item 1 $\\times$ item 10? @tbl-interaction-anova shows the ANOVA results. The RMSE _computed on the training set_ is listed in the first and second columns. The reduction by including this additional model term is 0.18 (decimal minutes). Assuming normality of the model residuals, the p-value for this test is exceedingly small. This indicates that there is no evidence that this parameter is truly zero. In other words, there is strong evidence that the inclusion of the interaction helps explain the response.  This statistical difference may not make much of a practical difference. However, machine learning models often behave like \"a game of inches\" where every small improvement adds up to an overall improvement that matters. \n\n\n::: {#tbl-interaction-anova .cell layout-align=\"center\" tbl-cap='ANOVA table and validation set statistics for three models with different interaction sets.'}\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"hhmpqowhwm\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#hhmpqowhwm table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#hhmpqowhwm thead, #hhmpqowhwm tbody, #hhmpqowhwm tfoot, #hhmpqowhwm tr, #hhmpqowhwm td, #hhmpqowhwm th {\n  border-style: none;\n}\n\n#hhmpqowhwm p {\n  margin: 0;\n  padding: 0;\n}\n\n#hhmpqowhwm .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#hhmpqowhwm .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#hhmpqowhwm .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#hhmpqowhwm .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#hhmpqowhwm .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#hhmpqowhwm .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#hhmpqowhwm .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#hhmpqowhwm .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#hhmpqowhwm .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#hhmpqowhwm .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#hhmpqowhwm .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#hhmpqowhwm .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#hhmpqowhwm .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#hhmpqowhwm .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#hhmpqowhwm .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#hhmpqowhwm .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#hhmpqowhwm .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#hhmpqowhwm .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#hhmpqowhwm .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#hhmpqowhwm .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#hhmpqowhwm .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#hhmpqowhwm .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#hhmpqowhwm .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#hhmpqowhwm .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#hhmpqowhwm .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#hhmpqowhwm .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#hhmpqowhwm .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#hhmpqowhwm .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#hhmpqowhwm .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#hhmpqowhwm .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#hhmpqowhwm .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#hhmpqowhwm .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#hhmpqowhwm .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#hhmpqowhwm .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#hhmpqowhwm .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#hhmpqowhwm .gt_left {\n  text-align: left;\n}\n\n#hhmpqowhwm .gt_center {\n  text-align: center;\n}\n\n#hhmpqowhwm .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#hhmpqowhwm .gt_font_normal {\n  font-weight: normal;\n}\n\n#hhmpqowhwm .gt_font_bold {\n  font-weight: bold;\n}\n\n#hhmpqowhwm .gt_font_italic {\n  font-style: italic;\n}\n\n#hhmpqowhwm .gt_super {\n  font-size: 65%;\n}\n\n#hhmpqowhwm .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#hhmpqowhwm .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#hhmpqowhwm .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#hhmpqowhwm .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#hhmpqowhwm .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#hhmpqowhwm .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#hhmpqowhwm .gt_indent_5 {\n  text-indent: 25px;\n}\n</style>\n<table class=\"gt_table\" style=\"table-layout: fixed;\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <colgroup>\n    <col style=\"width:100px;\"/>\n    <col/>\n    <col/>\n    <col/>\n    <col style=\"width:80px;\"/>\n    <col/>\n    <col/>\n  </colgroup>\n  <thead>\n    <tr class=\"gt_col_headings gt_spanner_row\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"2\" colspan=\"1\" style=\"border-top-width: 1.8px; border-top-style: solid; border-top-color: #000000; border-bottom-width: 1.8px; border-bottom-style: solid; border-bottom-color: #000000;\" scope=\"col\" id=\"Interactions\">Interactions</th>\n      <th class=\"gt_center gt_columns_top_border gt_column_spanner_outer\" rowspan=\"1\" colspan=\"2\" scope=\"colgroup\" id=\"Training Set RMSE\">\n        <span class=\"gt_column_spanner\">Training Set RMSE</span>\n      </th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"2\" colspan=\"1\" style=\"border-top-width: 1.8px; border-top-style: solid; border-top-color: #000000; border-bottom-width: 1.8px; border-bottom-style: solid; border-bottom-color: #000000;\" scope=\"col\" id=\"Deg. Free.\">Deg. Free.</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"2\" colspan=\"1\" style=\"border-top-width: 1.8px; border-top-style: solid; border-top-color: #000000; border-bottom-width: 1.8px; border-bottom-style: solid; border-bottom-color: #000000;\" scope=\"col\" id=\"p-Value\">p-Value</th>\n      <th class=\"gt_center gt_columns_top_border gt_column_spanner_outer\" rowspan=\"1\" colspan=\"2\" scope=\"colgroup\" id=\"Validation Set\">\n        <span class=\"gt_column_spanner\">Validation Set</span>\n      </th>\n    </tr>\n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" style=\"border-top-width: 1.8px; border-top-style: solid; border-top-color: #000000; border-bottom-width: 1.8px; border-bottom-style: solid; border-bottom-color: #000000;\" scope=\"col\" id=\"Decimal\">Decimal</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" style=\"border-top-width: 1.8px; border-top-style: solid; border-top-color: #000000; border-bottom-width: 1.8px; border-bottom-style: solid; border-bottom-color: #000000;\" scope=\"col\" id=\"Time\">Time</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" style=\"border-top-width: 1.8px; border-top-style: solid; border-top-color: #000000; border-bottom-width: 1.8px; border-bottom-style: solid; border-bottom-color: #000000;\" scope=\"col\" id=\"RMSE\">RMSE</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" style=\"border-top-width: 1.8px; border-top-style: solid; border-top-color: #000000; border-bottom-width: 1.8px; border-bottom-style: solid; border-bottom-color: #000000;\" scope=\"col\" id=\"MAE\">MAE</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"Interactions\" class=\"gt_row gt_left\">Hour x Day</td>\n<td headers=\"Decimal\" class=\"gt_row gt_right\">2.30</td>\n<td headers=\"Time\" class=\"gt_row gt_left\">(2m, 17s)</td>\n<td headers=\"Deg. Free.\" class=\"gt_row gt_right\">5,890</td>\n<td headers=\"p-Value\" class=\"gt_row gt_left\"><div data-qmd=\"\"><div class='gt_from_md'></div></div></td>\n<td headers=\"RMSE\" class=\"gt_row gt_right\">2.29</td>\n<td headers=\"MAE\" class=\"gt_row gt_right\">1.61</td></tr>\n    <tr><td headers=\"Interactions\" class=\"gt_row gt_left\">Add One Item Interaction</td>\n<td headers=\"Decimal\" class=\"gt_row gt_right\">2.12</td>\n<td headers=\"Time\" class=\"gt_row gt_left\">(2m, 6s)</td>\n<td headers=\"Deg. Free.\" class=\"gt_row gt_right\">5,889</td>\n<td headers=\"p-Value\" class=\"gt_row gt_left\"><div data-qmd=\"10<sup>-219.8</sup>\"><div class='gt_from_md'><p>10<sup>-219.8</sup></p>\n</div></div></td>\n<td headers=\"RMSE\" class=\"gt_row gt_right\">2.10</td>\n<td headers=\"MAE\" class=\"gt_row gt_right\">1.56</td></tr>\n    <tr><td headers=\"Interactions\" class=\"gt_row gt_left\" style=\"border-bottom-width: 1.8px; border-bottom-style: solid; border-bottom-color: #000000;\">Add All Item Interactions</td>\n<td headers=\"Decimal\" class=\"gt_row gt_right\" style=\"border-bottom-width: 1.8px; border-bottom-style: solid; border-bottom-color: #000000;\">2.06</td>\n<td headers=\"Time\" class=\"gt_row gt_left\" style=\"border-bottom-width: 1.8px; border-bottom-style: solid; border-bottom-color: #000000;\">(2m, 3s)</td>\n<td headers=\"Deg. Free.\" class=\"gt_row gt_right\" style=\"border-bottom-width: 1.8px; border-bottom-style: solid; border-bottom-color: #000000;\">5,539</td>\n<td headers=\"p-Value\" class=\"gt_row gt_left\" style=\"border-bottom-width: 1.8px; border-bottom-style: solid; border-bottom-color: #000000;\"><div data-qmd=\"10<sup>-18.4</sup>\"><div class='gt_from_md'><p>10<sup>-18.4</sup></p>\n</div></div></td>\n<td headers=\"RMSE\" class=\"gt_row gt_right\" style=\"border-bottom-width: 1.8px; border-bottom-style: solid; border-bottom-color: #000000;\">2.13</td>\n<td headers=\"MAE\" class=\"gt_row gt_right\" style=\"border-bottom-width: 1.8px; border-bottom-style: solid; border-bottom-color: #000000;\">1.60</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n\n:::\n:::\n\n\nWhat about the other two-way interactions between the other item predictors? Since the training set is fairly large (compared to the current number of model parameters), it is feasible to include the remaining 350 pairwise interactions and use the ANOVA method to validate this choice. These results are contained in the third row of @tbl-interaction-anova where the RMSE dropped further by 0.05 minutes. The p-value is also very small, indicating that there is no evidence that _all_ of the  350 parameter estimates are zero. More extensive testing would be required to determine which actually are zero. This can be tedious and a potentially dangerous \"fishing expedition\" that could result in serious bias creeping into the modeling process. \n\nOne problem with the ANOVA method is that it calculates the model error using the training set, which we know may not indicate what would occur with previously unseen data. In fact, it is well known that, for linear regression via ordinary least squares estimation, it is impossible for the training set error to ever increase when adding new model terms. Therefore, was the drop in RMSE when all interactions were included due to this fact?  Or was it due to other important interactions that were included?  To understand this we can turn to the validation set to provide confirmation.  You can see this in @tbl-interaction-anova where the validation set RMSE and MAE values are included. Note that, when the large set of interactions were added, these metrics both _increase_ in the validation set, a result contrary to what the ANOVA results tell us.  \n\nThe observed and predicted visualizations for each model in @tbl-interaction-anova are shown in @fig-lin-reg-interactions. Adding the additional interaction yielded a slight numerical improvement. However, the visualization in the middle panel shows fewer very large residuals. The figure also shows the model results that include the full set of  351 two-way interactions; this panel shows no significant reduction in large residuals, further casting doubt on using the entire set. \n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Validation set predicted vs. observed delivery times for linear regression models with and without additional interactions.](../figures/fig-lin-reg-interactions-1.svg){#fig-lin-reg-interactions fig-align='center' width=90%}\n:::\n:::\n\n\nSo far, we have used visualizations to unearth potential interactions. This can be an effective strategy when the number of potential interactions is large, but the visual nature of this process is subjective. There are some specialized quantitative tools for identifying interactions. For example, @lim2015learning used regularized generalized linear models (sections TODO) to estimate all possible two-way interactions and use a penalization method to determine which should be retained. @miller1984selection and @fes ([Section 7.4.3](https://bookdown.org/max/FES/approaches-when-complete-enumeration-is-practically-impossible.html#the-feasible-solution-algorithm)) describe the feasible solution algorithm, an iterative search method for interaction discovery. Another, which we will now describe in more detail, is Friedman's H-statistic [@friedman2008predictive]. \n\nWe can estimate the joint effect of a set of predictors on the outcome as well as the effect of individual predictors. If we thought that only main effects and two-factor interactions were possible, we could factor out the individual effects from the joint effect. The leftover predictive ability would then be due to interactions. Consider the linear model in @eq-two-way-int. The joint effect would include all possible model terms associated with a predictor. We can also create main effects too: \n\n\\begin{align}\nf(x_1, x_2) &= \\beta_{1}x_1 + \\beta_{2}x_2 + \\beta_{3}x_{1}x_{2} \\notag \\\\\nf(x_1) &= \\beta_{1}x_1  \\notag \\\\\nf(x_2) &= \\beta_{2}x_2 \\notag \n\\end{align}\n\nTo isolate the potential interaction effect: \n\n$$\nf(x_1\\times x_2) = f(x_1, x_2) - f(x_1) - f(x_2) = \\beta_{3}x_{1}x_{2}\n$$ {#eq-int-isolate}\n\nThis shows that, for this situation, we can isolate the effect of an interaction by removing any other systematic effects in the data^[This approach works because the model in @eq-two-way-int is _capable_ of estimating the interaction. There are many models that do not have the ability to measure interaction effects, and, for this case, it would be impossible to isolate the interaction term(s). However, tree-based ensembles are good at estimating interactions, as are other complex black-box models such as neural networks and support vector machines. The tools described below only work with \"interaction capable\" models.]. @eq-int-isolate is based on a simple parametric linear model. For models with more complex prediction equations, we can’t analytically pick out which model parameters should be used to investigate potential interactions. \n\nHowever, for any model, the joint and marginal effects can be quantified using _partial dependence profiles_ (PDP) (@molnar2020interpretable, [Section 8.1](https://christophm.github.io/interpretable-ml-book/pdp.html)). First, we determine a sequence of values covering the observed range of the predictor(s) of interest. Then we randomly sample a data point, perhaps from the training set, and over-ride the value of the predictor of interest with values from the grid. This produces a prediction profile over the grid. We can repeat this process many times to approximate $f(\\cdot)$ by averaging the multiple prediction values for each grid point. \n\n@fig-ensemble-pdp visualizes the PDP data derived from using the emsembles of regression trees for $f(hour)$, $f(day)$, and $f(hour, day)$. The first panel shows the random realizations of the relationship between delivery time and order hour from 1,000 randomly sampled rows of the training set. The results are unsurprising; we can see a similarity between these results and the initial visualizations in @fig-delivery-predictors. The single trend line in panel (b) is the average of these profiles for each value of the predictor (delivery hour). There appears to be, on average, a nonlinear effect of the delivery hour. The day of the week is an informative predictor and the _joint effect_ profile in panel (d) shows that its effect induces different patterns in the delivery hour. If this were not the case, the patterns in panels (b) and (c) would, when combined, approximate the pattern in panel (d).  \n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Partial dependence profiles for the food delivery hour and day, derived for the tree-based ensemble. Panel (a) shows the individual grid predictions from 1,000 randomly sampled points in the training set. The other panels show the average trends.](../figures/fig-ensemble-pdp-1.svg){#fig-ensemble-pdp fig-align='center' width=70%}\n:::\n:::\n\n\nFriedman’s H-statistic can quantify the effect of interaction terms using partial dependence profiles. When investigating two-factor interactions between predictors $j$ and $j'$, the statistic is \n\n$$\nH^2_{jj'}=\\frac{\\sum_\\limits{i=1}^B\\left[\\hat{f}(x_{ij},x_{ij'})-\\hat{f}(x_{ij})-\\hat{f}(x_{ij'})\\right]}{ \\sum_\\limits{i=1}^B\\hat{f}^2(x_{ij}, x_{ij'})}\n$$\n\nwhere the $\\hat{f}(x_{ij})$ term represents the partial dependence profile for predictor $j$ for sample point $i$ along the grid for that predictor and $B$ is the number of traning set samples.  The denominator captures the total joint effect of predictors $j$ and $j'$ so that $H^2$ can be interpreted as the fraction of the joint effect explained by the potential interaction. \n\nFor a set of $p$ predictors, we could compute all $p(p-1)/2$ pairwise interactions and rank potential interactions by their statistic values. This can become computationally intractable at some point. One potential shortcut suggested by the heredity principle is to quantify the importance of the $p$ predictors and look at all pairwise combinations of the $p^*$ most important values.  For $p^* = 10$, @fig-hstats-interaction shows the top five interactions detected by this procedure. We’ve already visually identified the hour $\\times$ day interaction, so seeing this in the rankings is comforting. However, another large interaction effect corresponds to the variables for items #1 and #10. Discovering this led us to visually confirm the effect back in @fig-delivery-items. \n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![$H^2$ statistics for the top ten pairwise interaction terms.](../figures/fig-hstats-interaction-1.svg){#fig-hstats-interaction fig-align='center' width=60%}\n:::\n:::\n\n\nNote that the _overall_ importance of the features are being quantified. From this analysis alone, we are not informed that the relationships between the hour and distance predictors and the outcome are nonlinear. It also doesn’t give any sense of the direction of the interaction (e.g., synergistic or antagonistic). We suggest using this tool early in the exploratory data analysis process to help focus visualizations on specific variables to understand how they relate to the outcome and other predictors. \n\nThere is a version of the statistic that can compute how much a specific predictor is interacting with _any other_ predictor. It is also possible to compute a statistical test to understand if the H statistic is different than zero. In our opinion, it is more helpful to use these values as diagnostics rather than the significant/insignificant thinking that often accompanies formal statistical hypothesis testing results.  \n\n@inglis2022visualizing discuss weak spots in the usage of the H-statistic, notably that correlated predictors can cause abnormally large values. This is an issue inherited from the use of partial dependence profiles [@apley2020]. \n\nAlternatively, @greenwell2018simple measures the potential for variables to interact by assessing the \"flatness\" over regions of the partial dependence profile. The importance of a predictor, or a pair of predictors, is determined by computing the standard deviation of the flatness scores over regions. For example, @fig-delivery-items shows a flat profile for the item 1 $\\times$ item 9 interaction while the item 1 $\\times$ item 10 interaction has different ranges of means across values of item 1. @fig-flat-interaction shows ten interactions with the largest flatness importance statistics. As with the $H^2$ results, the hour-by-day interaction. The two top ten lists have 6  other interactions in common. \n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Importance statistics for the top ten pairwise interaction terms.](../figures/fig-flat-interaction-1.svg){#fig-flat-interaction fig-align='center' width=60%}\n:::\n:::\n\n\nOther alternatives can be found in @hooker2004discovering, @herbinger2022repid, and @oh2022predictive.\n\nThe two PDP approaches we have described apply to any model capable of estimating interactions. There are also model-specific procedures for describing which joint effects are driving the model (if any). One method useful for tree-based models is understanding if two predictors are used in consecutive splits in the data. For example, @fig-reg-tree showed a shallow regression tree for the delivery time data. The terminal nodes had splits with orderings $\\text{hour}\\rightarrow\\text{hour}$ and $\\text{hour}\\rightarrow\\text{day} \\rightarrow\\text{distance}$ (twice). This implies that these three predictors have a higher potential to be involved in interactions with one another. \n\n@kapelner2013bartmachine describe an algorithm that counts how many times pairs of variables are used in consecutive splits in a tree. They demonstrate this process with Bayesian Adaptive Regression Trees (BART, Section TODO) which creates an ensemble of fairly shallow trees. @fig-bart-interaction shows the top ten pairwise interactions produced using this technique. Note that the BART implementation split categorical predictors via single categories. For the delivery data, this means that the tree would split on a specific day of the week (.i.e., Friday or not) instead of splitting all of the categories at once. This makes a comparison between the other two methods difficult. However, it can be seen that the hour $\\times$ day interaction has shown to be very important in all three methods. \n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![BART model statistics identifying interactions by how often they occur in the tree rules.](../figures/fig-bart-interaction-1.svg){#fig-bart-interaction fig-align='center' width=60%}\n:::\n:::\n\n\nCaution should be exercised with this method. First, some tree ensembles randomly sample a subset of predictors for each split (commonly known as $m_{try}$). For example, if $m_{try} = 4$, a random set of four predictors are the only ones considered for that split point. This deliberately coerces non-informative splits; we are not using the best possible predictors in a split. This can dilute the effectiveness of counting predictors in successive splits. Second, as discussed in @sec-classification-trees, many tree-based splitting procedures disadvantage predictors with fewer unique values. For example, in the delivery data, the distance and hour predictors are more likely to be chosen for splitting than the item predictors _even if they are equally informative_.  There are splitting procedures that correct for this bias, but users should be aware of the potential impartiality. \n\nThe H-statistic and its alternatives can be an incredibly valuable tool for learning about the data early on as well as suggesting new features that should be included in the model. They are, however, computationally expensive. \n\n## Polynomial Basis Expansions {#sec-polynomials}\n\nIn the food delivery data, we have thoroughly demonstrated that there are quantitative predictors that have nonlinear relationships with the outcome. In @sec-model-development-whole-game, two of the three models for these data could naturally estimate nonlinear trends. Linear regression, however, could not. To fix this, the hour predictor spawned multiple features called spline terms and adding these to the model enables it to fit nonlinear patterns. This approach is called a _basis expansion_. In this section, we’ll consider (global) polynomial basis expansions. \n\nThe most traditional basis function is the polynomial expansion. If we start with a simple linear regression model with a single predictor: \n\n$$ \ny_i = \\beta_0 + \\beta_1 x_{i} + \\epsilon_i\n$$ \n\nthe expansion would add additional terms with values of the predictor exponentiated to the $p^{th}$ power^[In actuality, a more computationally preferred method is to use _orthogonal polynomials_ which rescale the variables before we exponentiate them. We’ll denote these modified versions of the predictor in equation @eq-poly-linear-reg as just $x$ to reduce mathematical clutter. We've seen these before in @fig-ordered]. For a cubic polynomial model:\n\n$$ \ny_i = \\beta_0 + \\beta_1 x_{i} + \\beta_2 x_{i}^2 + \\beta_3 x_{i}^3 + \\epsilon_i\n$$ {#eq-poly-linear-reg}\n\nThis is a _linear model_ in the sense that it is linear in the statistical parameters (the $\\beta$ values), so we can use standard parameter estimation procedures (e.g., least squares). \n\n@fig-global-polynomial shows data from @bralower1997mid which was collected to understand the relationship between the age of a fossil and the ratio of two radioactive isotopes. The data set contains 106 data points for these two variables. The relationship is highly nonlinear, with several regions where the data have significant convex or concave patterns. \n\nFor simplicity, a fit from a cubic model [@eq-poly-linear-reg] is shown as the default. While the pattern is nonlinear, the line does not conform well to the data. The lines above the plot show the three basis functions that, for $p=3$, correspond to linear ($x$), quadratic ($x^2$), and cubic ($x^3$) terms. The effects of these terms are blended using their estimated slopes ($\\hat{\\beta}_j$) to produce the fitted line. Notice that the cubic fit is very similar to the cubic basis shown at the top of the figure. The estimated coefficient for the cubic term is much larger than the linear or quadratic coefficients \n\n::: {#fig-global-polynomial}\n\n::: {.figure-content}\n\n```{shinylive-r}\n#| label: fig-global-polynomial\n#| viewerHeight: 600\n#| viewerWidth: \"100%\"\n#| standalone: true\nlibrary(shiny)\nlibrary(patchwork)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(splines2)\nlibrary(bslib)\nlibrary(viridis)\nlibrary(aspline)\n\ndata(fossil)\n\nui <- page_fillable(\n  theme = bs_theme(bg = \"#fcfefe\", fg = \"#595959\"),\n  padding = \"1rem\",\n  layout_columns(\n    fill = FALSE,\n    col_widths = breakpoints(sm = c(-3, 6, -3)),\n    sliderInput(\n      \"global_deg\",\n      label = \"Polynomial Degree\",\n      min = 1L, max = 20L, step = 1L, value = 3L,\n      ticks = TRUE\n    ) # sliderInput\n  ), # layout_columns\n  layout_columns(\n    fill = FALSE,\n    col_widths = breakpoints(sm = c(-1, 10, -1)),\n    as_fill_carrier(plotOutput('global'))\n  )\n)\n\n\nserver <- function(input, output, session) {\n  \n  light_bg <- \"#fcfefe\" # from aml4td.scss\n  grid_theme <- bs_theme(\n    bg = \"#fcfefe\", fg = \"#595959\"\n  )\n  \n  # ------------------------------------------------------------------------------\n  \n  theme_light_bl<- function(...) {\n    \n    ret <- ggplot2::theme_bw(...)\n    \n    col_rect <- ggplot2::element_rect(fill = light_bg, colour = light_bg)\n    ret$panel.background  <- col_rect\n    ret$plot.background   <- col_rect\n    ret$legend.background <- col_rect\n    ret$legend.key        <- col_rect\n    \n    larger_x_text <- ggplot2::element_text(size = rel(1.25))\n    larger_y_text <- ggplot2::element_text(size = rel(1.25), angle = 90)\n    ret$axis.text.x <- larger_x_text\n    ret$axis.text.y <- larger_y_text\n    ret$axis.title.x <- larger_x_text\n    ret$axis.title.y <- larger_y_text  \n    \n    ret$legend.position <- \"top\"\n    \n    ret\n  }\n  \n  col_rect <- ggplot2::element_rect(fill = light_bg, colour = light_bg)\n  \n  maybe_lm <- function(x) {\n    try(lm(y ~ poly(x, input$piecewise_deg), data = x), silent = TRUE)\n  }\n  \n  expansion_to_tibble <- function(x, original, prefix = \"term \") {\n    cls <- class(x)[1]\n    nms <- recipes::names0(ncol(x), prefix)\n    colnames(x) <- nms\n    x <- as_tibble(x)\n    x$variable <- original\n    res <- tidyr::pivot_longer(x, cols = c(-variable))\n    if (cls != \"poly\") {\n      res <- res[res$value > .Machine$double.eps,]\n    }\n    res\n  } \n  \n  mult_poly <- function(dat, degree = 4) {\n    rng <- extendrange(dat$x, f = .025)\n    grid <- seq(rng[1], rng[2], length.out = 1000)\n    grid_df <- tibble(x = grid)\n    feat <- poly(grid_df$x, degree)\n    res <- expansion_to_tibble(feat, grid_df$x)\n    \n    # make some random names so that we can plot the features with distinct colors\n    rand_names <- lapply(1:degree, function(x) paste0(sample(letters)[1:10], collapse = \"\"))\n    rand_names<- unlist(rand_names)\n    rand_names <- tibble(name = unique(res$name), name2 = rand_names)\n    res <- \n      dplyr::inner_join(res, rand_names, by = dplyr::join_by(name)) %>% \n      dplyr::select(-name) %>% \n      dplyr::rename(name = name2)\n    res\n  }\n  \n  # ------------------------------------------------------------------------------\n  \n  spline_example <- tibble(x = fossil$age, y = fossil$strontium.ratio)\n  rng <- extendrange(fossil$age, f = .025)\n  grid <- seq(rng[1], rng[2], length.out = 1000)\n  grid_df <- tibble(x = grid)\n  alphas <- 1 / 4\n  line_wd <- 1.0\n  \n  base_p <-\n    spline_example %>%\n    ggplot(aes(x = x, y = y)) +\n    geom_point(alpha = 3 / 4, pch = 1, cex = 3) +\n    labs(x = \"Age\", y = \"Isotope Ratio\") +\n    lims(x = rng) +\n    theme_light_bl()\n  \n  output$global <- renderPlot({\n    \n    poly_fit <- lm(y ~ poly(x, input$global_deg), data = spline_example)\n    poly_pred <- \n      predict(poly_fit, grid_df, interval = \"confidence\", level = .90) %>% \n      bind_cols(grid_df)\n    \n    global_p <- base_p\n    \n    if (input$global_deg > 0) {\n      global_p <-\n        global_p +\n        geom_ribbon(\n          data = poly_pred,\n          aes(y = NULL, ymin = lwr, ymax = upr),\n          alpha = 1 / 15) +\n        geom_line(\n          data = poly_pred,\n          aes(y = fit),\n          col = \"black\",\n          linewidth = line_wd) +\n        theme(\n          plot.margin = margin(t = -20, r = 0, b = 0, l = 0),\n          panel.background = col_rect,\n          plot.background = col_rect,\n          legend.background = col_rect,\n          legend.key = col_rect\n        )\n      \n      feature_p <-\n        poly(grid_df$x,  input$global_deg) %>% \n        expansion_to_tibble(grid_df$x) %>% \n        ggplot(aes(variable, y = value, group = name, col = name)) +\n        geom_line(show.legend = FALSE) + # , linewidth = 1, alpha = 1 / 2\n        theme_void() +\n        theme(\n          plot.margin = margin(t = 0, r = 0, b = -20, l = 0),\n          panel.background = col_rect,\n          plot.background = col_rect,\n          legend.background = col_rect,\n          legend.key = col_rect\n        ) +\n        scale_color_viridis(discrete = TRUE, option = \"turbo\")\n      \n      p <- (feature_p / global_p) + plot_layout(heights = c(1.5, 4))\n    }\n    \n    print(p)\n    \n  })\n  \n}\n\napp <- shinyApp(ui = ui, server = server)\n```\n\n:::\n\nA global polynomial approach to modeling data from @bralower1997mid along with a representation of the features (above the data plot). The black dashed line is the true function and the shaded region is the 90% confidence intervals around the mean. \n\n:::\n\n\nWe might improve the fit by increasing the model complexity, i.e., adding additional polynomial terms. An eight-degree polynomial seems to fit better, especially in the middle of the data where the pattern is most dynamic. However, there are two issues. \n\nFirst, we can see from the 90% confidence bands around the line that the variance can be very large, especially at the ends. The fitted line and confidence bands go slightly beyond the range of the data (i.e., extrapolation). Polynomial functions become erratic when they are not close to observed data points. This becomes increasingly pathological as the polynomial degree increases. For example, in @fig-global-polynomial, choosing degrees greater than 14 will show extreme uncertainty in the variance of the mean fit (the solid line). This is a good example of the variance-bias tradeoff discussed in @sec-variance-bias below.\n\nDecreasing the polynomial degree will result in less complex patterns that tend to underfit the data. Increasing the degree will result in the fitted line being closer to the data, but, as evidenced by the confidence interval in the shaded region, the uncertainty in the model explodes (especially near or outside of the range range). This is due to severe overfitting. Eventually, you can increase the degree until the curve passes through every data point. However, the fit for any other values will be wildly inaccurate and unstable.\n\nSecond, the trend is concave for age values greater than 121 when it probably should be flat. The issue here is that a _global polynomial_ pattern is stipulated. The effect of each model term is the same across the entire data range^[This can be seen in the basis functions above the plot: each line covers the entire range of the data.]. We increased the polynomial degree to eight to improve the fit via additional nonlinearity. Unfortunately, this means that some parts of the data range will be _too nonlinear_ than required, resulting in poor fit. \n\nA global polynomial is often insufficient because the nonlinear relationships are different in different data sections. There may be steep increases in one area and gradual increases in others. Rather than using a global polynomial, what if we used different basis expansions in regions with more consistent trends rather than a global polynomial?\n\n@fig-piecewise-polynomials shows a crude approach where three different regions have different polynomial fits with the same degree. The pre-set degree and data ranges are probably as good as can be (after much manual fiddling) but the approach isn’t terribly effective. The curves do not connect. This discontinuity is visually discordant and most likely inconsistent with the true, underlying pattern we are attempting to estimate. Also, there are large jumps in uncertainty when predicting values at the extremes of each region’s range. \n\n\n::: {#fig-piecewise-polynomials}\n\n::: {.figure-content}\n\n```{shinylive-r}\n#| label: fig-piecewise-polynomials\n#| viewerHeight: 600\n#| viewerWidth: \"100%\"\n#| standalone: true\n\nlibrary(shiny)\nlibrary(patchwork)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(splines2)\nlibrary(bslib)\nlibrary(viridis)\nlibrary(aspline)\n\ndata(fossil)\n\nui <- page_fillable(\n  theme = bs_theme(bg = \"#fcfefe\", fg = \"#595959\"),\n  padding = \"1rem\",\n  layout_columns(\n    fill = FALSE,\n    col_widths = breakpoints(sm = c(-1, 5, 5, -1)),\n    sliderInput(\n      \"piecewise_deg\",\n      label = \"Polynomial Degree\",\n      min = 0L, max = 6L, step = 1L, value = 4L\n    ), # sliderInput\n    sliderInput(\n      \"cuts\",\n      label = \"Cutpoints\",\n      min = 93L, max = 122L, step = 1, value = c(101, 118)\n    ) # sliderInput\n  ), # layout_columns\n  layout_columns(\n    fill = FALSE,\n    col_widths = breakpoints(sm = c(-1, 10, -1)),\n    as_fill_carrier(plotOutput('pieces'))\n  )      \n)\n\nserver <- function(input, output, session) {\n  \n  light_bg <- \"#fcfefe\" # from aml4td.scss\n  grid_theme <- bs_theme(\n    bg = \"#fcfefe\", fg = \"#595959\"\n  )\n  \n  # ------------------------------------------------------------------------------\n  \n  theme_light_bl<- function(...) {\n    \n    ret <- ggplot2::theme_bw(...)\n    \n    col_rect <- ggplot2::element_rect(fill = light_bg, colour = light_bg)\n    ret$panel.background  <- col_rect\n    ret$plot.background   <- col_rect\n    ret$legend.background <- col_rect\n    ret$legend.key        <- col_rect\n    \n    larger_x_text <- ggplot2::element_text(size = rel(1.25))\n    larger_y_text <- ggplot2::element_text(size = rel(1.25), angle = 90)\n    ret$axis.text.x <- larger_x_text\n    ret$axis.text.y <- larger_y_text\n    ret$axis.title.x <- larger_x_text\n    ret$axis.title.y <- larger_y_text  \n    \n    ret$legend.position <- \"top\"\n    \n    ret\n  }\n  \n  col_rect <- ggplot2::element_rect(fill = light_bg, colour = light_bg)\n  \n  maybe_lm <- function(x) {\n    try(lm(y ~ poly(x, input$piecewise_deg), data = x), silent = TRUE)\n  }\n  \n  expansion_to_tibble <- function(x, original, prefix = \"term \") {\n    cls <- class(x)[1]\n    nms <- recipes::names0(ncol(x), prefix)\n    colnames(x) <- nms\n    x <- as_tibble(x)\n    x$variable <- original\n    res <- tidyr::pivot_longer(x, cols = c(-variable))\n    if (cls != \"poly\") {\n      res <- res[res$value > .Machine$double.eps,]\n    }\n    res\n  } \n  \n  mult_poly <- function(dat, degree = 4) {\n    rng <- extendrange(dat$x, f = .025)\n    grid <- seq(rng[1], rng[2], length.out = 1000)\n    grid_df <- tibble(x = grid)\n    feat <- poly(grid_df$x, degree)\n    res <- expansion_to_tibble(feat, grid_df$x)\n    \n    # make some random names so that we can plot the features with distinct colors\n    rand_names <- lapply(1:degree, function(x) paste0(sample(letters)[1:10], collapse = \"\"))\n    rand_names<- unlist(rand_names)\n    rand_names <- tibble(name = unique(res$name), name2 = rand_names)\n    res <- \n      dplyr::inner_join(res, rand_names, by = dplyr::join_by(name)) %>% \n      dplyr::select(-name) %>% \n      dplyr::rename(name = name2)\n    res\n  }\n  \n  # ------------------------------------------------------------------------------\n  \n  spline_example <- tibble(x = fossil$age, y = fossil$strontium.ratio)\n  rng <- extendrange(fossil$age, f = .025)\n  grid <- seq(rng[1], rng[2], length.out = 1000)\n  grid_df <- tibble(x = grid)\n  alphas <- 1 / 4\n  line_wd <- 1.0\n  \n  base_p <-\n    spline_example %>%\n    ggplot(aes(x = x, y = y)) +\n    geom_point(alpha = 3 / 4, pch = 1, cex = 3) +\n    labs(x = \"Age\", y = \"Isotope Ratio\") +\n    theme_light_bl()\n  \n  output$pieces <- renderPlot({\n    \n    cuts <- c(0, sort(input$cuts), 60)\n    piece_cols <- c(\"#1B9E77\", \"#D95F02\", \"#7570B3\")\n    piece_p <- base_p\n    \n    if (input$piecewise_deg > 0) {\n      data_splt <-\n        spline_example %>%\n        dplyr::mutate(x_cut = cut(x, breaks = cuts, include.lowest = TRUE)) %>%\n        tidyr::nest(.by = x_cut) %>%\n        mutate(\n          fit = lapply(data, maybe_lm),\n          features = lapply(data, mult_poly, degree = input$piecewise_deg)\n        )\n      grid_splt <-\n        dplyr::tibble(x = grid) %>%\n        dplyr::mutate(x_cut = cut(x, breaks = cuts, include.lowest = TRUE))  %>%\n        tidyr::nest(.by = x_cut)\n      \n      for (i in 1:3) {\n        sub_pred <- grid_splt$data[[i]]\n        if (!inherits(data_splt$fit[[i]], \"try-error\")) {\n          sub_pred <-\n            sub_pred %>%\n            dplyr::bind_cols(predict(data_splt$fit[[i]], sub_pred, \n                                     interval = \"confidence\", level = .90))\n          \n          piece_p <-\n            piece_p +\n            geom_ribbon(\n              data = sub_pred,\n              aes(y = NULL, ymin = lwr, ymax = upr),\n              alpha = 1 / 15\n            ) +\n            geom_line(\n              data = sub_pred,\n              aes(y = fit),\n              linewidth = line_wd\n            )\n        }\n      }\n      \n      set.seed(383) # to control colors\n      feature_p <- \n        data_splt %>% \n        dplyr::select(features) %>% \n        tidyr::unnest(features) %>% \n        ggplot(aes(x = variable, y = value, col = name)) + \n        geom_line(show.legend = FALSE) +\n        theme_void() +\n        theme(\n          plot.margin = margin(t = 0, r = 0, b = -20, l = 0),\n          panel.background = col_rect,\n          plot.background = col_rect,\n          legend.background = col_rect,\n          legend.key = col_rect\n        ) +\n        scale_color_viridis(discrete = TRUE, option = \"turbo\")\n      \n      p <- (feature_p / piece_p) + plot_layout(heights = c(1, 4))\n      \n    }\n    \n    print(p)\n    \n  })\n}\n\napp <- shinyApp(ui = ui, server = server)\n```\n\n:::\n\nA piecewise polynomial approach to model the data from @fig-global-polynomial.\n\n:::\n\nIt turns out that we can make sure that the different fitted curves can connect at the ends and that they do that smoothly. This is done via a technique called splines which yield better results and are more mathematically elegant.\n\n## Spline Functions {#sec-splines}\n\nLet’s assume we use piecewise cubic polynomials in the regional curve fits. To make the curves connect, we can add additional features that isolate local areas of $x$ via a new feature column such as $h(x - \\xi)^3$ where\n\n$$\nh(u)  =\n\\begin{cases} x & \\text{if $u > 0$,}\n\\\\\n0 & \\text{if $u \\le 0$.}\n\\end{cases}\n$$\n\nand $\\xi$ defines one of the boundary points.\n\nThis zeros out parts of the predictor’s range that are greater than $\\xi$. A smooth, continuous model would include a global polynomial expansion (i.e., $x$, $x^2$, and $x^3$) and these partial features for each value that defines the regions (these breakpoints, denoted with $\\xi$, are called _knots_^[Actually, they are the _interior knots_. The full set of knots includes the minimum and maximum values of $x$ in the training set.]). For example, if a model has three regions,  the basis expansion has 3 + 2 = 5 feature columns. For the fossil data, a three region model with knots at $\\xi_1 = 107$ and $\\xi_2 = 114$ would have model terms\n\n$$\ny_i = \\beta_0 + \\beta_1x_i + \\beta_2x^2 + \\beta_3x^3 + \\beta_4h(x_i - 107)^3 + \\beta_5h(x_i - 114)^3 + \\epsilon_i\n$$ {#eq-simple-spline}\n\nThe model fit, with the default interior knots, shown in @fig-simple-spline looks acceptable. As with global polynomials, there is a significant increase in the confidence interval width as the model begins to extrapolate slightly beyond the data used to fit the model.  \n\n::: {#fig-simple-spline}\n\n::: {.figure-content}\n\n```{shinylive-r}\n#| label: fig-simple-spline\n#| viewerHeight: 600\n#| viewerWidth: \"100%\"\n#| standalone: true\nlibrary(shiny)\nlibrary(patchwork)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(bslib)\nlibrary(aspline)\n\ndata(fossil)\n\nui <- page_fillable(\n  theme = bs_theme(bg = \"#fcfefe\", fg = \"#595959\"),\n  padding = \"1rem\",\n  layout_columns(\n    fill = FALSE,\n    col_widths = breakpoints(sm = c(-2, 8, -2)),\n    sliderInput(\n      \"cuts\",\n      label = \"Cutpoints\",\n      min = 93L, max = 122L, step = 1, value = c(107, 114)\n    ) # sliderInput\n  ), # layout_columns\n  layout_columns(\n    fill = FALSE,\n    col_widths = breakpoints(sm = c(-1, 10, -1)),\n    as_fill_carrier(plotOutput('splime_spline'))\n  )      \n)\n\nserver <- function(input, output, session) {\n  \n  light_bg <- \"#fcfefe\" # from aml4td.scss\n  grid_theme <- bs_theme(\n    bg = \"#fcfefe\", fg = \"#595959\"\n  )\n  \n  # ------------------------------------------------------------------------------\n  \n  theme_light_bl<- function(...) {\n    \n    ret <- ggplot2::theme_bw(...)\n    \n    col_rect <- ggplot2::element_rect(fill = light_bg, colour = light_bg)\n    ret$panel.background  <- col_rect\n    ret$plot.background   <- col_rect\n    ret$legend.background <- col_rect\n    ret$legend.key        <- col_rect\n    \n    larger_x_text <- ggplot2::element_text(size = rel(1.25))\n    larger_y_text <- ggplot2::element_text(size = rel(1.25), angle = 90)\n    ret$axis.text.x <- larger_x_text\n    ret$axis.text.y <- larger_y_text\n    ret$axis.title.x <- larger_x_text\n    ret$axis.title.y <- larger_y_text  \n    \n    ret$legend.position <- \"top\"\n    \n    ret\n  }\n  \n  col_rect <- ggplot2::element_rect(fill = light_bg, colour = light_bg)\n  \n  # ------------------------------------------------------------------------------\n  \n  spline_example <- tibble(x = fossil$age, y = fossil$strontium.ratio)\n  rng <- extendrange(fossil$age, f = .025)\n  grid <- seq(rng[1], rng[2], length.out = 1000)\n  grid_df <- tibble(x = grid)\n  alphas <- 1 / 4\n  line_wd <- 1.0\n  \n  base_p <-\n    spline_example %>%\n    ggplot(aes(x = x, y = y)) +\n    geom_point(alpha = 3 / 4, pch = 1, cex = 3) +\n    labs(x = \"Age\", y = \"Isotope Ratio\") +\n    theme_light_bl()\n  \n  output$splime_spline <- renderPlot({\n    \n    spline_p <- base_p\n    \n    h <- function(x) {\n      ifelse(x > 0, x, 0)\n    }\n    \n    mod_dat <- \n      spline_example %>% \n      mutate(\n        x_2 = x^2, \n        x_3 = x^3,\n        x_k_1 = pmax(h(x-min(input$cuts))^3, 0),\n        x_k_2 = pmax(h(x-max(input$cuts))^3, 0)\n      )\n    \n    grid_spln <- \n      grid_df %>% \n      mutate(\n        x_2 = x^2, \n        x_3 = x^3,\n        x_k_1 = pmax(h(x-min(input$cuts))^3, 0),\n        x_k_2 = pmax(h(x-max(input$cuts))^3, 0)\n      )\n    \n    features <- \n      rbind(\n        tibble::tibble(x = grid_spln$x, value = grid_spln$x_k_1, term = \"4\") %>% \n          filter(value != 0),\n        tibble::tibble(x = grid_spln$x, value = grid_spln$x_k_2, term = \"5\") %>% \n          filter(value != 0)\n      )\n    \n    fit_1 <- lm(y ~ ., data = mod_dat)\n    spline_pred <- \n      predict(fit_1, grid_spln, interval = \"confidence\", level = .90) %>% \n      bind_cols(grid_df)\n    \n    spline_p <-\n      spline_p +\n      geom_ribbon(\n        data = spline_pred,\n        aes(y = NULL, ymin = lwr, ymax = upr),\n        alpha = 1 / 15\n      ) +\n      geom_line(\n        data = spline_pred,\n        aes(y = fit),\n        linewidth = line_wd\n      ) +\n      geom_vline(xintercept = min(input$cuts), col = \"#A6CEE3\", lty = 2, linewidth = 1) +\n      geom_vline(xintercept = max(input$cuts), col = \"#1F78B4\", lty = 2, linewidth = 1)\n    \n    term_p <- \n      features %>% \n      ggplot(aes(x, value, col = term)) +\n      geom_line(show.legend = FALSE, linewidth = 1) +\n      lims(x = rng) +\n      theme_void() +\n      theme(\n        plot.margin = margin(t = 0, r = 0, b = -20, l = 0),\n        panel.background = col_rect,\n        plot.background = col_rect,\n        legend.background = col_rect,\n        legend.key = col_rect\n      ) +\n      scale_color_brewer(palette = \"Paired\")\n    \n    p <- (term_p / spline_p) + plot_layout(heights = c(1, 4))\n    \n    print(p)\n    \n  })\n}\n\napp <- shinyApp(ui = ui, server = server)\n```\n\n:::\n\nA simple cubic spline function with three regions. By default, the regions are partitions at age values of 107 and 114. The fitted curve has the same form as @eq-simple-spline. The two curves above the data plot indicate the range and values of the partial featured truncated using the function $h(\\cdot)$. \n\n:::\n\nLet’s consider how each model parameter affects the predictor’s space by labeling the regions A, B, and C (from left to right). For region A, the model is a standard cubic function (using $\\beta_0$ though $\\beta_3$). Region B adds the effect of the first partial function by including $\\beta_4$. Finally, region C  is a function of all five model parameters. This representation of a spline is called a truncated power series and is mostly used to demonstrate how spline functions can flexibly model local trends. \n\n::: {.note-box}\nThe word \"spline\" is used in many different contexts. It’s confusing, but we’ll try to clear it up. \n\nWe’ll define a \"spline\" or \"spline function\" as a collection of features that represent continuous and smooth piece-wise polynomial features of a single-number predictor (with some specific properties). \n\n\"Regression splines\" usually describe the use of splines of one or more predictors in a model fit such as ordinary least squares [@wood2006generalized;@arnold2019computational].\n\nThe term \"smoothing splines\" refers to a procedure that encapsulates both a spline function as well as an estimation method to fit it to the data (usually via regularization). There is typically a knot for each unique data point in $x$ [@Wang2011].\n\nAlso, there are many types of spline functions; we’ll focus on one but describe a few others at the end of this section.\n:::\n\nA different method for representing spline basis expansions is the *B-spline* [@deboor2003practical]. The terms in the model are parameterized in a completely different manner. Instead of the regions using increasingly more model parameters to define the regional fit, B-spline terms have more localized features such that only a few are “active” (i.e., non-zero) at a particular point $x_0$. This can be seen in @fig-bases which contains the basis function values for the truncated power series and B-spines\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Two representations of a cubic spline for the fossil data with knots at 107 and 114. The top panel illustrates the model terms defined by @eq-simple-spline. The bottom panel shows the B-spline representation. All lines have been scaled to the same y-axis range for easy visualization.](../figures/fig-bases-1.svg){#fig-bases fig-align='center' width=60%}\n:::\n:::\n\n\nB-spline parameterizations are used primarily for their numerical properties and, for this reason, we’ll use them to visualize different types of splines. \n\nBefore considering another type of spline function, let's look at one practical aspect of splines: choosing the knots. \n\n### Defining the Knots {#sec-define-knots}\n\nHow do we choose the knots? We can select them manually, and some authors advocate for this point of view. As stated by @breiman1988monotone: \n\n> My impression, after much experimentation, is the same - that few knots suffice providing that they are in the right place.\n\nA good example is seen in @fig-simple-spline with the fossil data. Using the knot positioning widget at the top, we can find good _and_ bad choices for $\\xi_1$ and $\\xi_2$; knot placement can matter. However, hand-curating each feature becomes practically infeasible as the number of knots/features increases.  Otherwise, they can be set algorithmically. \n\nThere are two main choices for automatic knot selection. The first uses a sequence of equally-spaced values encompassing the predictor space. The second is to estimate percentiles of the predictor data so that regions have about the same number of values they capture. For example, a fourth degree of freedom spline would have three split points within the data arranged at the 25th, 50th, and 75th percentiles (with the minimum and maximum values bracketing the outer regions). \n\nIt would be unwise to place knots as evenly spaced values between the minimum and maximum values. Without taking the distribution of the predictor into account, it is possible that the region between some knots might not contain any training data. Since there are usually several overlapping spline features for a given predictor value, we can still estimate the model despite empty regions (but it should be avoided). \n\nMany, but not all, splines specify how complex the fit should be in the area between the knots. However, cubic splines are a common choice because they allow for greater flexibility than linear or quadratic fits, but are not overly flexible, which could lead to over-fitting. Increasing the polynomial degree beyond three has more disadvantages than advantages. Recall that, in @fig-global-polynomial, variance exploded at the ends of the predictor distribution when the polynomial degree was very large. \n\n### Natural cubic splines {#sec-natural-splines}\n\nThe type of spline that we suggest using by default is the _natural cubic spline_^[Also called a _restricted cubic spline_ in @harre1988regression.]  [@stone1985additive;@arnold2019computational;@gauthier2020cubic]. It uses cubic fits in the interior regions and linear fits in regions on either end of the predictor distribution. For a simple two-knot model similar to @eq-simple-spline, there are only three slope parameters (the global quadratic and cubic terms are not used): \n\n$$\ny_i = \\beta_0 + \\beta_1x_i + \\beta_2h(x_i - \\xi_1)^3 + \\beta_3h(x_i - \\xi_2)^3 + \\epsilon_i\n$$ {#eq-natural-cubic-spline}\n\nFor the fossil data, @fig-natural-cubic-spline shows how this model performs with different numbers of knots chosen using quantiles. The 90% confidence bands show an increase in uncertainty when extrapolating, but the increase is orders of magnitude smaller than a global polynomial with the same number of model terms. \n\n::: {#fig-natural-cubic-spline}\n\n::: {.figure-content}\n\n```{shinylive-r}\n#| label: fig-natural-cubic-spline\n#| viewerHeight: 600\n#| viewerWidth: \"100%\"\n#| standalone: true\n\nlibrary(shiny)\nlibrary(patchwork)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(splines2)\nlibrary(bslib)\nlibrary(viridis)\nlibrary(aspline)\n\ndata(fossil)\n\nui <- page_fillable(\n  theme = bs_theme(bg = \"#fcfefe\", fg = \"#595959\"),\n  padding = \"1rem\",\n  layout_columns(\n    fill = FALSE,\n    col_widths = breakpoints(sm = c(-3, 6, -3)),\n    sliderInput(\n      \"spline_df\",\n      label = \"# Spline Terms\",\n      min = 3L, max = 20L, step = 1L, value = 9L\n    ), # sliderInput\n  ), # layout_columns\n  layout_columns(\n    fill = FALSE,\n    col_widths = breakpoints(sm = c(-1, 10, -1)),\n    as_fill_carrier(plotOutput('spline'))\n  )         \n)\n\nserver <- function(input, output, session) {\n  \n  light_bg <- \"#fcfefe\" # from aml4td.scss\n  grid_theme <- bs_theme(\n    bg = \"#fcfefe\", fg = \"#595959\"\n  )\n  \n  # ------------------------------------------------------------------------------\n  \n  theme_light_bl<- function(...) {\n    \n    ret <- ggplot2::theme_bw(...)\n    \n    col_rect <- ggplot2::element_rect(fill = light_bg, colour = light_bg)\n    ret$panel.background  <- col_rect\n    ret$plot.background   <- col_rect\n    ret$legend.background <- col_rect\n    ret$legend.key        <- col_rect\n    \n    larger_x_text <- ggplot2::element_text(size = rel(1.25))\n    larger_y_text <- ggplot2::element_text(size = rel(1.25), angle = 90)\n    ret$axis.text.x <- larger_x_text\n    ret$axis.text.y <- larger_y_text\n    ret$axis.title.x <- larger_x_text\n    ret$axis.title.y <- larger_y_text  \n    \n    ret$legend.position <- \"top\"\n    \n    ret\n  }\n  \n  col_rect <- ggplot2::element_rect(fill = light_bg, colour = light_bg)\n  \n  maybe_lm <- function(x) {\n    try(lm(y ~ poly(x, input$piecewise_deg), data = x), silent = TRUE)\n  }\n  \n  expansion_to_tibble <- function(x, original, prefix = \"term \") {\n    cls <- class(x)[1]\n    nms <- recipes::names0(ncol(x), prefix)\n    colnames(x) <- nms\n    x <- as_tibble(x)\n    x$variable <- original\n    res <- tidyr::pivot_longer(x, cols = c(-variable))\n    if (cls != \"poly\") {\n      res <- res[res$value > .Machine$double.eps,]\n    }\n    res\n  } \n  \n  mult_poly <- function(dat, degree = 4) {\n    rng <- extendrange(dat$x, f = .025)\n    grid <- seq(rng[1], rng[2], length.out = 1000)\n    grid_df <- tibble(x = grid)\n    feat <- poly(grid_df$x, degree)\n    res <- expansion_to_tibble(feat, grid_df$x)\n    \n    # make some random names so that we can plot the features with distinct colors\n    rand_names <- lapply(1:degree, function(x) paste0(sample(letters)[1:10], collapse = \"\"))\n    rand_names<- unlist(rand_names)\n    rand_names <- tibble(name = unique(res$name), name2 = rand_names)\n    res <- \n      dplyr::inner_join(res, rand_names, by = dplyr::join_by(name)) %>% \n      dplyr::select(-name) %>% \n      dplyr::rename(name = name2)\n    res\n  }\n  \n  # ------------------------------------------------------------------------------\n  \n  spline_example <- tibble(x = fossil$age, y = fossil$strontium.ratio)\n  rng <- extendrange(fossil$age, f = .025)\n  grid <- seq(rng[1], rng[2], length.out = 1000)\n  grid_df <- tibble(x = grid)\n  alphas <- 1 / 4\n  line_wd <- 1.0\n  \n  base_p <-\n    spline_example %>%\n    ggplot(aes(x = x, y = y)) +\n    geom_point(alpha = 3 / 4, pch = 1, cex = 3) +\n    labs(x = \"Age\", y = \"Isotope Ratio\") +\n    theme_light_bl()\n  \n  output$spline <- renderPlot({\n    \n    spline_fit <- lm(y ~ naturalSpline(x, df = input$spline_df), data = spline_example)\n    spline_pred <- \n      predict(spline_fit, grid_df, interval = \"confidence\", level = .90) %>% \n      bind_cols(grid_df)\n    \n    spline_p <- base_p +\n      geom_ribbon(\n        data = spline_pred,\n        aes(y = NULL, ymin = lwr, ymax = upr),\n        alpha = 1 / 15) +\n      geom_line(\n        data = spline_pred,\n        aes(y = fit),\n        col = \"black\",\n        linewidth = line_wd)\n    \n    feature_p <-\n      naturalSpline(grid_df$x, df = input$spline_df) %>% \n      expansion_to_tibble(grid_df$x) %>% \n      ggplot(aes(variable, y = value, group = name, col = name)) +\n      geom_line(show.legend = FALSE) + \n      lims(x = rng) +\n      theme_void() +\n      theme(\n        plot.margin = margin(t = 0, r = 0, b = -20, l = 0),\n        panel.background = col_rect,\n        plot.background = col_rect,\n        legend.background = col_rect,\n        legend.key = col_rect\n      ) +\n      scale_color_viridis(discrete = TRUE, option = \"turbo\")\n    \n    p <- (feature_p / spline_p) + plot_layout(heights = c(1, 4))\n    \n    print(p)\n    \n  })\n  \n}\n\napp <- shinyApp(ui = ui, server = server)\n```\n\n:::\n\nA natural cubic spline fit to the data previously shown in @fig-simple-spline. Good fits occur when approximately nine degrees of freedom are used. The top curves are the B-spline representation of the model terms. \n\n:::\n\n::: {.important-box}\n\nGiven the simplicity of this spline function, the fixed polynomial degree, and its stability in the tails of the predictor’s distribution, we suggest choosing natural cubic splines for most problems. \n\n:::\n\nSplines can be configured in different ways. Two details to specify are how many regions should be separately modeled and how they are apportioned. The number of regions is related to how many features are used in the basis expansion. As the number of regions increases, so does the ability of the spline to adapt to whatever trend might be in the data. However, the risk of overfitting the model to individual data points increases as the flexibility increases.\n\nFor this reason, we often tune the amount of complexity that the spline will accommodate. Generally, since the number of regions is related to the number of features, we'll refer to the complexity of the basis function via the number of degrees of freedom afforded by the spline. We don't necessarily know how many degrees of freedom to use. There are two ways to determine this. First, we can treat the complexity of the spline as a tuning parameter and optimize it with the tuning methods mentioned in Chapters [-@sec-grid] and [-@sec-iterative]. Another option is to over-specify the number of degrees of freedom and let specialized training methods solve the potential issue of over-fitting. From @wood2006generalized: \n\n> An alternative to controlling smoothness by altering the basis dimension, is to keep the basis dimension fixed, at a size a little larger than it is believed it could reasonably be necessary, but to control the model’s smoothness by adding a \"wiggliness\" penalty to the least squares fitting objective. \n\nThis approach is advantageous when there are separate basis expansions for multiple predictors. The overall smoothness can be estimated along with the parameter estimates in the model. The process could be used with general linear models (Chapters [-@sec-ols] and [-@sec-ordinary-logistic-regression]) or other parametric linear models. \n\nSplines are extremely useful and are especially handy when we want to encourage a simple model (such as linear regression) to approximate the predictive performance of a much more complex black-box model (e.g., a neural network or tree ensemble). We’ll also see splines and spline-like features used within different modeling techniques, such as generalized additive models (Sections [-@sec-reg-gam] and [-@sec-cls-gam]), multivariate adaptive regression splines (@sec-mars), and a few others. \n\n\n## Sidebar: The Variance-Bias Tradeoff {#sec-variance-bias}\n\nOur discussion of basis expansions presents an excellent time for a segue to discuss an essential idea in statistics and modeling: the variance-bias tradeoff. This idea will be relevant in upcoming sections for resampling and specific models. At the end of this section, we’ll also connect it to @sec-effect-encodings. \n\nWhat does variance mean in terms of a machine learning model? In this context, it would quantify how much the fitted model changes if we slightly change the data. For example, would the curve change much if we repeat the data collection that produces the values in @sec-polynomials and fit the sample model (for a fixed sample size and polynomial degree)? We can also look at the _variance of prediction_: for a specific new data point $x_0$, how much intrinsic uncertainty is there? Similar to the discussion regarding extrapolation of global polynomials, we might want to compare how much the uncertainty changes as we move outside the training set’s range. \n\nBias is the difference between some estimate, like an average or a model prediction, and its true value. The true value is not the same as the data we collect; it is the unknowable theoretical value. For this reason, bias is often difficult to compute directly. For machine learning, the most pertinent idea of bias relates to how well a model can conform to the patterns we see in the data (hoping that the observed data is a good representation of the true values). Back in @fig-global-polynomial, we saw that a linear model didn’t fit the data well. This is due to simple linear regression being a high-bias model because, without additional feature engineering, it cannot replicate nonlinear trends. Adding polynomial or spline terms decreased the model’s bias since it was more flexible.\n\n::: {.important-box}\nWe can think of bias in terms of the question: \"How close are we _aiming_ to the center of the target?\" and variance as: \"How much do our results vary when shooting at the target?\"\n:::\n\nThe concepts of variance and bias are paired because they are often at odds with one another. For models that predict, we’d like a _low variance_, _low bias_ model. In many cases, that can be exceedingly difficult to achieve. We can often lower bias by adding model complexity. However, increased complexity usually comes at the expense of stability (i.e., high variance). We will often be in the position of trying to find an acceptable compromise between the two. This was discussed with global polynomials; linear models were bad for our data, but adding too many polynomial terms adds unnecessary complexity and an explosion of variance (reflected in the confidence bands). \n\nThis leads us to the mean squared error (MSE). We’ve seen the root mean squared error already where we used it as a measure of accuracy for regression models. More generally, we can write it in terms of some unknown parameter $\\theta$ and some estimate $\\hat{\\theta}$ based on statistical estimation from data: \n$$MSE = E\\left[(\\theta - \\hat{\\theta})^2\\right]$$\n\nIt turns out that the MSE is a combination of model variance and (squared) bias ($\\theta - \\hat{\\theta}$): \n\n$$MSE = E\\left[(\\theta - \\hat{\\theta})^2\\right] = Var[\\hat{\\theta}] + (\\theta - \\hat{\\theta})^2 + \\sigma^2$$\n\nwhere $\\sigma^2$ represents some unknown amount of \"irreducible noise.\" Because of this, MSE offers a statistic to minimize that accounts for both properties. This can offer a compromise between the two.  \n\nTo illustrate this, we simulated a simple nonlinear model: \n\n$$y_i = x_i^3 + 2\\exp\\left[-6(x_i - 0.3)^2\\right] + \\epsilon_i$$\n\nwhere the error terms are $\\epsilon_i \\sim N(0, 0.1)$ and the predictor values were uniformly spaced across [-1.2, 1.2]. Since we know the true values, we can compute the model bias. \n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\nTo create a simulated data set, 31 samples were generated. Of these, 30 were used for the training set and one was reserved for the estimating the variance and bias. The training set values were roughly equally spaced across the range of the predictor. One simulated data set is shown in @fig-nonlinear-sim, along with the true underlying pattern.  \n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![A simulated data set with a nonlinear function. The test set point is the location where our simulation estimates the bias and variance.](../figures/fig-nonlinear-sim-1.svg){#fig-nonlinear-sim fig-align='center' width=70%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\nA linear model was estimated using ordinary least squares and a polynomial expansion for each simulated data set. The test set values were predicted, and the bias, variance, and root mean squared error statistics were computed. This was repeated 50,000 times for polynomial degrees ranging from one to twenty.  \n\n@fig-sim-results shows the average statistic values across model complexity (i.e., polynomial degree). A linear model performs poorly for the bias due to underfitting (as expected). In panel (a), adding more nonlinearity results in a substantial decrease in bias because the model fit is closer to the true equation. This improvement plateaus at a sixth-degree polynomial and stays low (nearly zero). The variance begins low; even though the linear model is ineffective, it is stable. Once additional terms are added, the variance of the model steadily increases then explodes around an 20<sup>th</sup> degree polynomial^[In this particular case, the variance becomes very large since the number of parameters is nearly the same as the number of training set points (30). This makes the underlying mathematical operation (matrix inversion) numerically unstable. Even so, it is the result of excessive model complexity.]. This shows the tradeoff; as the model becomes more complex, it fits the data better but eventually becomes unstable.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Simulation results showing variances, squared biases, and mean squared errors.](../figures/fig-sim-results-1.svg){#fig-sim-results fig-align='center' width=80%}\n:::\n:::\n\n\nThe mean squared error in panel (b) shows the combined effect of variance and bias. It shows a steep decline as we add more terms, then plateaus between seven and fifteenth-degree models. After that, the rapidly escalating variance dominates the MSE as it rapidly increases.  \n\nThe variance-bias tradeoff is the idea that we can exploit one for the other. Let’s go back to the basic sample mean statistic. If the data being averaged are normally distributed, the simple average is an _unbiased estimator_: it is always \"aiming\" for the true theoretical value. That’s a great property to have. The issue is that many unbiased estimators can have very high variance. In some cases, a slight increase in bias might result in a drastic decrease in variability. The variance-bias tradeoff helps us when one of those two quantities is more important. \n\n@fig-tradeoff shows a simple example. Suppose we have some alternative method for estimating the mean of a group that adds some bias while reducing variance. That tradeoff might be worthwhile if some bias will greatly reduce the variance. In our figure, suppose the true population mean is zero. The green curve represents the sample mean for a fixed sample size. It is centered at zero but has significant uncertainty. The other curve might be an alternative estimator that produces a slightly pessimistic estimate (its mean is slightly smaller than zero) but has 3-fold smaller variation. When estimating the location of the mean of the population, the biased estimate will have a smaller confidence interval for a given sample size than the unbiased estimate.  While the biased estimate may slightly miss the target, the window of the location will be much smaller than the unbiased estimate.  This may be a good idea depending on how the estimate will be used ^[This specific example will be referenced again when discussing resampling in @sec-resampling.].\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![A simple example of the variance-bias tradeoff.](../figures/fig-tradeoff-1.svg){#fig-tradeoff fig-align='center' width=70%}\n:::\n:::\n\n\nThe categorical encoding approach shown in @eq-effect-posterior from @sec-effect-encodings is another example. Recall that $\\bar{y}_j$ was the average daily rate for agent $j$. That is an unbiased estimator but has high variance, especially for agents with few bookings. The more complex estimator $\\hat{y}_j$ in @eq-effect-posterior is better because it is more reliable. That reliability is bought by biasing the estimator towards the overall mean ($\\mu_0$). \n\nAs mentioned, we’ll return to this topic several times in upcoming sections. \n\n\n## Discretization\n\nDiscretization^[Also known as binning or dichotomization.] is the process of converting quantitative data into a set of qualitative groups (a.k.a \"bins\"). The model uses these values instead of the original predictor column (perhaps requiring an additional step to convert them into binary indicator columns). Sadly, @fig-wall-of-pie illustrates numerous analyses that we have witnessed. This example uses the food delivery data and breaks the order hour and distance predictors into six and three groups, respectively. It also converts the delivery time outcome into three groups. This visualization, colloquially known as the \"Wall of Pie,\" tries to explain how the two predictors affect the outcome categories, often with substantial subjectivity.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![An unfortunate visualization of two predictors and the outcome in the food delivery data. The colors of the pie chart reflect the binned delivery times at cut points of 20 and 30 minutes with lighter blue indicating earlier times.](../figures/fig-wall-of-pie-1.svg){#fig-wall-of-pie fig-align='center' width=60%}\n:::\n:::\n\n\nOur general advice, described in more detail in @fes, is that the first inclination should never be to engineer continuous predictors via discretization^[In the immortal words^[[`https://livefreeordichotomize.com/`](https://livefreeordichotomize.com/)] of Lucy D’Agostino McGowan and Nick Strayer: \"Live free or dichotomize.\"]. Other tools, such as splines, are both theoretically and practically superior to converting quantitative data to qualitative data.  In addition, if a predictor can be split into regions that are predictive of the response, then methods that use recursive partitioning will be less arbitrary and more effective.\n\nThe literature supporting this is extensive, such as: @Cohen1983mn, @Altman1991ro, @Maxwell1993ig, @Altman1994oa, @Buettner1997bt, @Altman1998vs, @Taylor2002jj, @MacCallum2002ox, @Irwin2003mp, @Owen2005do, @Altman2006gn, @Royston2006md, @VanWalraven2008ne, @Fedorov2009jy, @Naggara2011xu, @Bennette2012ua, @Kuss2013zi, @Kenny2013cf, @BarnwellMenard2015xa, @Fernandes2019na, as well as the references shown in @harrell2015regression. These articles identify the main problems of discretization as follows:\n\n* Arbitrary (non-methodological) choice of breaks for binning can lead to significant bias. \n* The predictor suffers a significant loss of information, making it less effective. Moreover, there is reduced statistical power to detect differences between groups when they exist.\n* The number of features are increased, thus exacerbating the challenge of feature selection. \n* Correlations between predictors are inflated due to the unrealistic reduction in the variance of predictors. \n\n@pettersson2016quantitative shows differences in analyses with and without discretization. Their Fig. 1 shows a common binning analysis: a continuous outcome and one or more predictors are converted to qualitative formats and a grid of pie charts is created. Inferences are made from this visualization. One main problem is related to uncertainty. The noise in the continuous data is squashed so that any visual signal that is seen appears more factual than it is in reality^[@Kenny2013cf does an excellent job illustrating this issue.]. Also, the pie charts do not show measures of uncertainty; how do we know when two pie charts are \"significantly different\"? \n\nAlternatively, Figs. 4 and 5 of their paper shows the results of a logistic regression model where all predictors were left as-is and splines were used to model the probability of the outcome. This has a much simpler interpretation and confidence bands give the reader a sense that the differences are real. \n\nWhile it is not advisable to discretize most predictors, there are some cases when discretization can be helpful. \n As a counter-example, one type of measurement that is often appropriate to discretize is date. For example, @fes show a data set where daily ridership data was collected for the Chicago elevated train system. The primary trend in the data was whether or not the day was a weekday. Ridership was significantly higher when people commute to work. A simple indicator for Saturday/Sunday (as well as major holiday indicators) was the driving force behind many regression models on those data. In this case, making qualitative versions of the date was rational, non-arbitrary, and driven by data analysis.\n\nNote that several models, such as classification/regression trees and multivariate adaptive regression splines, estimate cut points in the model-building process. The difference between these methodologies and manual binning is that the models use all the predictors to derive bins based on a single objective (such as maximizing accuracy). They evaluate many variables simultaneously and are usually based on statistically sound methodologies.  \n\nIf it is the last resort, how should one go about discretizing predictors? First, topic specific expertise of the problem can be used to create appropriate categories when categories are _truly_ merited as in the example of creating an indicator for weekend day in the Chicago ridership data.  Second, and most important, _any_ methodology should be well validated using data that were not used to build the model (or choose the cut points for binning). To convert data to a qualitative format, there are both supervised and unsupervised methods. \n\nThe most reliable unsupervised approach is to choose the number of new features and use an appropriate number of percentiles to bin the data. For example, if four new features are required, the 0, 25%, 50%, 75%, and 100% quantiles would be used. This ensures that each resulting bin contains about the same number of samples from the training set.  \n\nIf you noticed that this is basically the same approach suggested for choosing spline knots in the discussion earlier in this chapter, you are correct. This process is very similar to using a zero-order polynomial spline, the minor difference being the placement of the knots. A zero-order model is a simple constant value, usually estimated by the mean. This is theoretically interesting but also enables users to contrast discretization _directly_ with traditional spline basis expansions. For example, if a B-spline was used, the modeler could tune over the number of model terms (i.e., the number of knots) and the spline polynomial degree. If binning is the superior approach, the tuning process would select that approach as optimal. In other words, we can let the data decide if discretization is a good idea^[But is most likely **not** a good idea.]. \n\nA supervised approach would, given a specific number of new features to create, determine the breakpoints by optimizing a performance measure (e.g., RMSE, classification accuracy, etc.). A good example is a tree-based model (very similar to the process shown in @fig-collapse). After fitting a single tree or, better yet, an ensemble of trees, the split values in the trees can be used as the breakpoints.  \n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\nLet's again use the fossil data from @bralower1997mid  illustrated in previous section on basis functions. We can fit a linear regression with qualitative terms for the age derived using: \n\n- An unsupervised approach using percentiles at cut-points. \n- A supervised approach where a regression tree model is used to set the breakpoints for the bins. \n\nIn each case, the number of new features requires tuning. Using the basic grid search tools described in @sec-grid, the number of required terms was set for each method (ranging from 2 to 10 terms) by minimizing the RMSE from a simple linear regression model. The results are that both approaches required the same number of new features and produced about the same level of performance; the unsupervised approach required 6 breaks to achieve an RMSE of 0.0000355 and the supervised model has an RMSE of 0.0000302 with 6 cut points. @fig-fossil-bins shows the fitted model using the unsupervised terms. \n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![The estimated relationship between fossil age and the isotope ratio previously shown in @fig-piecewise-polynomials, now using discretization methods.](../figures/fig-fossil-bins-1.svg){#fig-fossil-bins fig-align='center' width=80%}\n:::\n:::\n\n\nThe results are remarkably similar to one another. The blocky nature of the fitted trend reflects that, within each bin, a simple mean is used to estimate the sale price. \n\nAgain, we want to emphasize that arbitrary or subjective discretization is almost always suboptimal. \n\n## Chapter References {.unnumbered}\n\n\n\n",
    "supporting": [
      "interactions-nonlinear_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}