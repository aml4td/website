{
  "hash": "41f21440ab0fb64cf6653f1a0ab6ec26",
  "result": {
    "engine": "knitr",
    "markdown": "---\nknitr:\n  opts_chunk:\n    cache.path: \"../_cache/embeddings/\"\n---\n\n\n# Embeddings {#sec-embeddings}\n\n\n\n\n\n\n\nWhen there are a multitude of predictors, it might be advantegous to condense them into a smaller number of artificial features. To be useful, this smaller set should represent what is essential in the original data. This process is often called _feature extraction_, _dimension reduction_, or _manifold learning_. We’ll use a more general term currently en vogue: **embeddings**. While this chapter focuses on feature extraction, embeddings  can be used for other purposes, such as converting non-numeric data (e.g., text) into a more usable numeric format. \n\nThis chapter will examine several primary classes of embedding methods that can achieve multiple purposes. First, we’ll consider linear methods that take a numeric input matrix $\\boldsymbol{X}$ that is $n \\times p$ and create a different, probably smaller set of features $\\boldsymbol{X}^*$ ($n \\times m$) using the transformation $\\boldsymbol{X}^* = \\boldsymbol{X}\\boldsymbol{Q}$. We hope that we can find appropriate embeddings so that $m << p$.\n\nAfter describing linear methods, we will consider a different class of transformations that focuses on the distances between data points called _multidimensional scaling_ (MDS). MDS creates a new set of $m$ features that are not necessarily linear combinations of the original features but often use some of the same math as the linear techniques. \n\nFinally, some embedding techniques specific to classification are discussed. These are based on _class centroids_. \n\nBefore beginning, we’ll introduce another data set that will be used here and in forthcoming chapters.\n\n## Example: Predicting Barley Amounts  {#sec-barley}\n\n@larsen2019deep and @pierna2020applicability describe a data set where laboratory measurements are used to predict what percentage of a liquid was lucerne, soy oil, or barley oil^[Retreived from [`https://chemom2019.sciencesconf.org/resource/page/id/13.html`](https://chemom2019.sciencesconf.org/resource/page/id/13.html)]. An instrument is used to measure how much of particular wavelengths of light are absorbed by the mixture to help determine chemical composition. We will focus on using the lab measurements to predict the percentage of barley oil in the mixture. The distribution of these values is shown in @fig-barley-data(a). \n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![(a) The distribution of the outcome for the entire data set. The bar colors reflect the percent barley distribution and are used in subsequent sections. (b) Selected training set spectra for four barley samples. Each line represents the set of 550 predictors in the data.](../figures/fig-barley-data-1.svg){#fig-barley-data fig-align='center' width=60%}\n:::\n:::\n\n\nNote that most of the data have very little barley oil. About 27% of the data are less than 1%, and the median barley oil percentage is 5.96%.\n\nThe 550 predictors are the light absorbance for sequential values in the light region of interest (believed to be from wavelengths between 1300 and 2398 nm). @fig-barley-data(b) shows a selection of four samples from the data. The darker lines represent samples with lower barley content. \n\nThese predictor values, called _spectra_, have a very high serial correlation between predictors; median correlation between the predictors was 0.98. The high degree of between-predictor correlation can be a major complication for some models and can degrade predictive performance. Therefore, we need methods that will simultaneously decorrelate predictors while extracting useful predictive information for the outcome. \n\nAnalyses of similar data sets can be found in [Section 9.1](https://bookdown.org/max/FES/illustrative-data-pharmaceutical-manufacturing-monitoring.html) of @fes and @wtf2024.\n\nIn the following computations, each predictor was standardized using the orderNorm transformation mentioned earlier (unless otherwise noted). \n\nThe data originated from a modeling competition to find the most accurate model and specific samples were allocated to training and test sets. However, there were no public outcome values for the test set; our analysis will treat the 6,915 samples in their training set as the overall pool of samples. This is enough data to split into separate training ($n_{tr} =$ 4,839), validation ($n_{val} =$ 1,035), and test sets ($n_{te} =$ 1,041). The allocation of samples to each of the three data sets utilized stratified sampling based on the outcome data. \n\n\n## Linear Transformations  {#sec-linear-embed}\n\nThe barley data set presents two common challenges for many machine learning techniques:\n\n1. The number of original predictors (550) is fairly large . \n2. The features are highly correlated. Techniques that require inverting the covariance matrix of the features, such as linear regression, will become numerically unstable or may not be able to be fit when features are highly correlated. \n\nWhat can we do if we desire to use a modeling technique that is adversely affected by either (or both) of these characteristics?  \n\nDimensionality reduction is one technique that can help with the first issue (an abundance of columns). As we’ll see below, we might be able to extract new features ($X^*$) such that the new features optimally summarize information from the original data ($X$). \n\nFor the problem of highly correlated predictors, some embedding methods can additionally _decorrelated_ the predictors by deriving embedded features with minimal correlation. \n\nThe three embedding methods we’ll discuss first are linear in a mathematical sense because they transform a table of numeric features into new features that are linear combinations of the original features. These new linear combinations are often called _scores_. This transformation uses the equation.\n\n$$ \\underset{n\\times m}{\\boldsymbol{X}^*} = \\underset{n\\times p}{\\boldsymbol{X}}\\ \\underset{p\\times m}{\\boldsymbol{Q}} $$\n\nwhere $\\boldsymbol{Q}$ is a matrix that translates or embeds the original features into a potentially lower dimensional space ($m < p$) without losing much information. It is easy to see why this matrix operation is linear when the elements of the $\\boldsymbol{X}$ and $\\boldsymbol{Q}$ matrices are expanded. For example, the first score for the $i^{th}$ sample would be:\n\n$$ \nx^*_{i1} = q_{11} x_{i1} + q_{21}x_{i2} + \\ldots +  q_{p1}x_{ip} \n$$ {#eq-pca-linear-combo}\n\nThe $q_{ij}$ values are often referred to as the _loadings_ for each predictor in the linear combination. \n\nIn this section, we will review principal components analysis (PCA), independent component analysis (ICA), and partial least squares (PLS), which are fundamental linear embedding techniques that are effective at identifying meaningful embeddings but estimate $A$ in different ways. PCA and ICA extract embedded features using only information from the original features; they are unsupervised. Conversely, PLS uses the predictors and outcome; it is a supervised technique. \n\nThere are many other linear embedding methods that can be used. For example, non-negative matrix factorization [@lee1999learning;@lee2000algorithms]is an embedding method that is useful when the data in $X$ are integer counts or other values that cannot be negative. \n\nTo start, we’ll focus on the most often used embedding method: PCA.\n\n### Principal Component Analysis\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\nKarl Pearson introduced PCA over a century ago, yet it remains a fundamental dimension reduction method [@jolliffe2016principal].  Its relevance stems from the underlying objective of the technique: to find linear combinations of the original predictors that maximize amount of variation in the new features^[As is, this is far too general. We could maximize the variance by making every value of $Q$ equal to $\\infty$. PCA, and other methods, impose an implicit constraint to limit the elements of $Q$. In this case, PCA constrains the loading vectors to have unit length.]. \n\n::: {.note-box}\nFrom a statistical perspective, variation is synonymous with information.  \n:::\n\nSimultaneously, the scores produced by PCA (i.e., $X^*$) are required to be orthogonal to each other. The important side benefit of this technique is that _PCA scores are uncorrelated_. This is very useful for modeling techniques that need the predictors to be relatively uncorrelated: multiple linear regression, neural networks, support vector machines, and others.\n\nIn a way, PCA components have an order or hierarchy. The first principal component has a higher variance than any other component. The second component has a higher variance than subsequent components, and so on. We can think of this process as one of deflation; the first component extracts the largest sources of information/variation in the predictors set. The second component extracts as much as possible for whatever is left behind by the first, and so on. For this reason, we can track how much variation in the original data each component accounts for. We often use the phrase that \"PCA chases variation\" to achieve its goals.\n\nSuppose we start with $p$ columns^[Assuming that the $p$ columns are linearly independent.] in our data. In that case, we can produce up to $p$ PCA components, and their accumulated variation will eventually add up to the total variation in the original $X$.\n\nWhile PCA can deliver new features with the desirable characteristics, the technique must be used with care.  Specifically, we must understand that PCA seeks to find embeddings without regard to any further understanding of the original features (such as the response).  Hence, PCA may generate embeddings that are ignorant of the modeling objective (i.e., they lack predictive information).\n\n#### Preparing for PCA {.unnumbered}\n\nBecause PCA seeks linear combinations of predictors that maximize variability, it will naturally first be drawn to summarizing predictors with more variation.  If the original predictors are on measurement scales that differ in magnitude, then the first components will focus on summarizing the higher magnitude predictors.  This means that the PCA scores will focus on the scales of the measurements (rather than their intrinsic value).  If, by chance, the most relevant feature for predicting the response also has the largest numerical values, the new features created by PCA will retain the essential information for predicting the response.  However, if the most important features are in the smallest units, then the top features created by PCA will be much less effective. \n\nIn most practical machine learning applications, features are on vastly different scales. We suggest using the tools from @sec-common-scale to transform the data so that they have the same units. This prevents PCA from focusing dimension reduction simply on the measurement scale.\n\nAdditionally, the distributions of each feature may show considerable skewness or outliers. While there are no specific distributional requirements to use PCA, it is focused on variance and variance calculations often involve squared terms (e.g., $(x_i - \\bar{x})^2$). This type of computation can be very sensitive to outliers and skewness; resolving these issues prior to PCA is recommended. See the methods previously described in @sec-skewness. When outliers are a specific concern, the spatial-sign transformation might be a good idea [@visuri2000sign;@croux2002sign].\n\n\n#### How does PCA work? {.unnumbered}\n\nPrincipal component analysis is focused on understanding the relationships between the predictor columns. PCA is only effective when there are correlations between predictors. Otherwise, each new PCA feature would only highlight a single predictor, and you would need the full set of PCA features to approximate the original columns. Conversely, data sets with a handful of intense between-predictor relationships require very few predictors to represent the source columns. \n\nThe barley data set has abnormally high correlations between each predictor. These tend to be autoregressive; the correlations between predictors at adjacent wavelengths are very high, and the correlation between a pair of predictors diminishes as you move away from their locations on the spectrum. For example, the correlation between the first and second predictor (in their raw form) is essentially 1 while the corresponding correlation between the first and fiftieth columns is 0.67. We'll explore the latter pair of columns below. \n\nBefore proceeding, let's go on a small \"side-quest\" to talk about the mathematics of PCA. \n\n::: {.mathy-box}\nThe remainder of this subsection discussed a mathematical operation called the singular value decomposition (SVD). PCA and many other computations rely on on the SVD. It is a fundamental linear algebra calculation. \n\nWe'll describe it loosely with a focus on how it is used. The concept of eigenvalues will come up again in the next section and in subsequent chapters. @banerjee2014linear and @aggarwal2020linear are thorough but helpful resources for learning more. \n:::\n\n\nThe SVD process is intended to find a way to _rotate_ the original data in a way that the resulting columns are orthogonal to one another. It takes a square matrix as an input and can decompose it into several pieces: \n\n$$\\underset{p\\times p}{A} = \\underset{p\\times p}{Q}\\quad\\underset{p\\times p}{\\Lambda}\\quad \\underset{p\\times p}{Q'}$$\n\nThe results of this computation are the $p$ eigenvectors $\\mathbf{q}_j$ and eigenvalues $\\lambda_j$. The eignevectors tell you about the directions in which values of $A$ are moving and the eigenvalues describe the corresponding magnitudes (e.g. how far they go in their corresponding direction). \n\nThe transformation works with PCA by using the covariance matrix as the input $A$. We are trying to find trends in the relationships between variables and the SVD is designed to translate the original matrix to one that is orthogonal (that is, uncorrelated). This aspect of the SVD is how it connects to PCA. If we want to approximate our original data with new features that are uncorrelated, we need a transformation to orthogonality.\n\nThe matrix $Q$ houses the $p$ possible eigenvectors. These are the values by which you multiply the original matrix $A$ to achieve an orthogonal version. For PCA, they are the loading values shown in @eq-pca-linear-combo. The matrix $\\Lambda$ is a diagonal matrix whose $p$ values are the eigenvalues. It turns out that the eigenvalues represent the amount of variation (i.e., information) captured by each component. \n\nIf we conduct the SVD (and PCA) on the covariance matrix of the data, we are again subject to issues around potentially different units and scales of the predictors. Previously, we suggested to center and scale the data prior to PCA. The equivalent approach here is to conduct the SVD on the correlation matrix of the data. Similar to our recommendations on standardization, we recommend using the correlation as the input to PCA. \n\nOne interesting side-effect of using the covariance or correlation matrix as the input to PCA is related to missing data (discussed in more detail in @sec-missing-data). The conventional sample covariance (or correlation) matrices can be computed for each matrix element (i.e., without using matrix multiplication). Each covariance or correlation can be computed with whatever rows of the two predictors have pairwise-complete results. This means that we do not have to globally drop specific rows of the data when a small number of columns contain missing data. \n\n\n#### A two dimensional example {.unnumbered}\n\n\n\n\n\nTo demonstrate, we chose two predictors in the barley data. They correspond to wavelengths^[These wavelengths correspond to the 1<sup>st</sup> and 50<sup>th</sup> predictors.] 1,300 and 1,398 shown in @fig-barley-data(b).  In the data, these two predictors were preprocessed using the ORQ procedure (@sec-skewness). The standardized versions of the predictors have a correlation of 0.68 and are shown in @fig-pca-rotation(a). \n\nPCA was performed on these data, and the results are animated in @fig-pca-rotation(b). This visualization shows the original data (colored by their outcome data) and then rotates it around the center position. The PCA transformation corresponds to the rotation where the x-axis has the largest spread. The variance is largest at _two_ angles (135$^{\\circ}$ and 315$^{\\circ}$) since the solution for PCA is _unique up to sign_. Both possible solutions are correct, and we usually pick one. For one solution, the PCA loading coefficients are: \n\n\\begin{align}\nx^*_{i1} &= -0.71 x_{i1} -0.71 x_{i2} \\notag \\\\\nx^*_{i2} &= -0.71 x_{i1} + 0.71 x_{i2} \\notag\n\\end{align}\n \nBecause of this illustrative example’s low-dimensional aspect, this solution is excessively simple. Ordinarily, the loading values take a great many values.  \n\n::: {#fig-pca-rotation layout-ncol=2}\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](../figures/barley-ord-orig-1.png){fig-align='center' width=100%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](../premade/anime_barley_pca.gif){fig-align='center' width=100%}\n:::\n:::\n\n\nA demonstration that PCA is just a rotation of the data. The original predictors (those at the first and fiftieth wavelengths) are in Panel (a). The animation in (b) shows the rotation of two of the predictors, which stops at the two optimal rotations corresponding to the principal components and the original data.\n\n:::\n\n\nAgain,the remarkable characteristic of this specific set of linear combinations is that they are orthogonal (i.e., uncorrelated) with one another.\n\n::: {.note-box}\n\nUsing PCA to transform the data into a full set of uncorrelated variables is often called “whitening the data.” It retains all of the original information and is more pliable to many computations. It can be used as a precursor to other algorithms.\n\n:::\n\nNow that we've seen PCA on a small scale, let's look at an analysis of the full set of predictors \n\n#### PCA on the barley data  {.unnumbered}\n\n\nWe'll repeat the analysis in the preceding section; PCA was calculated on the training set using all predictors. There are 550 feature columns and the same number of possible principal components. The number of new features to retain is a parameter that must be determined.  In practice, the number of new features is often selected based on the percentage of variability that the new features summarize relative to the original features.  @fig-barley-pca-scree displays the new PCA feature number (x-axis) versus the percent of total variability across the original features (commonly called a “scree plot”).  In this graph, three components summarize 99.4% of the total variability.  We often select the smallest number of new features that summarize the greatest variability. Again, this is an unsupervised optimization. To understand how the number of components affects supervised predictors (e.g., RMSE), the number of features can be treated as a tuning parameter   . \n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![A scree plot of the PCA component number versus the percent of variance explained for the first 10 components of the barley data.](../figures/fig-barley-pca-scree-1.svg){#fig-barley-pca-scree fig-align='center' width=60%}\n:::\n:::\n\n\nNote that the first component alone captured 92.3% of the variation in the 550 training data columns. This reflects the extreme correlation seen in the predictors. \n\n@fig-linear-scores shows a scatterplot of the principal components colored by the percentage of barley oil.  The figure reveals that the first PCA component delineates the higher barley oil samples from those with less oil.  There also appear to be three different clusters of samples with very low (if any) barley oil. It might be helpful to investigate these samples to ascertain if they are artifacts or caused by some systematic, underlying factors not in the current set of columns. The pairing of the second and fourth components appears to help differentiate lower barely samples from the broader set. The pairing of the third and fourth components doesn’t offer much predictive power on their own.\n\n::: {#fig-linear-scores}\n\n::: {.figure-content}\n\n```{shinylive-r}\n#| label: fig-linear-scores\n#| out-width: \"80%\"\n#| viewerHeight: 550\n#| standalone: true\n\nlibrary(shiny)\nlibrary(ggplot2)\nlibrary(bslib)\nlibrary(viridis)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(purrr)\nlibrary(ggforce)\n\n# ------------------------------------------------------------------------------\n\nlight_bg <- \"#fcfefe\" # from aml4td.scss\ngrid_theme <- bs_theme(\n  bg = light_bg, fg = \"#595959\"\n)\n\n# ------------------------------------------------------------------------------\n\ntheme_light_bl<- function(...) {\n  \n  ret <- ggplot2::theme_bw(...)\n  \n  col_rect <- ggplot2::element_rect(fill = light_bg, colour = light_bg)\n  ret$panel.background  <- col_rect\n  ret$plot.background   <- col_rect\n  ret$legend.background <- col_rect\n  ret$legend.key        <- col_rect\n  \n  ret$legend.position <- \"top\"\n  \n  ret\n}\n\n# ------------------------------------------------------------------------------\n\nui <- page_fillable(\n  theme = bs_theme(bg = \"#fcfefe\", fg = \"#595959\"),\n  padding = \"1rem\",\n  layout_columns(\n    fill = TRUE,\n    column(\n      width = 10,\n      radioButtons(\n        inputId = \"method\",\n        label = \"Embedding\",\n        choices = list(\"PCA\" = \"PC\", \"ICA\" = \"IC\", \"PLS\" = \"PLS\"),\n        inline = TRUE\n      )\n    )\n  ),  \n  \n  as_fill_carrier(plotOutput(\"scores\"))\n)\n\nserver <- function(input, output) {\n  load(url(\"https://raw.githubusercontent.com/aml4td/website/embeddings_kj/RData/barley_linear_embeddings.RData\"))\n  \n  \n  output$scores <-\n    renderPlot({\n      dat <- \n        all_scores_val %>% \n        dplyr::filter(grepl(input$method, Method)) %>% \n        dplyr::select(-component_num, -Method) %>% \n        tidyr::pivot_wider(id_cols = c(barley, .row), names_from = label, values_from = value)\n      \n      p <- dat %>% \n        ggplot(aes(x = .panel_x, y = .panel_y)) + \n        geom_point(aes(col = barley), alpha = 1 / 3, cex = 1) + \n        geom_autodensity(alpha = 1 / 2) +\n        facet_matrix(vars(c(-barley, -.row)), layer.diag = 2, grid.y.diag = FALSE) +\n        scale_color_viridis(option = \"viridis\") +\n        theme_light_bl()\n\n      \n      print(p)\n      \n    })\n  \n}\n\napp <- shinyApp(ui = ui, server = server)\n```\n:::\n\nA visualization of the four new features for different linear embedding methods. The data shown are the validation set results.\n\n:::\n\nOne note about this visualization. The axis scales are not common across panels (for ease of illustration). If we were to keep a common scale, the later components would appear to have very little effect due to the flatness of the resulting figures.  When looking at the scores, we suggest keeping a common scale, which will most likely be the scale of the first component. This will help avoid over-interpreting patterns in the later components. \n\nFor PCA, it can be very instructive to visualize the loadings for each component. This can help in several different ways. First, it can tell which predictors dominate each specific new PCA component. If a particular component ends up having a strong relationship with the outcome, this can aid our explanation of how the model works. Second, we can examine the magnitude of the predictors to determine some of the relationships between predictors. If a group of predictors have approximately the same loading value, this implies that they have a common relationship with one another. This, on its own, can be a significant aid when conducting exploratory data analysis on a high-dimensional data set. @fig-linear-loadings shows the relationship between the PCA loadings and each predictor’s position on the spectrum.\n\n::: {#fig-linear-loadings}\n\n::: {.figure-content}\n\n```{shinylive-r}\n#| label: fig-linear-loadings\n#| viewerHeight: 550\n#| standalone: true\n\nlibrary(shiny)\nlibrary(ggplot2)\nlibrary(bslib)\nlibrary(viridis)\nlibrary(dplyr)\n\n# ------------------------------------------------------------------------------\n\nlight_bg <- \"#fcfefe\" # from aml4td.scss\ngrid_theme <- bs_theme(\n  bg = light_bg, fg = \"#595959\"\n)\n\n# ------------------------------------------------------------------------------\n\ntheme_light_bl<- function(...) {\n  \n  ret <- ggplot2::theme_bw(...)\n  \n  col_rect <- ggplot2::element_rect(fill = light_bg, colour = light_bg)\n  ret$panel.background  <- col_rect\n  ret$plot.background   <- col_rect\n  ret$legend.background <- col_rect\n  ret$legend.key        <- col_rect\n  \n  ret$legend.position <- \"top\"\n  \n  ret\n}\n\n# ------------------------------------------------------------------------------\n\n\nui <- page_fillable(\n  theme = bs_theme(bg = \"#fcfefe\", fg = \"#595959\"),\n  padding = \"1rem\",\n  layout_columns(\n    fill = FALSE,\n    col_widths = breakpoints(xs = c(-2, 4, 4, -2), sm = 4),\n    column(\n      width = 4,\n      checkboxGroupInput(\n        inputId = \"method\",\n        label = \"Embedding\",\n        choices = list(\"PCA\" = \"pca\", \"ICA\" = \"ica\", \"PLS\" = \"pls\"),\n        selected = \"pca\"\n      )\n    ),\n    column(\n      width = 4,\n      checkboxGroupInput(\n        inputId = \"comps\",\n        label = \"Component\",\n        choices = list(\"1\" = \"1\", \"2\" = \"2\", \"3\" = \"3\", \"4\" = \"4\"),\n        selected = paste0(1:4),\n        inline = TRUE\n      )\n    )\n  ),\n  as_fill_carrier(plotOutput(\"loadings\"))\n)\n\n\nserver <- function(input, output) {\n  load(url(\"https://raw.githubusercontent.com/aml4td/website/embeddings_kj/RData/barley_linear_embeddings.RData\"))\n  \n  \n  output$loadings <-\n    renderPlot({\n      dat <- \n        all_loadings %>% \n        dplyr::filter(id %in% input$method & component_number %in% input$comps)\n      p <-\n        ggplot(dat, aes(x = wavelength, y = value, col = component_number)) +\n        geom_hline(yintercept = 0, lty = 3) +\n        geom_line(alpha = 3 / 4, linewidth = 1) +\n        labs(y = \"Loading Value\") +\n        scale_color_brewer(palette = \"Dark2\") +\n        theme_light_bl() \n      if ( length(input$method) > 1) {\n        p <- p + facet_wrap(~ id, nrow = 1)\n      }\n      print(p)\n    })\n}\n\napp <- shinyApp(ui = ui, server = server)\n```\n:::\n\nThe loadings for the first four components of each linear embedding method as a function of wavelength.\n\n:::\n\nFor the first component, wavelengths at the low ends of the spectrum have a relatively small impact that increases as you get to about 1,400 nm. At this point, the predictors have a constant effect on that component. The second PCA component is almost the opposite; it emphasizes the smaller wavelengths while predictors above 1,400 nm fluctuate around zero. The third and fourth components emphasize different areas of the spectrum and are generally different than zero.\n\n#### How to incorporate PCA into the model {.unnumbered}\n\nThe barley data demonstrates that PCA can effectively capture the training set information in a smaller predictor set when there is a correlation between predictors. The number of components to retain depends on the data. It is a good idea to optimize the number of components to retain via model tuning. \n\n::: {.note-box}\n\nNote that “dimension reduction” is _not_ the same as feature selection. The PCA components described above are functions of all of the predictors. Even if you only need a handful of PCA components to approximate the training set, the original predictor set is still required when predicting new samples. \n  \n:::\n\nAnother aspect of using PCA for feature extraction is the scale of the resulting scores. @fig-linear-scores demonstrates that the first component has the largest variance, resulting in a wider range of training set values. For the validation set scores, the variance of PC<sub>1</sub> is 14-fold larger than the variance of PC<sub>2</sub>. Even though the scores are unitless, there may be issues for models that expect the predictors to have a common scale, similar to the requirement for PCA itself. In these cases, it may be advisable to standardize the PCA components to have the same range before serving them to the supervised ML model.\n\n\n#### Non-standard PCA {.unnumbered}\n\nVarious methods exist for estimating the PCA loadings. Some are well-suited to different dimensions of the predictor’s data. For example, \"small $n$, large $p$\" data sizes can make PCA computations difficult. @wu1997kernel and others describe a _kernel_ method more appropriate for very wide data sets. @scholkopf1998nonlinear extended this even further but using nonlinear kernel methods^[We will see similar methods in @sec-svm-cls.]. Still, others use modified objective functions to compensate for some potential deficiencies of the canonical technique.\n\nFor example, the standard loading matrix (i.e., the eigenvectors) are _dense_. It is possible that the loadings for some predictors shouldn’t affect specific components. The SVD might estimate these to be close to zero but not exactly zero. Sparse PCA techniques can, through various means, estimate some loading values to be exactly zero, indicating that the predictor has no functional effect on the embedding. \n\nFor example, @shen2008sparse take a penalization approach that puts a high price for loadings to have very large values. This regularization method can shrink the values towards zero and make some absolute zero. This is similar to the regularization approach seen in @sec-effect-encodings and is directly related to techniques discussed in @sec-logistic-reg, @sec-nnet-cls, and @sec-linear-reg. This option can coerce values across the loadings to be zero. It is unlikely to force a particular predictor’s values to be zero across all components. In other words, it may not completely erase the effect of a predictor from the embedding altogether. \n\nAnother method is based on a Bayesian approach [@ning2021spike], where the loading values are assumed to come from a mixture of two different distributions. One has a sharp “spike” around zero, and the other is a flat, wide distribution that encompasses a wide range of values (called the “slab”). The method then estimates the parameters to favor one distribution or the other and sets some proportion of the loadings to zero. \n\nAdditionally, there are PCA variants for non-numeric data, such as categorical predictors. Probabilistic PCA [@tipping1999probabilistic;@pmlrvR4schein03a] uses a PCA generalization to reduce the dimensions of qualitative data. \n\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n\n### Independent Component Analysis\n\nICA has roots in signal processing, where the observed signal that is measured is a combination of several different input signals.  \n\nFor example, electroencephalography (EEG) uses a set of electrodes on a patient’s scalp to noninvasively measure the brain’s electrical activity over time. The electrodes are placed on specific parts of the scalp and measure different brain regions (e.g., prefrontal cortex etc.). However, since the electrodes are near others, they can often measure mixtures of multiple underlying signals.\n\nThe objective of independent component analysis is to identify linear combinations of the original features that are _statistically independent_ of each other [@nordhausen2018independent;@hyvarinen2000independent]. \n\n::: {.note-box}\n\nTwo variables can be uncorrelated but still have a relationship (most likely nonlinear). For example, suppose we have a variable $z$ that is a sequence of evenly spaced values between -2 and 2.  The correlation between $z$ and $z^2$ is very close to zero but there is a clear and precise relationship between them, therefore the variables are not independent.\n\n:::\n\nIn practice, satisfying the statistically independence requirement of ICA can be done several ways.  One approach maximizes the \"non-Gaussianity\" of the resulting components. As shown by @hyvarinen2000independent, \n\n> The fundamental restriction in ICA is that the independent components must be nongaussian for ICA to be possible.\n\nThere are different ways to measure non-Gaussianity. The _fastICA_ algorithm uses an information theory statistic called _negentropy_ [@hyvarinen2000independent]. Another approach called InfoMax uses neural networks to estimate a different information theory statistic. \n\nBecause ICA's objective requires statistical independence among components, it will generate features different from those of PCA.  Unlike PCA, which orders new components based on summarized variance, ICA's components have no natural ordering.  This means that ICA may require more components than PCA to find the ones related to the outcome. \n\nThe predictors should be centered (and perhaps scaled) before estimating the ICA loadings. Additionally, some ICA algorithms internally add a PCA step to “whiten” the data before computing the ICA loadings (using all possible PCA components). Since independent component analysis thrives on non-Gaussian data, we should avoid transformations that induce a more symmetric distribution. For this reason, we will not use the ORD transformation to preprocess the predictors. Finally, the ICA loadings are often initialized before training using random values. If this randomness is not controlled, different results will likely occur from training run to training run.\n\n\n\n\n\n@fig-linear-scores contains a scatterplot matrix of the first 4 ICA components colored by the outcome. In this figure, Two components that appear to differentiate levels of barley by themselves (components two and three). Unsurprisingly, their interaction appears to be the one that visually differentiates the different amounts of barley oil in the validation set. \n\nThe loadings are shown in @fig-linear-loadings and tell an interesting story. The pattern of loadings one and three have similar patterns over the wavelengths. The same situation is the case for components two and four. These two pairs of trends in the loadings are somewhat oppositional to one another. Also, the patterns have little in common with the PCA loadings. For example, the first PCA loading was relatively constant across wavelengths. None of the ICA components show a constant pattern. \n\n### Partial Least Squares {#numeric-pls}\n\nBoth PCA and ICA focus strictly on summarizing information based on the features exclusively. When the outcome is related to the way that the unsupervised techniques extract the embedded features, then PCA and/or ICA can be effective dimension reduction tools. However, when the qualities of variance summarization or statistical independence are not related to the outcome, then these techniques may struggle to identify appropriate embedded features that are useful for predicting the outcome.\n\nPartial least squares (PLS) [@Wold1983] is a dimension reduction technique that identifies embedded features that are optimally linearly related to the outcome. While the objective of PCA is to find linear combinations of the original features that best summarize variability, the objective of PLS is to do the same _and_ to find the linear combinations that are correlated with the outcome [@stone1990continuum]. This process can be thought of as a constrained optimization problem in which PLS is forced to compromise between maximizing information from the predictors and simultaneously maximizing the prediction of the outcome. This means that the outcome is used to focus the dimension reduction process such that the new features have the greatest correlation with the outcome. For more detailed information, we suggest @Geladi1986 and @esposito2013partial. \n\nBecause one of the objectives of PLS is to summarize variance among the original features, the features should be pre-processed in the same way as PCA. \n\nFor the barley data, the first few sets of PLS loads are fairly similar to those generated by PCA. The first three components have almost identical values as their PCA analogs. The fourth component has different loadings, and the correlation between the fourth PCA and PLS scores is -0.63. The similarities in the first three scores and loadings between the methods can be seen in @fig-linear-scores and @fig-linear-loadings, respectively. \n\nIf our goal is to maximize predictive performance, fewer features are necessary when using PLS. As we’ll see below, we can sometimes achieve similar performance using PCA or ICA but we will need more features to match what PLS can do with less.\n\nLike principal component analysis, there are many modified versions of partial least squares. For example, @le2008sparse and @le2008sparse describe a sparse estimation routine that can set some loadings equal to absolute zero. Also, @barker2003partial and @Liu2007b adapt the algorithm for classification problems (i.e., qualitative outcomes). \n\n### Overall Comparisons\n\n\n\n\n\n\n\n\n\nHow do these three approaches differ in terms of predictive performance? To evaluate this, these embeddings were computed with up to 25 new features and used as the inputs for a linear regression model. After the embeddings and regression parameters were estimated, the validation set RMSE was computed. @fig-barley-linear-bakeoff has the results. The bands around each curve are 90% confidence intervals for the RMSE.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Results for linear regressions using three different linear embeddings.](../figures/fig-barley-linear-bakeoff-1.svg){#fig-barley-linear-bakeoff fig-align='center' width=70%}\n:::\n:::\n\n\nOverall, the patterns are similar. By the time 25 components are added, there is parity between the methods. However, PLS appears to be more efficient at finding predictive features since its curve has uniformly smaller RMSE values than the others . This isn’t surprising since it is the only supervised embedding of the three. \n\nPCA and PLS will be discussed in more detail in @sec-colinearity.\n\n## Multidimensional Scaling {#sec-mds}\n\nMultidimensional scaling [@torgerson1952multidimensional] is a feature extraction tool that creates embeddings that try to preserve the geometric distances between training set points. In other words, the distances between points in the smaller dimensions should be comparable to those in the original dimensions. Since the methods in this section use distances, the predictors should be standardized to equivalent units before the embedding is trained. As with PCA, we also recommend transformations to resolve skewness. \n\nTake @fig-mds-example(a) as an example. There are ten points in two dimensions (colored by three outcome classes). If we were to project these points down to a single dimension, we'd like points that are close in the original two dimensions to remain close when projected down to a single dimension. Panel (c) shows two such solutions. Each does reasonably well with some exceptions (i.e., points six and nine are too close for non-Metric MDS). \n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![(a) A collection of samples associated with three outcome classes. (b) A diagram of the two nearest neighbors for each data point. (c) A one-dimensional projection using two different methods: non-metric MDS and Isomap.](../figures/fig-mds-example-1.png){#fig-mds-example fig-align='center' width=70%}\n:::\n:::\n\n\nHere we present a few MDS methods, but there are many more. @Ghojogh2023 has an excellent review of an assortment of methods and their nuances. \n\nSome MDS methods compute all pairwise distances between points and use this as the input to the embedding algorithm. This is similar to how PCA can be estimated using the covariance or correlation matrices. One technique, _Non-Metric MDS_ [@kruskal1964multidimensional;@kruskal1964nonmetric;@sammon1969nonlinear], finds embeddings that minimize an objective function called \"stress\":\n\n$$\n\\text{Stress} = \\sqrt{\\frac{\\sum\\limits^{n_{tr}}_{i = 1}\\;\\sum\\limits^{n_{tr}}_{j = i+1}\\left(d(x_i, x_j) - d(x^*_i, x^*_j)\\right)^2}{\\sum\\limits^{n_{tr}}_{i = 1}\\;\\sum\\limits^{n_{tr}}_{j = i+1}d(x_i, x_j)^2}}\n$$\n\nThe numerator uses the squared difference between the pairwise distances in the original values ($x$) and the smaller embedded dimension ($x^*$). The summations only move along the upper triangle of the distance matrices to reduce redundant computations. @fig-mds-example(c, top row) has the resulting one dimensional projection of our two-dimensional data.\n\nThis can be an effective dimension reduction procedure, although there are a few issues. First, the entire matrix of distances is required (with $n_{tr}(n_{tr}-1)/2$ entries). For large training sets, this can be unwieldy and time-consuming. Second, like PCA, it is a global method that uses all data in the computations. We might be able to achieve more nuanced embeddings by focusing on local structures. Finally, it is challenging to apply metric MDS to project new data onto the space in which the original data was projected.\n\nFor these reasons, let's take a look at more modern versions of multidimensional scaling. \n\n### Isomap  {#sec-isomap}\n\nTo start, we'll focus on _Isomap_ [@tenenbaum2000global]. This nonlinear MDS method uses a specialized distance function to find the embedded features. First, the _K_ nearest neighbors are determined for each training set point using standard functions, such as Euclidean distance. @fig-mds-example(b) shows the _K_ = 2 nearest neighbors for our example data. Many nearest-neighbor algorithms can be very computationally efficient and their use eliminates the need to compute all of the pairwise distances. \n\nThe connections between neighbors form a _graph structure_ that qualitatively defines which data points are closely related to one another. From this, a new metric called _geodesic distance_ can be approximated. For a graph, we can compute the approximate geodesic distance using the shortest path between two points on the graph. With our example data, the Euclidean distance between points four and five is not large. However, its approximate geodesic distance is greater because the shortest path is through points nine, eight, and seven. @Ghojogh2023 use a wonderful analogy: \n\n> A real-world example is the distance between Toronto and Athens. The Euclidean distance is to dig the Earth from Toronto to reach Athens directly. The geodesic distance is to move from Toronto to Athens on the curvy Earth by the shortest path between two cities. The approximated geodesic distance is to dig the Earth from Toronto to London in the UK, then dig from London to Frankfurt in Germany, then dig from Frankfurt to Rome in Italy, then dig from Rome to Athens.\n\nThe Isomap embeddings are a function of the eigenvalues computed on the geodesic distance matrix. The $m$ embedded features are functions of the first $m$ eigenvectors. Although eigenvalues are associated with linear embeddings (e.g., PCA), nonlinear geodesic distance results in a local nonlinear embedding. @fig-mds-example(c, bottom row) shows the 1D results for the example data set. For a new data point, its nearest-neighbors in the training set are determined so that the approximate geodesic distance can be computed. The estimated eigenvectors and eigenvalues are used to project the new point into the embedding space. \n\nFor Isomap, the number of nearest neighbors and the number of embeddings are commonly optimized. @fig-barley-isomap shows a two-dimensional Isomap embedding for the barley data with varying numbers of neighbors. In each configuration, the higher barley values are differentiated from the small (mostly zero) barley samples. We again see the two or three clusters of data associated with small outcome values. The new features become more densely packed as the number of neighbors increases.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Isomap for the barley data for different numbers of nearest neighbors. The training set was used to fit the model and these results show the projections on the validation set. Lighter colors indicate larger values of the outcome.](../figures/fig-barley-isomap-1.png){#fig-barley-isomap fig-align='center' width=80%}\n:::\n:::\n\n\n### Laplacian Eigenmaps  {#sec-eigenmaps}\n\nThere are many other approaches to preserve local distances. One is _Laplacian eigenmaps_ [@belkin2001laplacian]. Like Isomap, it uses nearest neighbors to define a graph of connected training set points. For each connected point, a weight between graph nodes is computed that becomes smaller as the distance between points in the input space increases. The radial basis kernel (also referred to as the \"heat kernel\") is a good choice for the weighting function^[A note about some notation... We commonly think of the _norm_ notation as $\\|\\boldsymbol{x}\\|_p = \\left(|x_1|^p + |x_2|^p + \\ldots + |x_n|^p\\right)^{1/p}$. So what does the lack of a subscript in $||\\boldsymbol{x}||^2$ mean? The convention is the sum of squares:  $||\\boldsymbol{x}||^2 = x_1^2 + x_2^2 + \\ldots + x_n^2$.]: \n\n$$\nw_{ij} = \\exp\\left(\\frac{-||\\boldsymbol{x}_i - \\boldsymbol{x}_j||^2}{\\sigma}\\right)\n$$\n\nwhere $\\sigma$ is a scaling parameter that can be tuned. If two points are not neighbors, or if $i = j$, then $w_{ij} = 0$. Note that the equation above uses Euclidean distance. For the 2-nearest neighbor graph shown in @fig-mds-example(b) and $\\sigma = 1 / 2$, the weight matrix is roughly\n\n\n::: {.cell layout-align=\"center\"}\n$$\n\\newcommand{\\0}{{\\color{lightgray} 0.0}}\n\\boldsymbol{W} = \\begin{bmatrix}\n\\0 & 0.1 & \\0 & 0.2 & \\0 & \\0 & \\0 & \\0 & \\0 & \\0\\\\\n & \\0 & 0.4 & \\0 & \\0 & \\0 & \\0 & \\0 & \\0 & \\0\\\\\n &  & \\0 & 0.1 & \\0 & \\0 & \\0 & \\0 & \\0 & \\0\\\\\n &  &  & \\0 & \\0 & \\0 & 0.1 & \\0 & \\0 & \\0\\\\\n &  &  &  & \\0 & 0.4 & \\0 & \\0 & 0.1 & \\0\\\\\n &  & sym &  &  & \\0 & \\0 & \\0 & 0.1 & \\0\\\\\n &  &  &  &  &  & \\0 & 0.4 & \\0 & 0.1\\\\\n &  &  &  &  &  &  & \\0 & 0.1 & 0.3\\\\\n &  &  &  &  &  &  &  & \\0 & \\0\\\\\n &  &  &  &  &  &  &  &  & \\0 \n\\end{bmatrix}\n$$\n:::\n\n\nThe use of nearest neighbors means that the matrix can be very sparse and the zero values help define locality for each data point. Recall that samples 2 and 3 are fairly close to one another, while samples 1 and 2 are farther away. The weighting scheme gives the former pair a 4-fold larger weight in the graph than the latter pair. \n\nLaplacian eigenmaps rely heavily on graph theory. This method computes a _graph Laplacian_ matrix, defined as $\\boldsymbol{L} = \\boldsymbol{D} - \\boldsymbol{W}$ where the matrix $\\boldsymbol{D}$ has zero non-diagonal entries and diagonals equal to the sum of the weights for each row. For our example data: \n\n\n::: {.cell layout-align=\"center\"}\n$$\n\\newcommand{\\0}{{\\color{lightgray} 0.0}}\nL = \\begin{bmatrix}\n 0.3 & -0.1 & \\0 & -0.2 & \\0 & \\0 & \\0 & \\0 & \\0 & \\0\\\\\n &  0.5 & -0.4 & \\0 & \\0 & \\0 & \\0 & \\0 & \\0 & \\0\\\\\n &  &  0.5 & -0.1 & \\0 & \\0 & \\0 & \\0 & \\0 & \\0\\\\\n &  &  &  0.4 & \\0 & \\0 & -0.1 & \\0 & \\0 & \\0\\\\\n &  &  &  &  0.5 & -0.4 & \\0 & \\0 & -0.1 & \\0\\\\\n &  & sym &  &  &  0.5 & \\0 & \\0 & -0.1 & \\0\\\\\n &  &  &  &  &  &  0.6 & -0.4 & \\0 & -0.1\\\\\n &  &  &  &  &  &  &  0.8 & -0.1 & -0.3\\\\\n &  &  &  &  &  &  &  &  0.3 & \\0\\\\\n &  &  &  &  &  &  &  &  &  0.4 \n\\end{bmatrix}\n$$\n:::\n\n\nThe eigenvalues and eigenvectors of this matrix are used as the main ingredients for the embeddings. @Bengio2003advances shows that, since these methods eventually use eigenvalues in the embeddings, they can be easily used to project new data. \n\n### UMAP {#sec-umap}\n\nThe Uniform Manifold Approximation and Projection (UMAP) [@sainburg2020parametric] technique is one of the most popular distance-based methods. Its precursors, stochastic neighbor embedding (SNE) [@hinton2002stochastic] and  Student’s t-distributed stochastic neighbor embedding (t-SNE) [@van2008visualizing], redefined feature extraction, particularly for visualizations. UMAP borrows significantly from Laplacian eigenmaps and t-SNE but has a more theoretically sound motivation. \n \nAs with Laplacian eigenmaps, UMAP converts the training data points to a sparse graph structure. Given a set of _K_ nearest neighbors, it computes values similar to the previously shown weights ($\\boldsymbol{W}$ matrix), which we will think of as the probability that point $j$ is a neighbor of point $i$:  \n\n$$\np_{j|i} = \\exp\\left(\\frac{-\\left(||\\boldsymbol{x}_i - \\boldsymbol{x}_j||^2 - \\rho_i\\right)}{\\sigma_i}\\right)\n$$\n\nwhere $\\rho_i$ is the distance from $\\boldsymbol{x}_i$ to its closest neighbor, and $\\sigma_i$ is a scale parameter that now varies with each sample ($i$). To compute $\\sigma_i$, we can solve the equation   \n \n$$\n\\sum_{i=1}^K  \\exp\\left(\\frac{-\\left(||\\boldsymbol{x}_i - \\boldsymbol{x}_j||^2 - \\rho_i\\right)}{\\sigma_i}\\right) = \\log_2(K)\n$$\n\nUnlike the previous weighting system, the resulting $n \\times n$ matrix may not be symmetric, so the final weights are computed using $p_{ij} = p_{j|i} + p_{i|j} - p_{j|i}p_{i|j}$. \n\nUMAP performs a similar weight calculation for the embedded values $\\boldsymbol{x}^*$. We'll denote the probability that embedded points $\\boldsymbol{x}_i^*$ and $\\boldsymbol{x}_j^*$ are connected as $p_{ij}^*$. We'd like the algorthim to estimate these values such that $p_{ij} \\approx p_{ij}^*$. \n\nNumerical optimization methods^[Specifically gradient descent with a user-defined learning rate.] used to estimate the $n \\times m$ values $x^*_{ij}$. The process is initialized using a very sparse Laplacian eigenmap, the first few PCA components, or random uniform numbers. The objective function is based on cross-entropy and attempts to make the graphs in the input and embedded dimensions as similar as possible by minimizing:   \n\n$$\nCE = \\sum_{i=1}^{n_{tr}}\\sum_{j=i+1}^{n_{tr}} \\left[p_{ij}\\, \\log\\frac{p_{ij}}{p_{ij}^*} + (1 - p_{ij})\\log\\frac{1-p_{ij}}{1-p_{ij}^*}\\right]\n$$\n\nUnlike the other embedding methods shown in this section, UMAP can also create supervised embeddings so that the resulting features are more predictive of a qualitative or quantitative outcome value. See @sainburg2020parametric.\n\nBesides the number of neighbors and embedding dimensions, several more tuning parameters exist. The optimization process's number of optimization iterations (i.e., epochs) and the learning rate can significantly affect the final results. A distance-based tuning parameter, often called _min-dist_, specifies how \"packed\" points should be in the reduced dimensions. Values typically range from zero to one. However, the original authors state:\n\n> We view min-dist as an essentially aesthetic parameter governing the appearance of the embedding, and thus is more important when using UMAP for visualization.\n\nAs will be seen below, the initialization scheme is an important tuning parameter. \n\nFor supervised UMAP, there is an additional weighting parameter (between zero and one) that is used to balance the importance of the supervised and unsupervised aspects of the results. A value of zero specifies a completely unsupervised embedding. \n\n@fig-umap shows an interactive visualization of how UMAP can change with different tuning parameters. Each combination was trained for 1,000 epochs and used a learning rate of 1.0. For illustrative purposes, the resulting embeddings were scaled to a common range. \n\n::: {#fig-umap}\n\n::: {.figure-content}\n\n```{shinylive-r}\n#| label: fig-umap\n#| viewerHeight: 550\n#| standalone: true\n\nlibrary(shiny)\nlibrary(ggplot2)\nlibrary(bslib)\nlibrary(viridis)\n\n# ------------------------------------------------------------------------------\n\nlight_bg <- \"#fcfefe\" # from aml4td.scss\ngrid_theme <- bs_theme(\n  bg = light_bg, fg = \"#595959\"\n)\n\n# ------------------------------------------------------------------------------\n\ntheme_light_bl<- function(...) {\n\n  ret <- ggplot2::theme_bw(...)\n\n  col_rect <- ggplot2::element_rect(fill = light_bg, colour = light_bg)\n  ret$panel.background  <- col_rect\n  ret$plot.background   <- col_rect\n  ret$legend.background <- col_rect\n  ret$legend.key        <- col_rect\n\n  ret$legend.position <- \"top\"\n\n  ret\n}\n\n# ------------------------------------------------------------------------------\n\nui <- fluidPage(\n  theme = grid_theme,\n  fluidRow(\n\n    column(\n      width = 4,\n      sliderInput(\n        inputId = \"min_dist\",\n        label = \"Min Distance\",\n        min = 0.0,\n        max = 1.0,\n        value = 0.2,\n        width = \"100%\",\n        step = 0.2\n      )\n    ), # min distance\n    column(\n      width = 4,\n      sliderInput(\n        inputId = \"neighbors\",\n        label = \"Neighbors\",\n        min = 5,\n        max = 45,\n        value = 5,\n        width = \"100%\",\n        step = 10\n      )\n    ), # nearest neighbors\n\n    column(\n      width = 4,\n      sliderInput(\n        inputId = \"supervised\",\n        label = \"Amount of Supervision\",\n        min = 0.0,\n        max = 0.7,\n        value = 0,\n        width = \"100%\",\n        step = 0.1\n      )\n    ),\n    fluidRow(\n      column(\n        width = 4,\n        radioButtons(\n          inputId = \"initial\",\n          label = \"Initialization\",\n          choices = list(\"Laplacian Eigenmap\" = \"spectral\", \"PCA\" = \"pca\", \n                         \"Random\" = \"random\")\n        )\n      ),\n      column(\n        width = 6,\n        align = \"center\",\n        plotOutput('umap')\n      )\n    )\n  ) # top fluid row\n)\n\nserver <- function(input, output) {\n  load(url(\"https://raw.githubusercontent.com/aml4td/website/main/RData/umap_results.RData\"))\n\n  output$umap <-\n    renderPlot({\n      \n      dat <-\n        umap_results[\n          umap_results$neighbors == input$neighbors &\n            umap_results$min_dist == input$min_dist &\n            umap_results$initial == input$initial &\n            # log10(umap_results$learn_rate) == input$learn_rate &\n            umap_results$supervised == input$supervised,\n        ]\n\n      p <-\n        ggplot(dat, aes(UMAP1, UMAP2, col = barley)) +\n        geom_point(alpha = 1 / 3, cex = 3) +\n        scale_color_viridis(option = \"viridis\") +\n        theme_light_bl() +\n        coord_fixed() +\n        labs(x = \"UMAP Embedding #1\", y = \"UMAP Embedding #2\") +\n        guides(col = guide_colourbar(barheight = 0.5))\n\n      print(p)\n\n    })\n}\n\napp <- shinyApp(ui = ui, server = server)\n```\n:::\n\nA visualization of UMAP results for the barley data using different values for several tuning parameters. The points are the validation set values. \n\n:::\n\nThere are a few notable patterns in these results: \n\n - The initialization method can heavily impact the patterns in the embeddings. \n - As with Isomap, there are two or three clusters of data points with small barley values. \n - When the amount of supervision increases, one or more circular structures form that are associated with small outcome values. \n - The minimum distance parameter can drastically change the results. \n\nt-SNE and UMAP have become very popular tools for visualizing complex data. Visually, they often show interesting patterns that linear methods such as PCA cannot. However, they are computationally slow and unstable over different tuning parameter values. Also, it is easy to believe that the UMAP distances between embedding points are important or quantitatively predictive. That is not the case; the distances can be easily manipulated using the tuning parameters (especially the minimum distance). \n \n## Centroid-Based Methods  {#sec-centroids}\n\nAnother common approach to creating features is to calculate distances between landmarks or pairs of predictors. For example, the distance to desirable grade schools (or the university campus) could affect house prices in the Ames housing data. Potential predictors can be created that measure how close each home is to these points of interest. To calculate distance, a simple Euclidean metric can be used. However, for spatial data across longer distances, the Haversine metric [@sinnott1984virtues] is a better alternative because it takes into account the curvature of the earth.\n\nNote that distance-based features are often right skewed.  When a metric produces a right-skewed distribution, the log-transformation often helps improve predictive performance when the predictor is truly informative. \n\nDistance-based features can also be effective for classification models. A centroid is another name for the multivariate mean of a collection of data. It is possible to compute class-specific centroids using only the data from each class. When a new sample is predicted, this distance to each class centroid can be used as a predictor. These features would be helpful when a model could be better at detecting/emulating linear class boundaries. An example of this would be tree-based models; these models have to work hard to approximate linear trends in the data. Supplementing the data with simple centroid features might improve performance. \n\nAgain, there are several choices for the distance metric.  Mahalanobis distance is a good choice when there is not an overwhelming number of predictors:\n\n$$\nD_c(\\boldsymbol{x}_0) = (\\boldsymbol{x}_0 - \\boldsymbol{\\bar{x}}_{c})' \\boldsymbol{S}^{-1}_c (\\boldsymbol{x}_0 - \\boldsymbol{\\bar{x}}_{c})\n$$\n\nwhere $\\boldsymbol{x}_0$ is the new data point being predicted, $\\boldsymbol{\\bar{x}}$ is a vector of sample means, $\\boldsymbol{S}$ is the estimated covariance matrix (the subscript of $c$ denotes the class-specific statistics). This metric requires fewer data points within each class than the number of predictors being used. It also assumes that there are no linear dependencies between the predictors. \n\nWhen the model has many features, regularizing the centroid distances can be a good approach. This approach, similar to the tools described in @sec-effect-encodings, will shrink the class-specific centroids towards the overall (class-nonspecific) centroid at different rates. If a predictor does have any discriminative ability in the training set, its contribution to the class-specific centroids can be removed. \n\nWe'll let $x_{ij}$ denote sample $i$ ($i=1\\ldots n_{tr}$) for predictor $j$ ($j=1\\ldots p$). The approach by @tibshirani2003class estimates the standardized difference between the class-specific centroid and the global centroid using the following:\n\n\\begin{align}\n\\delta_{jc} &= \\frac{\\bar{x}_{jc} - \\bar{x}_j}{w_c s_j} &&\\text{ where } \\notag \\\\\n\\bar{x}_{jc} &= \\frac{1}{{n_{tr}^c}}\\sum_{i=1}^{{n_{tr}^c}} x_{ij}\\, I(y_i = c) && \\text{\\textcolor{grey}{(class-specific centroid elements)}} \\notag \\\\\n\\bar{x}_{j} &= \\frac{1}{n_{tr}}\\sum_{i=1}^{n_{tr}} x_{ij}  && \\text{\\textcolor{grey}{(global centroid elements)}}\\notag \\\\\nw_c &= \\sqrt{\\frac{1}{{n_{tr}^c}}  - \\frac{1}{n_{tr}}}  && \\text{\\textcolor{grey}{{(weights)}}} \\notag \\\\\ns_j &= \\frac{1}{n_{tr}-C}\\sum_{c=1}^C\\sum_{i=1}^{n_{tr}} \\left(x_{ij} - \\bar{x}_{jc}\\right)^2 I(y_i = c)  && \\text{\\textcolor{grey}{(pooled standard deviation for predictor $j$)}}\\notag \n\\end{align}\n\nwhere $n_{tr}^c$ is the number of training set points for class $c$ and $I(x)$ is a function that returns a value of one when $x$ is true. \n\nTo shrink this difference towards zero, a tuning parameter $\\lambda$ is used to create a modified version of the each predictors contribution to the difference:\n\n\\begin{equation}\n\\delta^*_{jc} = sign(\\delta_{jc})\\,h(|\\delta_{jc}| - \\lambda)\n\\end{equation}\n\nwhere $h(x) = x$ when $x > 0$ and zero otherwise. If the difference between the class-specific and global centroid is small (relative to $\\lambda$), $\\delta^*_{jc} = 0$ and predictor $j$ does not functionally affect the calculations for class $c$. The class-specific shrunken centroid is then\n\n\\begin{equation}\n\\bar{x}^*_{jc}= \\bar{x}_j + w_c\\, s_j\\, \\delta^*_{jc}\n\\end{equation}\n\nNew features are added to the model based on the distance between $\\boldsymbol{x}_0$ and $\\boldsymbol{\\bar{x}}^*_{c}$. The amount of shrinkage is best optimized using the tuning methods described in later chapters. There are several variations of this specific procedure. @wangImprovedCentroids describe several different approaches and @efron2009empirical demonstrates the connection to Bayesian methods. \n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![An example of shrunken, class-specific centroids. Panel (a) shows data where there are three classes. Panel(b) demonstrates how, with increasing regularization, the centorids converge towards the global centroid (in black).](../figures/fig-nsc-1.svg){#fig-nsc fig-align='center' fig-alt='Nearest centroids' width=70%}\n:::\n:::\n\n\n@fig-nsc shows the impact of regularization for a simple data set with two predictors and three classes. The data are shown in Panel (a), while Panel (b) displays the raw, class-specific centroids. As regularization is added, the lines indicate the path each takes toward the global centroid (in black). Notice that the centroid for the first class eventually does not use predictor $x_1$; the path becomes completely vertical when that predictor is removed from the calculations. As a counter-example, the centroid for the third class moves in a straight line towards the center. This indicates that both predictors showed a strong signal, and neither was removed as regularization increased.  \n\nLike distance-based methods, predictors based on _data depth_ [@liu1999multivariate; @ghosh2005data;  @mozharovskyi2015classifying] can be helpful for separating classes. The depth of the data was initially defined by @tukey1975mathematics, and it can be roughly understood as the inverse of the distance to a centroid. For example, Mahalanobis depth would be:\n\n$$\nDepth_c(\\boldsymbol{x}_0) = \\left[1 + D_c(\\boldsymbol{x}_0)\\right]^{-1}\n$$\n\nThere are more complex depth methods, and some are known for their robustness to outliers. Again, like distances, class-specific depth features can be used as features in a model. \n\n## Other Methods\n\nThere are numerous other methods to create embeddings such as autoencoders[@michelucci2022introduction;@borisov2022deep]. @Boykis_What_are_embeddings_2023 is an excellent survey and discussion of modern embedding methods, highlighting methods for text and deep learning.\n\n## Chapter References {.unnumbered}\n",
    "supporting": [
      "embeddings_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}