{
  "hash": "154c28c8d36be0852c1a3c886d11e4ea",
  "result": {
    "engine": "knitr",
    "markdown": "---\nknitr:\n  opts_chunk:\n    cache.path: \"../_cache/grid/\"\n---\n\n# Grid Search {#sec-grid-search}\n\n\n\nGrid search is a method to optimize a model pipeline's tuning parameters. It creates a pre-defined set of candidate values and computes performance for each. From there, the numerically best candidate could be chosen, or the relationship between the tuning parameter(s) and model performance can be inspected to see if the model might benefit from additional optimization. \n\nSuppose there is a single tuning parameter, as in the $n_{min}$ example of @sec-external-validation; each candidate takes a scalar value (quantitative or qualitative). For other models, there are multiple tuning parameters. For example, support vector machine models can have two or three tuning parameters, the Elastic Net model has two tuning parameters, and the boosted tree model has multiple tuning parameters.  We'll look at two of the boosted tree parameters in detail below. \n\nThe previous chapter demonstrated that using external data to evaluate the model is crucial (be it resampling or a validation set). Grid search has no free lunch: we cannot simply fit the model to each candidate set and evaluate them by simply re-predicting the same data. \n\n@alg-grid-search formally describes the grid search process. For a model with $m$ tuning parameters, we let $\\Theta$ represent the collection of $s$ candidate values. For each specific combination of parameters ($\\theta_j$), we resample the model to produce some measure of efficacy (e.g., $R^2$, accuracy, etc.)^[This process was illustrated in @alg-resampling.]. From there, the best value is chosen, or additional work is carried out to find a suitable candidate. \n\n::: {#alg-grid-search}\n\n:::: {.columns}\n\n::: {.column width=\"10%\"}\n\n:::\n\n::: {.column width=\"80%\"}\n\n```pseudocode\n#| html-line-number: true\n#| html-line-number-punc: \":\"\n\n\\begin{algorithm}\n\\begin{algorithmic}\n\\State $\\mathfrak{D}^{tr}$: training set of predictors $X$ and outcome $y$\n\\State $B$: number of resamples\n\\State $M(\\mathfrak{D}^{tr}, B)$: a mapping function to split $\\mathfrak{D}^{tr}$ for each of  $B$ iterations.\n\\State $f()$: model pipeline \n\\State $\\Theta$: Parameter set ($s \\times m$) with candidates $\\theta_j$\n\\For{$j=1$ \\To $s$}\n  \\State Generate $\\hat{Q}_{j} =$ \\Call{Resample}{$\\mathfrak{D}^{tr}, f(\\cdot;\\theta_j), M(\\mathfrak{D}^{tr}, B)$} corresponding to candidate $\\theta_j$.\n\\EndFor\n\\State Determine $\\hat{\\theta}_{opt}$ that optimizes $\\hat{Q}_{j}$.\n\\end{algorithmic}\n\\end{algorithm}\n```\n\n:::\n\n::: {.column width=\"10%\"}\n\n:::\n\n::::\n\nGrid search for tuning parameter optimization that loops over the resampling algorithm shown in @alg-resampling.\n\n:::\n\n\n\nTo demonstrate, this chapter will initially focus on grids for a boosted tree model with two tuning parameters. Recall that a boosted tree is a collection of individual decision trees created sequentially. One parameter related to the process of creating the ensemble is the learning rate: the next tree uses information from the last tree to improve it. An important parameter is how much, or how _fast_ it learns. It could be that some data sets need a large number of trees that evolve slowly (i.e., low learning rate) to find an optimal value of the performance metric.  Alternatively, other data sets require fewer trees that change rapidly for optimal predictive performance. The learning rate parameter must be greater than zero, and is typically in the range of 10<sup>-5</sup> to  10<sup>-1</sup>.  Because the range of this parameter is very large, it is best conceptualized in log units. \n\nWe'll illustrate different strategies of grid search using this model setup with varying configurations of the learning rate and the number of trees in the ensemble. \n\nThere are two main classes of grids: regular and irregular. We can view generating a collection of candidate models as a statistical design of experiments (DOE) problem [@BHH]. There is a long history of DOE, and we'll invoke relevant methods for each grid type. @santner2018design and @gramacy2020surrogates have excellent overviews of the DOE methods discussed in this chapter. \n\nThe following two sections describe different methods for creating the candidate set $\\Theta$. Subsequent sections describe strategies for making grid search efficient using tools such as parallel processing and model racing. \n\n## Regular Grids {#sec-regular-grid}\n\nA regular grid starts with a sequence or set of candidate values for each tuning parameter and then creates all combinations. In statistics, this is referred to as a factorial design. The number of values per tuning parameter does not have to be the same. \n\nTo illustrate a regular grid, we'll use five values of the number of trees (1, 500, 1000, 1500, and 2000) and three values of the learning rate (10<sup>-3</sup>, 10<sup>-2</sup>, and 10<sup>-1</sup>). This grid of 15 candidates is shown in @fig-bst-grids. The grid covers the entire space with significant lacuna in between.  \n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Three types of grids (in columns) are illustrated with tuning parameters from a boosting model. Each grid contains 15 candidates. The space-filling design was created using the Audze-Eglais method described in @sec-irregular-grid.](grid-search_files/figure-html/fig-bst-grids-1.svg){#fig-bst-grids fig-align='center' width=85%}\n:::\n:::\n\n\n\n\nWe’ll use the simulated training set in @sec-complexity with the same 10-fold cross-validation scheme described there. Once again, Brier scores were used to measure how well each of the 15  configurations of boosted tree model predicted the data. @fig-bst-regular-grid-tuning shows the results: a single tree is a poor choice (due to underfitting), and there are several learning rate values that work well. Even though this is not a diverse set of candidate values, we can probably pick out a reasonable candidate with a small Brier score, such as 500 trees and a learning rate of 10<sup>-2</sup> (although there are a few other candidates that would be good choices). \n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![The boosted tree tuning results for the regular grid shown in @fig-bst-grids.](grid-search_files/figure-html/fig-bst-regular-grid-tuning-1.svg){#fig-bst-regular-grid-tuning fig-align='center' width=50%}\n:::\n:::\n\n\nThe pattern shown in this visualization is interesting: the trajectory for the number of trees is different for different values of the learning rate. The two larger learning rates are similar, showing that the optimal number of trees is in the low- to mid-range of our grid. The results for the smallest learning rate indicate that better performance might be found using _more_ trees than were evaluated. This indicates that there is an _interaction effect_ in our tuning parameters (just as we saw for predictors in @sec-interactions). This might not affect how we select the best candidate value for the grid, but it does help build some intuition for this particular model that might come in handy when tuning future models. \n\nGaining intuition is much easier for regular grids than other designs since we have a full set of combinations. As we’ll see shortly, this interaction is very hard to see for a space-filling design. \n\nThe primary downside to regular grids is that, as the number of tuning parameters increases, the number of points required to fill the space becomes extremely large (due to the curse of dimensionality). However, for some models and pre-processing methods, regular grids can be very efficient despite the number of tuning parameters (see the following section that describes the \"submodel trick\").  \n\n<a href=\"https://tidymodels.aml4td.org/chapters/grid.html#sec-grid-creation\">{{< fa brands r-project size=Large >}}</a>\n\n## Irregular Grids {#sec-irregular-grid}\n\nIrregular grids are not factorial in nature. A simple example is a _random grid_ where points are randomly placed using a uniform distribution on an appropriate range for each tuning parameter. A design of size 15 is shown in @fig-bst-grids. There are some gaps and clustering of the points, but the space for each individual dimension is covered well. The tuning results are shown in the top panels of @fig-bst-irregular-grid-tuning. Because it is an irregular design, we can't use the same visualization as in @fig-bst-regular-grid-tuning. Instead, a \"marginal\" plot is shown, where each numeric tuning parameter is plotted against performance in a separate panel. \n\nThe top left panel suggests that a very small learning rate is bad, but otherwise, there is not a strong trend. For the number of trees (in the top right panel), a small number of trees should be avoided, and perhaps the maximum number tested would be a good choice. From this plot, it is impossible to discover the interaction effect seen with the regular grid. However, this marginal plot is the main technique for visualizing the results when there are a moderate to large number of tuning parameters. The numerically best candidate was not too dissimilar from the regular grid: 1,898 trees and a learning rate of 10<sup>-2.7</sup>\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![The tuning results for the irregular grids shown in @fig-bst-grids. The lines are spline smooths.](grid-search_files/figure-html/fig-bst-irregular-grid-tuning-1.svg){#fig-bst-irregular-grid-tuning fig-align='center' width=80%}\n:::\n:::\n\n\nAnother type of irregular grid is a _space-filling design_ [@joseph2016space], where the goal is to make sure that the tuning parameter space is covered and that there is minimal redundancy in the candidate values. There are a variety of methods for achieving this goal. \n\nFor example, @fig-bst-grids shows a 15 point Audze-Eglais space-filling design. The space is covered more compactly than the regular design of the same size and is much more uniform than the 15 point random design. The lower panels of @fig-bst-irregular-grid-tuning show the tuning results. The results are somewhat cleaner than the random grid results but show similar trends. Here, the numerically best candidate was: 286 trees and a learning rate of 10<sup>-2</sup>. \n\nThere are many types of space-filling designs, and it is worth taking the time to take a quick tour of some of them. \n\nThe Latin hypercube design (LHD) is the most popular method for constructing space-filling designs [@Viana2016; @husslage2011space]. These designs have a simple definition. Suppose our hyperparameter space is rectangular and partitioned into smaller (hyper)cubes. From this, a LHD is a set of distinct points where no one dimension has multiple values in any bins^[Other applications may want the points to have properties such as orthogonality, symmetry, etc.]. We desire candidates that fill the space of each parameter and are not close to one another. \n\nThe most basic approach to creating a Latin hypercube design is random sampling [@Mckay2000]. If there are $m$ parameters and we request $s$ candidate values, the parameter space is initially divided into $s^m$ hypercubes of equal size. For each tuning parameter, $s$ regions in its dimension are selected at random, and a value is placed in this box (also at random). This process repeats for each dimension. Suppose there are ten bins for a parameter that ranges between zero and one. If the first design point selects bin two, a random uniform value is created in the range `[0.1 0.2)`.  @fig-lhs-sampled shows three such designs, each generated with different random numbers. \n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Three replicate Latin hypercube sampling designs of size ten for two parameters. Each design uses different random numbers. The grid lines illustrate the 100 hypercubes used to generate the values.](grid-search_files/figure-html/fig-lhs-sampled-1.svg){#fig-lhs-sampled fig-align='center' width=90%}\n:::\n:::\n\n\nTechnically, these designs cover the space of each predictor uniformly. However, large multivariate regions can be empty. For example, one design only samples combinations along the diagonal. Additional constraints can make the design more consistent with our desires. \n\n\n\nFor example, we could choose points to maximize the minimum pairwise distances between the candidates. These designs are usually referred to as MaxiMin designs [@pronzato2017minimax]. Comparing the two irregular designs in @fig-bst-grids, the random grid has a maximum minimum distance between candidates  of 0.09. In contrast, the corresponding space-filling design's value (0.26) is 2.9-fold larger^[Using Euclidean distance.]. The latter design was optimized for coverage, and we can see far less redundancy in this design. \n\nA similar method, initially proposed by @audze1977new, maximizes a function of the inverse distances between $s$ candidate points: \n\n$$\ncriterion = \\sum_{i=1}^s \\sum_{j=1,\\;i\\ne j}^s\\frac{1}{dist(\\theta_i, \\theta_j)^2}\n$$\n\n@bates2004formulation devised search methods to find optimal designs for this criterion.\n\nSome other space-filling designs of note: \n\n- Maximum entropy sampling selects points based on assumptions related to the distributions of the tuning parameters and their covariance matrix [@shewry1987maximum;@joseph2015maximum]. \n\n- Uniform designs [@fang2000uniform;@wang2022design] optimally allocate points so that they are uniformly distributed in the space. \n\nWhile these methods can be generally constructed by sampling random points and using a search method to optimize a specific criterion, there has been scholarship that has pre-optimized designs for some combination of the number of tuning parameters and the requested grid size. \n\nThe advantage of space-filling designs over random designs is that, for smaller designs, the candidates do a better job covering the space and have a low probability of producing redundant points. Also, it is possible to create a space-filling design so that the candidates for each numerical parameter are nearly equally spaced (as was done in @fig-bst-grids). \n\nMany designs assume that all the tuning parameter values are quantitative. That may not always be the case. For example, K-nearest neighbors can adjust its predictions by considering how far the cost are from a new point; more distant points should not have the same influence as close cost. A weighting function can be used for this purpose. For example, weights based on the inverse of the distance between neighbors may produce better results. Equal weighting is often called a \"rectangular weighting\" function. The type of algebraic function used for weighting is a qualitative tuning parameter. \n\nA simple workaround for creating a space-filling design is to repeat the unique parameter values as if they were $s$ distinct values when making the design. This allows them to be used with a Latin hypercube design and any space-filling design that uses this approach is not technically optimal. Practically speaking, this is an effective approach for tuning models.  However, there are _sliced_ LHD that can accomplish the same goal [@qian2012sliced;@ba2015optimal].\n\nWe recommend space-filling designs since they are more efficient than regular designs. Regular designs have a lot of benefits when using an unfamiliar modeling methodology since you will learn a lot more about the nuances of how the tuning parameters affect one another. \n\n<a href=\"https://tidymodels.aml4td.org/chapters/grid.html#sec-grid-creation\">{{< fa brands r-project size=Large >}}</a>\n\n## Efficient Computations for Conventional Grid Search {#sec-efficient-grid}\n\n\n\nThe computational cost of grid search can become large, depending on the resampling strategy and the number of candidates under consideration. In our example, a total of 150 boosted tree models are evaluated (5 values of the number of trees, 3 values of the learning rate, and 10-fold cross-validation) before determining which candidates are most favorable to our data. \n\nWe’ll look at three approaches to making grid search more efficient. One method (submodels) happens automatically for some types of models, another approach (parallel processing) uses software engineering tools, and the last tool (racing) is a statistical solution.\n\nTo illustrate these more efficient search approaches, a 100 grid point space-filling design will be used with a large parameter range (1 to 3000 trees) and learning rates between 10<sup>-5</sup> and 10<sup>-1</sup>.\n\n### Submodels {#sec-submodels}\n\nLet's begin by understanding the submodel trick.  For some models a single training model can be used to predict many tuning parameter candidates. For example, the boosted tree model that we have been using creates a sequential ensemble of decision trees, each depending on the previous. Suppose that a boosting model with 3,000 trees is created. Most implementations of boosted trees can use this model to predict the outcomes of any smaller ensemble size.  Therefore, we only need to build the boosted tree model using the largest number of trees for each specific combination of the remaining tuning parameters.   For a regular grid, this can effectively drop a dimension of the computations. Depending on the model and grid, the speed-up for using this approach can be well into double digits.\n\nSome different models and pre-processors can have this quality, including the glmnet model (@sec-logistic-penalized), partial least squares (@sec-pls), principal component feature extraction (@sec-pca), and others. \n\nUnfortunately, irregular designs cannot exploit the submodel trick since they are not factorial in nature. A hybrid design could be used where a dense sequence of $s_1$ parameter values is created for the tuning parameter associated with submodels and a separate space-filling design of size $s_2$ for the other parameters. These two grids can be crossed so that the space-filling design is replicated for each value of the submodel parameter. This produces $s_1\\times s_2$ grid points but, effectively, only $s_2$ models are fit. \n\nFor our larger grid, we created a similar regular grid of 100 points with the same expanded ranges of parameters. There were 10 unique, evenly spaced values for both parameters. To evaluate this grid, we only need to train 10 models. Compared to the analogous space-filling design, the regular grid was 3.4 times faster to evaluate. \n\n### Parallel Processing {#sec-parallel}\n\nFortunately, none of the  1,000 models in our large grid depend on one another and can be computed separately. Since almost all modern computers have GPUs and multiple CPUs, we can break the computations into different \"chunks\" of work and execute them simultaneously on distinct processors (or separate computers entirely). The parallel processing of models can significantly reduce the time it takes to tune using grid search.\n\n\n\nFor example, consider the space-filling designs with 15 candidates evaluated across 10 resamples. We spread the 150 model fits across 10 worker processes (on the same computer). Despite the meager computation costs of training each boosted tree, there was still a 5.3-fold speedup (34.2s versus 6.5s) when run in parallel. \n\nHowever, there are some important nuances that we should consider before initiating parallel processing.\n\nFirst, it is an excellent idea to parallelize the \"longest loop\" (literally or figuratively). Looking back at @alg-grid-search, there is a loop across the $s$ candidates in line 6. Line 7 contains the resampling loop across $B$ resamples. If the data set is large, it may be optimal to invert the loop where we parallel process across the $B$ resamples and execute the $s$ models within each. Keeping each resample on a single worker means less input/output traffic across the workers. See @tmwr [Section 13.5.2](https://www.tmwr.org/grid-search#parallel-processing). Alternatively, if the data are not large, it could be best to \"flatten\" the two loops into a single loop with $s\\times B$ iterations (with as many workers as possible). \n\nAdditionally, if expensive preprocessing is used, a naive approach where each pipeline is processed in parallel might be counterproductive because we unnecessarily repeat the same preprocessing. For example, suppose we are tuning a supervised model along with UMAP preprocessing. By sending each of the $s$ candidates to a worker, the same UMAP training occurs for each set of candidates that correspond to the supervised model. Instead, a _conditional process_ can be used where we loop across the UMAP tuning parameter combinations and, for each, run another loop across the parameters associated with the supervised model. \n\nAnother consideration is memory. If the data used to train and evaluate the model are copied for each worker, the number of workers can be restricted to fit within system memory.  A well thought out process can avoid this unnecessary restriction.\n\nWhen we understand the computational aspects of parallel processing, we can almost always use it to greatly reduce the time required for model tuning.\n\n<a href=\"https://tidymodels.aml4td.org/chapters/whole-game.html#sec-parallel-processing\">{{< fa brands r-project size=Large >}}</a> \n\n### Racing {#sec-racing}\n\n\n\nA third way we can improve the model tuning process is through Racing [@maron1997racing].  This technique adaptively resamples the data during grid search. The goal is to cull tuning parameter combinations that have no real hope of being optimal before they are completely resampled. For example, in our previous tuning of the boosting model using a regular grid, it is clear that a single tree performs very poorly. Unfortunately, we will not  know this until all the computations are finished.\n\nRacing tries to circumvent this issue by doing an interim statistical analysis of the tuning results. From this, we can compute a probability (or score) that measures how likely each candidate will be the best (for some single metric). If a candidate is exceedingly poor, we usually can tell that after just a few resamples^[Note that racing requires multiple assessment sets. A single validation set could not be used with racing.]. \n\nThere are a variety of ways to do this. See @kuhn2014futility, @krueger2015fast, and @bergman2024don. The general process is shown in @alg-race. The resampling process starts normally for the first $B_{min}$ resamples. Lines 7-12 can be conducted in parallel for additional computation speed. After the initial resampling for all candidates, the interim analysis at iteration $b$ results in a potentially smaller set of $s_b$ candidates. Note that parallel processing can be incorporated into this process for each loop and the speed-up from using submodels also occurs automatically. \n\nAt each resampling estimate beyond the first $B_{min}$ iterations, the current candidate set is evaluated for a single resample, and the interim analysis potentially prunes tuning parameter combinations. \n\n::: {#alg-race}\n\n:::: {.columns}\n\n::: {.column width=\"10%\"}\n\n:::\n\n::: {.column width=\"80%\"}\n```pseudocode\n#| label: alg-race\n#| html-line-number: true\n#| html-line-number-punc: \":\"\n\n\\begin{algorithm}\n\\begin{algorithmic}\n\\State $\\mathfrak{D}^{tr}$: training set of predictors $X$ and outcome $y$\n\\State $B$: number of resamples\n\\State Initial number of resamples $1 \\lt B_{min} \\lt B$ executed prior to analysis\n\\State $M(\\mathfrak{D}^{tr}, B)$: a mapping function to split $\\mathfrak{D}^{tr}$ for each of  $B$ iterations.\n\\State $f()$: model pipeline \n\\State $\\Theta$: Parameter set ($s \\times m$) with candidates $\\theta_j$\n\\For{$j=1$ \\To $s$}\n  \\For{$b=1$ \\To $B_{min}$}\n    \\State Generate $\\hat{Q}_{jb} =$ \\Call{Resample}{$\\mathfrak{D}^{tr}, f(\\cdot;\\theta_j), M_b(\\mathfrak{D}^{tr}, B)$}\n  \\EndFor\n\\State Compute $\\hat{Q}_{j} = 1/B_{min}\\sum_b \\hat{Q}_{jb}$. \n\\EndFor\n\\State Eliminate candidates to produce $\\Theta^b$ ($s_b \\times m$)\n  \\For{$b = B_{min} + 1$ \\To $B$} \n    \\For{$j=1$ \\To $s$}\n      \\State Generate $\\hat{Q}_{jb} =$ \\Call{Resample}{$\\mathfrak{D}^{tr}, f(\\cdot;\\theta_j), M_b(\\mathfrak{D}^{tr}, B)$}\n      \\State Update candidate subset $\\Theta^b$ by applying the filtering analysis\n    \\Endfor\n  \\Endfor\n\\State Determine $\\hat{\\theta}_{opt}$ that optimizes $\\hat{Q}_j^k$.   \n\\end{algorithmic}\n\\end{algorithm}\n```\n\n:::\n\n::: {.column width=\"10%\"}\n\n:::\n\n::::\n\nUsing racing for grid search tuning parameter optimization. \n\n:::\n\nThe details are in the analysis used to discard tuning parameter combinations.  For simplicity, we’ll focus on a basic method that uses a form of analysis of variance (ANOVA), a standard statistical tool for determining whether there are differences between conditions [@kutner2004applied]. In our context, the conditions are the tuning parameter candidates; we ignore their values and treat them as qualitative samples from the distribution of all possible tuning parameter combinations. The ANOVA model uses the candidate conditions as the predictor and the metric of choice as the numeric outcome. \n\nThere are two statistical considerations that we need to understand when using an ANOVA model for evaluating Racing results. \n\nFirst, the ANOVA model is used for statistical inference.  Specifically, we’ll use it to compute confidence intervals on differences in performance. This means that the probabilistic assumptions about our data matter. The ANOVA method requires that the errors follow a Gaussian distribution. That distribution can be strongly influenced by the distribution of the outcome, and, in our case, this is a performance metric. Previously, we used the Brier score, which has non-negative values and might be prone to follow a right-skewed statistical distribution. However, each resampled Brier score is the average of differences, and the Central Limit Theorem suggests that as the number of data points used to compute the score increases, the sampling distribution will become more Gaussian. If we use this approach to assess parameter candidates, then we should check the normality assumptions of the errors. \n\nThe second statistical complication is related to the resamples. Basic ANOVA methods require the data to be independent of one another, which is definitely not the case for resampling results. A \"within-resample\" correlation occurs since some resamples are \"easier\" to predict than others. This means that the metrics associated with each resample are more similar to one another than to the metrics from other resamples. \n\nThis extra correlation means that a simple ANOVA model cannot be used. Instead, our interim analysis should instead use a hierarchical random effects model. This is the same methodology used in @sec-effect-encodings for effect encodings. We’ll treat our set of resamples as a random sample of possible resampling indices. The ANOVA model itself is: \n\n$$\nQ_{ij} =(\\beta_0 + \\beta_{0i}) + \\beta_1x_{i1} + \\ldots +  \\beta_{s-1}x_{i(s-1)}+ \\epsilon_{ij}\n$$ {#eq-perf-mod-racing}\n\nfor $i=1,\\ldots, B$ resamples and $j=1, \\ldots, s$ candidates. This random intercept model assumes that the ranking of candidates is the same across resamples and only the magnitude of the pattern changes from resample to resample. \n\nThis model’s form is the reference cell parameterization discussed in @sec-indicators. For each interim analysis, the reference cell will be set to the current best candidate. This means that the $\\hat{\\beta}_j$ parameter estimates represent the loss of performance relative to the current best. A one-sided confidence interval is constructed to determine if a candidate should be removed. We can stop considering candidates whose interval does not contain zero. \n\n\n\n\nTo demonstrate the racing procedure, we re-evaluated our larger a space-filling design. The order of the folds was randomized, and after 3 resamples, the ANOVA method was used to analyze the results. @fig-racing-initial shows the one-sided 95% confidence intervals for the loss of Brier score relative to the current best configuration (2030 trees and a learning rate of 10<sup>-2.78</sup>). Sixty-Six were eliminated at this round. \n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![The first interim analysis in racing using a larger space-filling design for the boosted tree model.](grid-search_files/figure-html/fig-racing-initial-1.svg){#fig-racing-initial fig-align='center' width=70%}\n:::\n:::\n\n\nIn the end, the racing process eliminated all but 7 candidates. The process eliminated candidates at iterations three (66 configurations), four (14 configurations), five (7 configurations), six (1 configuration), seven (2 configurations), eight (2 configurations), and nine (1 configuration). In all, 404 models were fit out of the possible 1,000 (40.4%). The numerically best candidate set for racing and basic grid search were the same: 576 trees and a learning rate of 10<sup>-2.3</sup>.\n\nThe model in @eq-perf-mod-racing allows us to estimate the within-resample correlation coefficient. This estimates how similar the performance metric values are to one another relative to values between resamples. In our example, the estimate of within resample correlation is 0.6, and is a good example of why we should use @eq-perf-mod-racing when culling parameter candidates. \n\nIn summary, racing can be an effective tool for screening a large number of models while using comprehensive grids. \n\n<a href=\"https://tidymodels.aml4td.org/chapters/grid.html#racing\">{{< fa brands r-project size=Large >}}</a>\n\n## Optimization Bias and Nested Resampling {#sec-nested-resampling}\n\n\n\nIn the last section, we found that the numerically best candidate was 576 trees and a learning rate of 10<sup>-2.3</sup>. The corresponding resampling estimate of the Brier score was 0.0783 with a standard error of 0.0053. If someone were to ask us how well the optimal boosted tree performs, we would probably give them these performance estimates. \n\nHowever, there is an issue in doing so that may affect our decision for selecting the optimal tuning parameters. We are using grid search and resampling to find the best combination of parameters _and_ to estimate the corresponding performance. The problem is that we don't know how accurate or precise the estimate of the _optimal_ candidate may be. In some situations, this dual use of the model tuning process can introduce **optimization bias** where, to some degree, our performance statistics are optimistic. \n\nThis issue has been studied extensively in the high-dimensional biology literature, where there could be dozens of samples but thousands of predictors. In this case, feature selection is of paramount importance. However, the process of selecting important predictors in this situation can be very difficult and often leads to unstable models or preprocessing methods that overfit the predictor set to the data. Discussions of these issues can be found in @varma2006bias, @boulesteix2009optimal, @bischl2012resampling, and @bernau2013correcting.\n\nIn this section, we'll introduce a few methods to quantify and correct for optimization bias. These approaches are not specific to traditional grid search; they can be used with racing, iterative search, or any algorithm that we use to optimize a model. Some of the concepts can be difficult and, for this reason, we'll use a simplified grid search scenario. Let's optimize our boosted tree by fixing the number of boosting iterations to 500 and only optimize the learning rate. But the tools that we are about to discuss are not limited to a single tuning parameter. Simplifying the task in this way allows us to visualize and explain the process^[Unfortunately, this is an example that is not prone to optimization bias. We'll see examples later on this website where we can more effectively use these tools.].\n\nUsing the same 10-fold cross-validation scheme, @fig-1d-boost shows the results of a conventional grid search over the learning rate where 100 values of that parameter were evaluated. As usual, the line indicates the average of the Brier scores produced by the 10 assessment sets. The results of this process indicates that the smallest Brier score is achieved with a learning rate of 10<sup>-2.23</sup>. The Brier score that corresponds to this tuning parameter value is estimated to be 0.0782 with corresponding standard error of 0.00536.\n\n::: {#fig-1d-boost}\n\n::: {.figure-content}\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](grid-search_files/figure-html/shiny-1d-boost-1.svg){fig-align='center' width=70%}\n:::\n:::\n\n\n:::\n\nBasic grid search for learning rate with 100 grid points. The dotted vertical line shows the optimal learning rate using the overall resampling estimates. The colored rug values show the learning rates that were optimal _within each resample_. There were 2 learning rates selected more than once: 10<sup>-2.27</sup> and 10<sup>-1.91</sup>.\n\n:::\n\nHow can we estimate the potential bias in the process that led to this performance metric?  @tibshirani2009bias  describes a simple analytical estimator applicable when multiple resamples are used to estimate performance. First, we obtain the performance estimates corresponding to the optimal tuning parameter candidate _within each fold_. Let's call these $\\hat{Q}_j^*$ (where $j=1\\ldots B$). They are represented in @fig-1d-boost as the colored \"rug\" lines at the bottom of the figure. We know that our conventional analysis of this grid search finds that a learning rate of 10<sup>-2.23</sup> to be optimal. We can find the metric values associated with the global optimum for each resample (denoted as $\\hat{Q}_j^{opt}$). For each resample, we now have matched performance estimates for the local optima as well as the global optimum. The difference between these values is an estimate of the bias in optimization.  If different resamples have very different optimal performance metrics compared to the optimal performance determined using the averages of the resamples (as shown in @fig-1d-boost), bias can increase. The estimate of the bias is then: \n\n$$\\widehat{bias} = \\frac{1}{B}\\sum_{j=1}^B\\left[\\hat{Q}_j^{opt} - \\hat{Q}_j^*\\right]$$\nFor this particular example, the bias is fairly small (0.000931 with standard error 0.000304). To correct the conventional estimator, we add the bias; the Brier score is adjusted from 0.0782 to 0.0791. A more complex analytical method can be found in @tibshirani2018excess.\n\nWe can also estimate optimization bias with more complex resampling schemes. Recall that the issue is that we are overextending the conventional resampling scheme by doing too much with the same data (i.e., estimating overall performance assessment and the optimal performance value). Nested resampling [@varma2006bias;@boulesteix2009optimal] prevents this overuse by using two layers of resampling: the \"inner resamples\" are used to estimate the optimal candidate values, and the \"outer resamples\" estimate performance at those values. \n\nFor example, our current resampling scheme is 10-fold cross-validation. Since the training set has 2,000 samples, each fold uses 1,800 to fit the model and a separate 200 for assessment. Nested resampling would create 10 more independent resampling schemes within each of the 1,800-point analysis sets. If we once again used 10-fold cross-validation for the inner resamples, each would contain 10 analysis sets of size 1,620 with corresponding assessment sets of 180 data points. \n\nThe process starts with the inner resamples. The same model tuning procedure is used (basic grid search in our example), and each of the inner resamples estimates its own optimal candidate $\\hat{\\theta}_k$. The outer resample takes this candidate value and estimates its performance using the assessment sets from the outer resampling loop.  These outer estimates, whose data were never used to tune the model, are averaged to produce the nested resampling estimate of performance. \n\n\n\nConsider @fig-nested. The colored lines in the left-hand panel show the results of the 10 inner resamples. Each line is made up of the averages of the inner 10 assessment sets of size 180. The filled circles along these lines indicate the optimal learning rate for that inner resample. Each outer resample takes its corresponding learning rate, trains that model using its analysis set of 1,800 points, and computes performance using its 200 assessment samples. These 10 statistics are averaged to get the final performance estimate, which should be free of any optimization bias. \n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Each line corresponds to a complete resampled grid search that uses the inner resamples. The points indicate the estimates of the optimal learning rate as determined by the inner results. The panel on the right contrasts the Brier score for the inner assessment set with the outer assessment sets.](grid-search_files/figure-html/fig-nested-1.svg){#fig-nested fig-align='center' width=80%}\n:::\n:::\n\n\nWe can see that the resample-specific optimal learning rates vary but are within a consistent region. There are a few resamples that found the same optimal value. There is some variation in the y-axis too; different assessment sets produce different values. The standard error of these inner statistics, 0.000537, is much smaller than the value of the conventional estimate (0.00536).\n\nThe panel on the left shows boxplots of the Brier scores for the inner resamples and the corresponding outer resample estimates. The standard error of the outer resamples is very similar to the the level of noise in the conventional estimate.  \n\nIn the end, the nested resampling estimate of the Brier score was estimated as 0.0784; a value very close to the single 10-fold cross-validation result shown in @fig-1d-boost.\n\n::: {.important-box}\nIt is important to emphasize that nested resampling is for **verification, not optimization**. It provides a better estimate of our model optimization process; it does not replace it. \n:::\n\nWe might best communicate the results of nested resampling like this: \n\n> We tuned the learning rate of our boosted classification tree using grid search and found that a rate of 10<sup>-2.23</sup> to be best. We think that this model has a corresponding Brier score, measured without optimization bias, of 0.0784. \n\nWe can look at the candidates produced by the inner resamples to understand the stability of the optimization process and potentially diagnose other issues. We _would not_ choose \"the best\" inner resampling result and move forward with its candidate value^[To reiterate, the nested resampling process is used to characterize our optimization process. If it _becomes_ our optimization process, we would need to nest it inside _another_ nested resample.]. \n\nIt is a good idea to use nested resampling when the training set is small, the predictor set is very large, or both. The lack of significant bias in the analysis above does not discount the problem of optimization bias. It exists but can sometimes be within the experimental noise. \n\nIt is a good idea to choose an inner resampling scheme that is as close as possible to the single resampling scheme that you used for optimization. The outer scheme can vary depending on your needs. Care should be used when the outer resampling method is the bootstrap. Since it replicates training set points in its analysis sets, the inner resamples need to use the _unique_ rows of the original training set. Otherwise the same data point might end up in both the inner analysis and assessment sets. \n\nThe primary downside to nested resampling is the computational costs. Two layers of resampling have a quadratic cost, and only the inner resamples can be executed in parallel. Using 10 workers, the analysis in @fig-nested took 6.6-fold longer to compute than the basic grid search that produced @fig-1d-boost.\n\n## Setting Parameter Ranges {#sec-parameter-ranges}\n\nSpecifying the range of parameters used to define the grid may involve some guesswork. For some parameter types, there is a well understood and defined range. For others, such as learning rate, there is a lower bound (zero) and a loosely defined upper bound mostly based on convention and prior experience. For grids, we want to avoid configurations with few unique values and a wide range. This might not sample the section of the parameter space that includes nonlinearity and the region of optimal results. @fig-learn-rate-seq shows an example of this for the learning rate. The initial grid included three points that missed the regions of interest. @fig-learn-rate-grid did a better job with more grid points. In high dimensional parameter space, the likelihood of a poor grid increases, especially for relatively \"small\" grid sizes. \n\nWe often envision the relationship between a predictor and model performance as being a sharp peak. If we cannot find the pinnacle, the model optimization would fail. Luckily, as seen in @fig-nested, there are often substantial regions of parameter space with good performance. Model optimization may not be superficially easy but it is often not impossible. We only need to sample the optimal region once to be successful. \n\nIf we worry that our tuning grid did not produce good results, another strategy is to _increase_ the parameter ranges and use an iterative approach that can naturally explore the parameter space and let the current set of results guide the exploration about the space. These methods are discussed in the next chapter. \n\n## Chapter References {.unnumbered}\n",
    "supporting": [
      "grid-search_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}