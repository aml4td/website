{
  "hash": "57d874f837259227af7ca91fb0bcbc07",
  "result": {
    "engine": "knitr",
    "markdown": "---\nknitr:\n  opts_chunk:\n    cache.path: \"../_cache/missing-data/\"\n---\n\n\n# Missing Data {#sec-missing-data}\n\n\n\n\n\nWhen collecting data for data analysis, it is not uncommon for some predictor values to be missing. There can be a multitude of reasons that this can happen. For example, when creating a laboratory test for a respiratory disease, there may be no result in the data. This could be for a few reasons. First, it might have been a data collection error; someone forgot to include the value. It could also be due to a database merge where a key field was unspecified and a subset of the data was not properly combined. It is also possible that the test itself failed to produce a result. For example, for diagnostics that use throat swabs to collect the sample, the test might fail because of an interfering substance, such as food coloring from a lozenge being on the swab. In any case, one or more predictors might not have values. \n\nIn this chapter, we’ll review why missing data can occur, whether you need to do anything about it, and, if so, how to impute the absent values. \n\n## Why are Values Missing? \n\nThe most important question to ask when encountering missing data is: why are the values missing? It is a good idea to know and can substantially affect how we compensate for the problem. In the example of the laboratory test, it could be that a random defect in the test kit was to blame. In this instance, the value was missing completely at random (MCAR). If this is the case, we have significant latitude in terms of how to handle the situation. As a counter-example, suppose that patients with more severe illnesses were more likely to deal with their symptoms via lozenges. If the likelihood of a missing value is a function of some other variable (whether it is in the data or not), the missingness of the data is _informative_. Here, we have to worry about biases that can creep into our analysis, which might reduce the effectiveness of our model. \n\nFirst, it is imperative to understand _why_ the data are missing. \n\nexamples: scat, closed station, database merge, completely random events/not so random events (assays and interfering substances). \n\n\n\n\n\n\nLet’s look at an example data set. Unfortunately, this is an existing public data set, so we don’t have first-hand knowledge of the problem. Data are from an Audobon Society Field Guide where 8,124 data points on mushrooms regarding their physical characteristics such as dimensions, color, or odor of their stalks and veils. \n\nThere is one characteristic, the type of roots at the bottom of the stalk, that has missing values (30.5%). There are four different types of stalk roots: bulbous, club, equal, and rooted. \n\nSince we don't have mushroom foraging experts on hand, let's investigate to see if we can connect the likelihood of missingness to any other columns in the data set^[For this data set, the primary outcome being predicted is whether the mushroom is edible or not. Since imputation does not involve the outcome, we excluded this column from all subsequent analyses in this chapter.]. This is another example of where exploratory data analysis. Since we are on a \"fishing expedition\" where we engage in a non-specific search for clues, it makes sense to protect ourselves from bias by first splitting the data into a training and test set. We used a 75/25 split into training and test sets by stratifying on whether the stalk root was missing or not. From here, we used visualizations of the other columns to see if they show a pattern of missingness. We also used some analysis techniques to accentuate the process. \n\nSince all of the columns in this data set are categorical, we can compute the rate of missingness across the values of each predictor and use a statistical test (or confidence interval) to see if there are differences in missingness for the different levels of the predictors. In doing so, the \"spore print color\" seemed interesting. The spore print is the substance that falls from the mushroom to the ground. The values in the data set are: black, brown, chocolate, green, purple, and white. @tbl-spore-print shows missingness statistics for each color. Four colors have extremely large probabilities for missingness in the stalk root: white, orange, yellow, and  \"buff\" (yellow-ish). These colors might be missing because they are difficult to see in the wild or on a white paper background. In any case, we would investigate whether the missing value mechanism could contribute bias to our analysis. \n\n\n::: {#tbl-spore-print .cell tbl-cap='The distribution of missingness in the stalk root predictor as a function of the spore print color.'}\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"tvigdpdxvs\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#tvigdpdxvs table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#tvigdpdxvs thead, #tvigdpdxvs tbody, #tvigdpdxvs tfoot, #tvigdpdxvs tr, #tvigdpdxvs td, #tvigdpdxvs th {\n  border-style: none;\n}\n\n#tvigdpdxvs p {\n  margin: 0;\n  padding: 0;\n}\n\n#tvigdpdxvs .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FCFEFE;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#tvigdpdxvs .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#tvigdpdxvs .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FCFEFE;\n  border-bottom-width: 0;\n}\n\n#tvigdpdxvs .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FCFEFE;\n  border-top-width: 0;\n}\n\n#tvigdpdxvs .gt_heading {\n  background-color: #FCFEFE;\n  text-align: center;\n  border-bottom-color: #FCFEFE;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#tvigdpdxvs .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#tvigdpdxvs .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#tvigdpdxvs .gt_col_heading {\n  color: #333333;\n  background-color: #FCFEFE;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#tvigdpdxvs .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FCFEFE;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#tvigdpdxvs .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#tvigdpdxvs .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#tvigdpdxvs .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#tvigdpdxvs .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#tvigdpdxvs .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FCFEFE;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#tvigdpdxvs .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FCFEFE;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#tvigdpdxvs .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#tvigdpdxvs .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#tvigdpdxvs .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#tvigdpdxvs .gt_stub {\n  color: #333333;\n  background-color: #FCFEFE;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#tvigdpdxvs .gt_stub_row_group {\n  color: #333333;\n  background-color: #FCFEFE;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#tvigdpdxvs .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#tvigdpdxvs .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#tvigdpdxvs .gt_summary_row {\n  color: #333333;\n  background-color: #FCFEFE;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#tvigdpdxvs .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#tvigdpdxvs .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#tvigdpdxvs .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#tvigdpdxvs .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FCFEFE;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#tvigdpdxvs .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#tvigdpdxvs .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#tvigdpdxvs .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#tvigdpdxvs .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#tvigdpdxvs .gt_footnotes {\n  color: #333333;\n  background-color: #FCFEFE;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#tvigdpdxvs .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#tvigdpdxvs .gt_sourcenotes {\n  color: #333333;\n  background-color: #FCFEFE;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#tvigdpdxvs .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#tvigdpdxvs .gt_left {\n  text-align: left;\n}\n\n#tvigdpdxvs .gt_center {\n  text-align: center;\n}\n\n#tvigdpdxvs .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#tvigdpdxvs .gt_font_normal {\n  font-weight: normal;\n}\n\n#tvigdpdxvs .gt_font_bold {\n  font-weight: bold;\n}\n\n#tvigdpdxvs .gt_font_italic {\n  font-style: italic;\n}\n\n#tvigdpdxvs .gt_super {\n  font-size: 65%;\n}\n\n#tvigdpdxvs .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#tvigdpdxvs .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#tvigdpdxvs .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#tvigdpdxvs .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#tvigdpdxvs .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#tvigdpdxvs .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#tvigdpdxvs .gt_indent_5 {\n  text-indent: 25px;\n}\n</style>\n<table class=\"gt_table\" style=\"table-layout: fixed;\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <colgroup>\n    <col/>\n    <col/>\n    <col/>\n    <col/>\n  </colgroup>\n  <thead>\n    <tr class=\"gt_col_headings gt_spanner_row\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"2\" colspan=\"1\" style=\"border-top-width: 1.8px; border-top-style: solid; border-top-color: #000000; border-bottom-width: 1.8px; border-bottom-style: solid; border-bottom-color: #000000;\" scope=\"col\" id=\"Spore Print Color\">Spore Print Color</th>\n      <th class=\"gt_center gt_columns_top_border gt_column_spanner_outer\" rowspan=\"1\" colspan=\"3\" scope=\"colgroup\" id=\"Stalk Root Missing\">\n        <span class=\"gt_column_spanner\">Stalk Root Missing</span>\n      </th>\n    </tr>\n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" style=\"border-top-width: 1.8px; border-top-style: solid; border-top-color: #000000; border-bottom-width: 1.8px; border-bottom-style: solid; border-bottom-color: #000000;\" scope=\"col\" id=\"no\">no</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" style=\"border-top-width: 1.8px; border-top-style: solid; border-top-color: #000000; border-bottom-width: 1.8px; border-bottom-style: solid; border-bottom-color: #000000;\" scope=\"col\" id=\"yes\">yes</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" style=\"border-top-width: 1.8px; border-top-style: solid; border-top-color: #000000; border-bottom-width: 1.8px; border-bottom-style: solid; border-bottom-color: #000000;\" scope=\"col\" id=\"%\">%</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"Spore Print Color\" class=\"gt_row gt_left\">buff</td>\n<td headers=\"no\" class=\"gt_row gt_right\">0</td>\n<td headers=\"yes\" class=\"gt_row gt_right\">37</td>\n<td headers=\"%\" class=\"gt_row gt_right\">100.0%</td></tr>\n    <tr><td headers=\"Spore Print Color\" class=\"gt_row gt_left\">orange</td>\n<td headers=\"no\" class=\"gt_row gt_right\">0</td>\n<td headers=\"yes\" class=\"gt_row gt_right\">41</td>\n<td headers=\"%\" class=\"gt_row gt_right\">100.0%</td></tr>\n    <tr><td headers=\"Spore Print Color\" class=\"gt_row gt_left\">yellow</td>\n<td headers=\"no\" class=\"gt_row gt_right\">0</td>\n<td headers=\"yes\" class=\"gt_row gt_right\">34</td>\n<td headers=\"%\" class=\"gt_row gt_right\">100.0%</td></tr>\n    <tr><td headers=\"Spore Print Color\" class=\"gt_row gt_left\">white</td>\n<td headers=\"no\" class=\"gt_row gt_right\">105</td>\n<td headers=\"yes\" class=\"gt_row gt_right\">1672</td>\n<td headers=\"%\" class=\"gt_row gt_right\">94.1%</td></tr>\n    <tr><td headers=\"Spore Print Color\" class=\"gt_row gt_left\">chocolate</td>\n<td headers=\"no\" class=\"gt_row gt_right\">1198</td>\n<td headers=\"yes\" class=\"gt_row gt_right\">38</td>\n<td headers=\"%\" class=\"gt_row gt_right\">3.1%</td></tr>\n    <tr><td headers=\"Spore Print Color\" class=\"gt_row gt_left\">brown</td>\n<td headers=\"no\" class=\"gt_row gt_right\">1438</td>\n<td headers=\"yes\" class=\"gt_row gt_right\">38</td>\n<td headers=\"%\" class=\"gt_row gt_right\">2.6%</td></tr>\n    <tr><td headers=\"Spore Print Color\" class=\"gt_row gt_left\">black</td>\n<td headers=\"no\" class=\"gt_row gt_right\">1397</td>\n<td headers=\"yes\" class=\"gt_row gt_right\">0</td>\n<td headers=\"%\" class=\"gt_row gt_right\">0.0%</td></tr>\n    <tr><td headers=\"Spore Print Color\" class=\"gt_row gt_left\">green</td>\n<td headers=\"no\" class=\"gt_row gt_right\">56</td>\n<td headers=\"yes\" class=\"gt_row gt_right\">0</td>\n<td headers=\"%\" class=\"gt_row gt_right\">0.0%</td></tr>\n    <tr><td headers=\"Spore Print Color\" class=\"gt_row gt_left\" style=\"border-bottom-width: 1.8px; border-bottom-style: solid; border-bottom-color: #000000;\">purple</td>\n<td headers=\"no\" class=\"gt_row gt_right\" style=\"border-bottom-width: 1.8px; border-bottom-style: solid; border-bottom-color: #000000;\">39</td>\n<td headers=\"yes\" class=\"gt_row gt_right\" style=\"border-bottom-width: 1.8px; border-bottom-style: solid; border-bottom-color: #000000;\">0</td>\n<td headers=\"%\" class=\"gt_row gt_right\" style=\"border-bottom-width: 1.8px; border-bottom-style: solid; border-bottom-color: #000000;\">0.0%</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n\n:::\n:::\n\n\n## Removing Missing Cases or Columns\n\ntolerance for missing results\n\n## How Do Different Models Handle Missing Data?\n\nThe vast majority of models do not tolerate missing data. These methods usually require deleting the rows or columns that contain the missing values. \n\nOne notable exception is tree-based models [@sec-cart-cls]. Trees can internally impute missing values. For example, the classification and regression tree (CART) [@cart] methodology employs surrogate splits. These are alternate predictor/value combinations whose child nodes strongly agree with a specific (real) split. If the predictor involved in the actual split is missing, the algorithm can use one or more surrogates instead. Alternatively, C5.0 [@quinlan1993c4] uses more sophisticated accounting of the results to accommodate missing predictor values. TODO\n\nNaive Bayes [@sec-naive-bayes] is a classification technique focusing on the predictor values’ univariate distributions. If there are missing values (assuming that occur at random) the model is ignorant to their existence during the computation of the statistical summaries of each predictor. \n\n## Imputation: Predicting Predictor Values\n\n@hasan2021missing\n\nFor missing data, imputation is the process of using other existing information (i.e., the predictors) and using these to estimate what each missing value might have been. In other words, we will build an imputation model to fill in the missing column(s) so that we can run the primary machine-learning model.  A separate imputation model is required for each column that contains (or could contain) missing data. \n\nHistorically, most imputation methods have been developed to produce correct statistical inferences (e.g. p-values). The field of multiple imputations is mature and sophisticated. However, machine-learning models have very different goals and mostly rely on single imputation. \n\nWhile any machine-learning model can be used to impute values, we would like them to be: \n\n - Accurate.\n - Easy/fast to estimate.\n - Easily encapsulated inside of a general preprocessing pipeline. \n\nIf possible, simple models are preferable. For example, if there is a strong correlation between two quantitative predictors, a basic linear regression would be ideal if it produces accurate predictions. A few specific models have been highlighted in the literature: \n\nWe'll highlight a few methods here and give a short summary of their utility and drawbacks. \n\n#### Summary Statistics {.unnumbered}\n\nAn unfortunate method that was popular when computing resources were very limited was to use a summary value for the column as the imputation value. For example, if the column were numeric, the training set mean (or median) would be computed and this value would be used to replace any missing data for that column. For categorical columns, a similar process would be used with the mode of the data (i.e., the most frequently occurring category). \n\nThis is not a great strategy, and we suggest only evaluating it as a worst-possible benchmark for imputation performance. \n\n#### Tree-based Methods {.unnumbered}\n\nAs mentioned above, decision trees can be attractive as imputation tools due to being \"low maintenance.\" They (in theory) can handle missing data, are insensitive to nonlinear relationships, and can be used for different types of outcome data (e.g., categorical or numeric). They are computationally efficient and have relatively compact prediction equations. However, single trees are not known for their prediction accuracy. This limits their utility for imputation^[Despite the example below.].\n\nTree-based ensembles combine many individual trees into a single model. From an imputation perspective, ensembling trees can greatly improve the imputation accuracy while still being low maintenance. Random forest, in particular, has been cited in the literature for imputations. However, the nature of this model is that it requires thousands of individual trees to be stable, and that adds additional logistical overhead (since the saved model can be very large). Alternatively, the bagging procedure is very similar to random forests and may only require dozens of trees to produce stable imputed values. \n\n#### Nearest Neighbors {.unnumbered}\n\nK-nearest neighbor models [@sec-knn-cls] store the training set and then, for new data, find the K most similar values from the training set. For numeric outcomes, the average of the outcome data from the K neighbors would be used for imputation. For categorical outcomes, the most frequent category would be used as the imputation estimate. \n\nThe model is somewhat attractive since it is reasonably fast (if the training data is not huge) and requires very little preprocessing of its own. However, it would require embedding the training set (at the stage of its use) into the model pipeline. This can be infeasible for very large data sets. \n\n#### Principal Component Analysis {.unnumbered}\n\nThis approach can be very effective for numeric predictors that contain some between-predictor correlations. As previously mentioned in @sec-pca, PCA can be computed using the covariance or (preferably) the correlation matrix of the predictors. If the training data contain missing values, these matrices can be calculated using all pairwise complete\" observations. This allows the model to get the most out of the complete data by avoiding a casewise deletion. We can retain the PCA components that are associated with non-zero eigenvalues and use these to approximate the original values (for the training set or new data). \n\nThe approach becomes less attractive based on the data characteristics. If there are complex nonlinear relationships between predictors or if the predictors are statistically independent of one another, the PCA is less effective at describing the data. \n\n#### Smoothing {.unnumbered}\n\nFor serial/time series data, one easy and potentially effective tool is using a smoothing method. For example, a regression spline or a moving average smoother can be used to fill in intermittent missing values in the series. \n\n\n\n\n\n## Imputing Stalk Roots\n\nWe would develop the imputation model(s) just as we would for any other machine-learning problem, so we start with an initial split using the cases where the stalk root was complete (n = 5,644). Another 75/25 split was used via stratified sampling on the outcome (i.e. the stalk root). \n\n\n\n\n\nUnfortunately, we cannot assume that anything that we learned from the previous missingness analysis will translate over to the imputation model. After investigating several models, it turns out that it is very easy to impute this particular predictor’s values. A simple decision tree (similar to the one described in @eq-tree-2d and @sec-model-development-whole-game) can be very effective. This model described more in TODO, creates a set of nested if/then statements that sequentially cut the predictor space into smaller (hyper)rectangles. The data within the partitions should have outcome values that are \"pure,\" meaning that they try to isolate one particular category. This model requires tuning and, using overall accuracy as the performance metric, @fig-cart-impute shows the relationship between the complexity of the tree (measures using the number of splits) and accuracy. We can see that a fairly shallow tree (a depth of 5) is almost 100% accurate at imputing the stalk root values. \n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![The relationship between tree complexity and imputation accuracy for the stalk root predictor.](missing-data_files/figure-html/fig-cart-impute-1.png){#fig-cart-impute width=70%}\n:::\n:::\n\n\nTo better understand how the imputation model works, @fig-cart-impute-tree shows a slightly less complex tree (to fit on the page) with a depth of 2 created using the training set. The tree uses two of twenty possible predictors to achieve 90.4% accuracy. All but one of the terminal nodes (the bar plots on the bottom row) show the \"purity\" of the outcome: a single category is the most frequent value. Encoding this imputation equation is trivial, and it is a perfect example of what we would like to occur when developing imputation models. However, this case study is probably not predictive of what would occur with most data sets where the modeling problem is not as easy. \n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![A decision tree inputation model with a depth of two splits.](missing-data_files/figure-html/fig-cart-impute-tree-1.png){#fig-cart-impute-tree width=100%}\n:::\n:::\n\n\n## Blending Imputation into a Preprocessing Strategy\n\nGenerally speaking, the imputation model’s prediction should match the data type of the original value (e.g., integer, categorical, etc.). For this reason, we would probably impute data prior to any other preprocessing or feature engineering operations. \n\nImputation is an operation that can be easily misapplied. When developing the primary ML model, we should evaluate the imputation models inside of the primary resampling/validation loop (see fig @fig-within-model-process). That will ensure that the good or bad effects of imputation are appropriately measured and propagated into the primary performance metrics for the primary model. One produce that should _not be used_ is to develop and estimate an imputation model and fill in the missing data _prior to the initial split_. This can severely bias the metrics for the primary ML model to be overly optimistic. \n\n",
    "supporting": [
      "missing-data_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}