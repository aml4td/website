{
  "hash": "7e2e9a2ef4d78dcb17607e50219259d7",
  "result": {
    "engine": "knitr",
    "markdown": "---\nknitr:\n  opts_chunk:\n    cache.path: \"../_cache/removals/\"\n---\n\n\n# Removing Predictors {#sec-removing-predictors}\n\n\n\n\n\n\n\nWhen starting with a new data set, you may not know which columns have predictive power. You may also add features, such as splines, and you need to evaluate if they or others are relevant. \n\n**Feature selection** is the process of determining how many (and which) predictors should be retained in the model so that it performs satisfactorily. _Supervised_ feature selection, discussed below, is very complex. Unfortunately, it is often conducted inappropriately, partly because it can be computationally onerous to do the right thing.\n\nThis chapter _does not_ provide a comprehensive discussion of this topic. Due to the issue’s complexity, we suggest @fes for more detailed discussions of specific feature selection tools and algorithms. \n\n## Do Extra Predictor Matter? {#sec-effect-of-extra-features}\n\nAs with most questions, “It depends on the model.” Some models have specific limitations on the number of predictors. For example, ordinary linear regression cannot estimate more parameters than data points in the training set. As will be seen in later chapters, some models can naturally eliminate predictors with no effect relationship to the outcome. In general, it is better to have fewer predictors than an overabundance. \n\nTo demonstrate the potential issue, a regression problem was simulated using equations used in @hooker2004discovering and Ref\n\n$$ \ny_i = \\pi^{x_{i1}  x_{i2}}  \\sqrt{2 x_{i3}} - \\arcsin(x_{i4}) + \\log(x_{i3} + x_{i5}) - (x_{i9}/x_{i10})  \\sqrt{x_{i7}/x_{i8}} - (x_{i2} x_{i7}) + \\epsilon_i\n$$\n\nwhere the predictors have independent random uniform distributions and the error term is $N(0.00, 0.25)$. Training sets were simulated with 1,000 samples as well as a test set of 10,000 data points. In addition to the original 10 predictors, extra sets of $p^*$ random normal variables were added with $p^* = 10, 20, \\ldots, 100$. These columns were created to have no relationship to the outcome or the other predictors. A collection of models where optimized for these data and trained, including: \n\n* Generalized additive models (GAMs, section TODO) with nonlinear terms for all predictors. \n* Support vector machines (SVMs, section TODO) using a radial basis function kernel. \n* K-nearest neighbors (section TODO).\n* Single-layer neural networks (section TODO).\n* Penalized linear regression (section TODO). For this model, five interaction pairs were added from the model equation (e.g., $x_2\\times x_7$), assuming that we would have discovered these during data analysis. \n* Multivariate adaptive regression splines (MARS) (section TODO) with second-order interaction effects. \n* Bagged regression trees (section TODO).\n* Boosted regression trees (section TODO).\n* Bayesian adaptive regression trees (BART, section TODO).\n* Random forests (section TODO).\n* Cubist rule ensembles (section TODO).\n* RuleFit rule ensembles (section TODO).\n\nThe first four models do not intrinsically eliminate non-informative predictors. In actuality, this is a bit more complicated; many ensemble methods will over-select predictors so that, _in theory_, they can eliminate predictors. This is discussed in more detail for each model in their individual sections. \n\nAfter tuning these models on the training set (using 10-fold cross-validation), they were evaluated on the test set and the RMSE statistic was computed^[The details and code for this simulation can be found at [`https://github.com/topepo/noise_features_sim`](https://github.com/topepo/noise_features_sim).]. \n\n\n\n\n\nEach simulation was repeated 20 times. The averaged test set RMSE results are shown in @fig-feature-selection, where the model curves are colored by whether they can automatically remove useless predictors. First, note that a few models did a relatively poor job predicting these data: K-nearest neighbors, generalized additive models, bagged trees, and random forests. \n\nSince the models have different performance levels at baseline (i.e., $p^*=0$), we’ll measure the effect of the extra variables via a percent difference from baseline. K-nearest neighbors, support vector machines, and neural networks performed particularly poorly when additional predictors were added. The percent increases in RMSE for these models were 76.2%, 40.5%, and 39.5%, respectively. Bagged trees (change of 17%) and random forest (17.8%) showed moderate erosions in RMSE. \n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Results of the feature selection simulation. The different curves show the erosion of performance (measured by RMSE) as more non-informative predictors are added. The dotted horizontal line indicates the theoretical best RMSE value that could be achieved and the colored regions around the curves are 95% confidence intervals.](../figures/fig-feature-selection-1.svg){#fig-feature-selection fig-align='center' width=70%}\n:::\n:::\n\n\nThe other models showed almost no real change in RMSE as new predictors were added. This reinforces the unfortunate truth that it is difficult to make generalizations regarding what types of preprocessing should be done prior to top modeling; it very much depends on the model. Appendix TODO shows a table of recommended preprocessing techniques for many models described in this work. \n\n## Unsupervised {#sec-unsupervised-filters}\n\nThe most uncontroversial filter is one that removes if predictors have a single unique value. Given that there is no information in these data, it is better to remove them so that errors do not occur when training models. However, some models are tolerant of this data characteristic.  \n\nWe can view columns with a single unique value to have zero variance. However, what should we do if a predictor has an odd sample or two that are different? For example, suppose in the food delivery data, the training set has an item that was rarely ordered and had five orders out of the 6,004 training set points had a single item ordered, and one additional order had a count of two.  That predictor is unlikely to be important but would not be caught in a zero-variance filter. \n\n@apm describes a _near_ zero-variance filter that attempts to find predictors with very granular values (i.e., few unique values) and very unbalanced frequency distributions. It computes two characteristics: \n\n- The percentage of unique values. In the example above, this would be (3 / 6004 = 0.05%). \n- The count ratio of the two most frequent values (6004 / 5 $\\approx$ 1201). \n\nThere are suggested cutoffs for each of these criteria (10% and 19, respectively), with the rule that if the unique value percentage is less than 10% and the frequency value is greater than 19, the predictor is removed. \n\nCorrelation\n\nothers\n\n## Supervised {#sec-unsupervised-feature-selection}\n\n### Types\n\n## What Could Go Wrong?\n\n## Proper Data Usage\n\n\n## Chapter References {.unnumbered}\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}